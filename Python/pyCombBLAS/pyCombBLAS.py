# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pyCombBLAS
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class pySpParMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParMat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParMat(*args)
        try: self.this.append(this)
        except: self.this = this
    def getnnz(*args): return _pyCombBLAS.pySpParMat_getnnz(*args)
    def getnrow(*args): return _pyCombBLAS.pySpParMat_getnrow(*args)
    def getncol(*args): return _pyCombBLAS.pySpParMat_getncol(*args)
    def load(*args): return _pyCombBLAS.pySpParMat_load(*args)
    def GenGraph500Edges(*args): return _pyCombBLAS.pySpParMat_GenGraph500Edges(*args)
    def GenGraph500Candidates(*args): return _pyCombBLAS.pySpParMat_GenGraph500Candidates(*args)
    def FindIndsOfColsWithSumGreaterThan(*args): return _pyCombBLAS.pySpParMat_FindIndsOfColsWithSumGreaterThan(*args)
    def Apply_SetTo(*args): return _pyCombBLAS.pySpParMat_Apply_SetTo(*args)
    def SpMV_PlusTimes(*args): return _pyCombBLAS.pySpParMat_SpMV_PlusTimes(*args)
    def SpMV_SelMax(*args): return _pyCombBLAS.pySpParMat_SpMV_SelMax(*args)
    def SpMV_SelMax_inplace(*args): return _pyCombBLAS.pySpParMat_SpMV_SelMax_inplace(*args)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParMat
    __del__ = lambda self : None;
pySpParMat_swigregister = _pyCombBLAS.pySpParMat_swigregister
pySpParMat_swigregister(pySpParMat)

class pySpParVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParVec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def dense(*args): return _pyCombBLAS.pySpParVec_dense(*args)
    def getnnz(*args): return _pyCombBLAS.pySpParVec_getnnz(*args)
    def __iadd__(*args): return _pyCombBLAS.pySpParVec___iadd__(*args)
    def __isub__(*args): return _pyCombBLAS.pySpParVec___isub__(*args)
    def copy(*args): return _pyCombBLAS.pySpParVec_copy(*args)
    def SetElement(*args): return _pyCombBLAS.pySpParVec_SetElement(*args)
    def GetElement(*args): return _pyCombBLAS.pySpParVec_GetElement(*args)
    def invert(*args): return _pyCombBLAS.pySpParVec_invert(*args)
    def abs(*args): return _pyCombBLAS.pySpParVec_abs(*args)
    def any(*args): return _pyCombBLAS.pySpParVec_any(*args)
    def all(*args): return _pyCombBLAS.pySpParVec_all(*args)
    def intersectSize(*args): return _pyCombBLAS.pySpParVec_intersectSize(*args)
    def printall(*args): return _pyCombBLAS.pySpParVec_printall(*args)
    def load(*args): return _pyCombBLAS.pySpParVec_load(*args)
    def FindInds_GreaterThan(*args): return _pyCombBLAS.pySpParVec_FindInds_GreaterThan(*args)
    def FindInds_NotEqual(*args): return _pyCombBLAS.pySpParVec_FindInds_NotEqual(*args)
    def SubsRef(*args): return _pyCombBLAS.pySpParVec_SubsRef(*args)
    def Reduce_sum(*args): return _pyCombBLAS.pySpParVec_Reduce_sum(*args)
    def setNumToInd(*args): return _pyCombBLAS.pySpParVec_setNumToInd(*args)
    def Apply_SetTo(*args): return _pyCombBLAS.pySpParVec_Apply_SetTo(*args)
    __swig_getmethods__["zeros"] = lambda x: _pyCombBLAS.pySpParVec_zeros
    if _newclass:zeros = staticmethod(_pyCombBLAS.pySpParVec_zeros)
    __swig_getmethods__["range"] = lambda x: _pyCombBLAS.pySpParVec_range
    if _newclass:range = staticmethod(_pyCombBLAS.pySpParVec_range)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParVec
    __del__ = lambda self : None;
pySpParVec_swigregister = _pyCombBLAS.pySpParVec_swigregister
pySpParVec_swigregister(pySpParVec)
pySpParVec_zeros = _pyCombBLAS.pySpParVec_zeros
pySpParVec_range = _pyCombBLAS.pySpParVec_range

EWiseMult = _pyCombBLAS.EWiseMult
EWiseMult_inplacefirst = _pyCombBLAS.EWiseMult_inplacefirst
class pyDenseParVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyDenseParVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pyDenseParVec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pyDenseParVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def sparse(*args): return _pyCombBLAS.pyDenseParVec_sparse(*args)
    def length(*args): return _pyCombBLAS.pyDenseParVec_length(*args)
    def add(*args): return _pyCombBLAS.pyDenseParVec_add(*args)
    def __iadd__(*args): return _pyCombBLAS.pyDenseParVec___iadd__(*args)
    def __isub__(*args): return _pyCombBLAS.pyDenseParVec___isub__(*args)
    def copy(*args): return _pyCombBLAS.pyDenseParVec_copy(*args)
    def SetElement(*args): return _pyCombBLAS.pyDenseParVec_SetElement(*args)
    def GetElement(*args): return _pyCombBLAS.pyDenseParVec_GetElement(*args)
    def RandPerm(*args): return _pyCombBLAS.pyDenseParVec_RandPerm(*args)
    def printall(*args): return _pyCombBLAS.pyDenseParVec_printall(*args)
    def invert(*args): return _pyCombBLAS.pyDenseParVec_invert(*args)
    def abs(*args): return _pyCombBLAS.pyDenseParVec_abs(*args)
    def negate(*args): return _pyCombBLAS.pyDenseParVec_negate(*args)
    def getnnz(*args): return _pyCombBLAS.pyDenseParVec_getnnz(*args)
    def getnz(*args): return _pyCombBLAS.pyDenseParVec_getnz(*args)
    def load(*args): return _pyCombBLAS.pyDenseParVec_load(*args)
    def Count_GreaterThan(*args): return _pyCombBLAS.pyDenseParVec_Count_GreaterThan(*args)
    def Find_totality(*args): return _pyCombBLAS.pyDenseParVec_Find_totality(*args)
    def Find_GreaterThan(*args): return _pyCombBLAS.pyDenseParVec_Find_GreaterThan(*args)
    def Find_NotEqual(*args): return _pyCombBLAS.pyDenseParVec_Find_NotEqual(*args)
    def FindInds_GreaterThan(*args): return _pyCombBLAS.pyDenseParVec_FindInds_GreaterThan(*args)
    def FindInds_NotEqual(*args): return _pyCombBLAS.pyDenseParVec_FindInds_NotEqual(*args)
    def SubsRef(*args): return _pyCombBLAS.pyDenseParVec_SubsRef(*args)
    def ApplyMasked_SetTo(*args): return _pyCombBLAS.pyDenseParVec_ApplyMasked_SetTo(*args)
    __swig_getmethods__["range"] = lambda x: _pyCombBLAS.pyDenseParVec_range
    if _newclass:range = staticmethod(_pyCombBLAS.pyDenseParVec_range)
    __swig_destroy__ = _pyCombBLAS.delete_pyDenseParVec
    __del__ = lambda self : None;
pyDenseParVec_swigregister = _pyCombBLAS.pyDenseParVec_swigregister
pyDenseParVec_swigregister(pyDenseParVec)
pyDenseParVec_range = _pyCombBLAS.pyDenseParVec_range

finalize = _pyCombBLAS.finalize
root = _pyCombBLAS.root


