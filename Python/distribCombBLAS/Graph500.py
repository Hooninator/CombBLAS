import time
import scipy as sc
import DiGraph as kdtd
import SpParVec as spv
#from DiGraph import DiGraph

def k2Validate(G, start, parents, levels):
	good = True;
	[[Gi,Gj],Gv] = G._toVectors(G.spmat)
	root = (levels==0).nonzero()[0][0];

	
	(valid, levels) = kdt.isBfsTree(G, start, parents);
	#	isBfsTree implements Graph500 tests 1 and 2 
	if ~valid:
		print "isBfsTree detected failure of Graph500 test %d" % abs(valid);

	# Spec test #3:
	# every input edge has vertices whose levels differ by no more than 1
	# NOTE:  code implements every _tree_ edge, not input edge
#FIX:  visited not calculated yet
	if any((parents <> -2) & (visited <> 1)):
		print "The levels of some input edges' vertices differ by more than 1"
		good = False;

	# Spec test #4:
	# the BFS tree spans a connected component's vertices (== all edges either
	# have both endpoints in the tree or not in the tree)
	li = levels[Gi]; 
	lj = levels[Gj];
	neither_in = (li == -2) & (lj == -2);
	both_in = (li > -2) & (lj > -2);
	#old if any(sc.logical_not(neither_in | both_in)):	
	if any(~(neither_in | both_in)):
		print "The tree does not span exactly the connected component"
		good = False;

	# Spec test #5:
	# a vertex and its parent are joined by an edge of the original graph
	respects = abs(li-lj) <= 1
	#old if any(sc.logical_not(neither_in | respects)):
	if any(~(neither_in | respects)):
		print "At least one vertex and its parent are not joined by an original edge"
		good = False;

	return good;



scale = 4;
edges = kdtd.Graph500Edges(scale);

before = time.clock()
G = kdtd.DiGraph(edges,(2**scale,2**scale));
K1elapsed = time.clock() - before;

#old deg3verts = sc.array(sc.nonzero(G.degree().flatten() > 2)).flatten();	#indices of vertices with degree > 2
deg3verts = (G.degree() > 2).nonzero();
								# deg3verts stays distributed; indices to it are scalars
nstarts = 4;
starts = np.random.randint(0,high=2**scale,size=(nstarts,));
K2elapsed = 0;
K2edges = 0;
for i in starts[:nstarts]:
	start = deg3verts[i];
	before = time.clock();
	parents = kdtd.bfsTree(G, start);
	K2elapsed += time.clock() - before;
	if not k2Validate(G, start, parents):
		print "Invalid BFS tree generated by bfsTree";
		break;
	K2edges += len((parents[edges.verts()[0]] <> -2).nonzero());


print 'Graph500 benchmark run for scale = %2i' % scale
print 'Kernel 1 time = %8.4f seconds' % K1elapsed
print 'Kernel 2 time = %8.4f seconds' % K2elapsed
print '                    %8.4f seconds for each of %i starts' % (K2elapsed/nstarts, nstarts)
print 'Kernel 2 TEPS = %7.4e' % (K2edges/K2elapsed)
