# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyCombBLAS', [dirname(__file__)])
        except ImportError:
            import _pyCombBLAS
            return _pyCombBLAS
        if fp is not None:
            try:
                _mod = imp.load_module('_pyCombBLAS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyCombBLAS = swig_import_helper()
    del swig_import_helper
else:
    import _pyCombBLAS
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class pySpParMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParMat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParMat(*args)
        try: self.this.append(this)
        except: self.this = this
    def getnnz(self): return _pyCombBLAS.pySpParMat_getnnz(self)
    def getnee(self): return _pyCombBLAS.pySpParMat_getnee(self)
    def getnrow(self): return _pyCombBLAS.pySpParMat_getnrow(self)
    def getncol(self): return _pyCombBLAS.pySpParMat_getncol(self)
    def load(self, *args): return _pyCombBLAS.pySpParMat_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParMat_save(self, *args)
    def GenGraph500Edges(self, *args): return _pyCombBLAS.pySpParMat_GenGraph500Edges(self, *args)
    def copy(self): return _pyCombBLAS.pySpParMat_copy(self)
    def assign(self, *args): return _pyCombBLAS.pySpParMat_assign(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParMat_SubsRef(self, *args)
    def removeSelfLoops(self): return _pyCombBLAS.pySpParMat_removeSelfLoops(self)
    def Apply(self, *args): return _pyCombBLAS.pySpParMat_Apply(self, *args)
    def DimWiseApply(self, *args): return _pyCombBLAS.pySpParMat_DimWiseApply(self, *args)
    def Prune(self, *args): return _pyCombBLAS.pySpParMat_Prune(self, *args)
    def Count(self, *args): return _pyCombBLAS.pySpParMat_Count(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParMat_Reduce(self, *args)
    def Transpose(self): return _pyCombBLAS.pySpParMat_Transpose(self)
    def Find(self, *args): return _pyCombBLAS.pySpParMat_Find(self, *args)
    def SpMV(self, *args): return _pyCombBLAS.pySpParMat_SpMV(self, *args)
    def SpMV_inplace(self, *args): return _pyCombBLAS.pySpParMat_SpMV_inplace(self, *args)
    def Square(self, *args): return _pyCombBLAS.pySpParMat_Square(self, *args)
    def SpGEMM(self, *args): return _pyCombBLAS.pySpParMat_SpGEMM(self, *args)
    __swig_getmethods__["Column"] = lambda x: _pyCombBLAS.pySpParMat_Column
    if _newclass:Column = staticmethod(_pyCombBLAS.pySpParMat_Column)
    __swig_getmethods__["Row"] = lambda x: _pyCombBLAS.pySpParMat_Row
    if _newclass:Row = staticmethod(_pyCombBLAS.pySpParMat_Row)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParMat
    __del__ = lambda self : None;
pySpParMat_swigregister = _pyCombBLAS.pySpParMat_swigregister
pySpParMat_swigregister(pySpParMat)

def pySpParMat_Column():
  return _pyCombBLAS.pySpParMat_Column()
pySpParMat_Column = _pyCombBLAS.pySpParMat_Column

def pySpParMat_Row():
  return _pyCombBLAS.pySpParMat_Row()
pySpParMat_Row = _pyCombBLAS.pySpParMat_Row

class pySpParMatBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParMatBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParMatBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParMatBool(*args)
        try: self.this.append(this)
        except: self.this = this
    def getnnz(self): return _pyCombBLAS.pySpParMatBool_getnnz(self)
    def getnee(self): return _pyCombBLAS.pySpParMatBool_getnee(self)
    def getnrow(self): return _pyCombBLAS.pySpParMatBool_getnrow(self)
    def getncol(self): return _pyCombBLAS.pySpParMatBool_getncol(self)
    def load(self, *args): return _pyCombBLAS.pySpParMatBool_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParMatBool_save(self, *args)
    def GenGraph500Edges(self, *args): return _pyCombBLAS.pySpParMatBool_GenGraph500Edges(self, *args)
    def copy(self): return _pyCombBLAS.pySpParMatBool_copy(self)
    def assign(self, *args): return _pyCombBLAS.pySpParMatBool_assign(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParMatBool_SubsRef(self, *args)
    def removeSelfLoops(self): return _pyCombBLAS.pySpParMatBool_removeSelfLoops(self)
    def Apply(self, *args): return _pyCombBLAS.pySpParMatBool_Apply(self, *args)
    def Prune(self, *args): return _pyCombBLAS.pySpParMatBool_Prune(self, *args)
    def Count(self, *args): return _pyCombBLAS.pySpParMatBool_Count(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParMatBool_Reduce(self, *args)
    def Transpose(self): return _pyCombBLAS.pySpParMatBool_Transpose(self)
    def Find(self, *args): return _pyCombBLAS.pySpParMatBool_Find(self, *args)
    def SpMV(self, *args): return _pyCombBLAS.pySpParMatBool_SpMV(self, *args)
    def SpMV_inplace(self, *args): return _pyCombBLAS.pySpParMatBool_SpMV_inplace(self, *args)
    def Square(self, *args): return _pyCombBLAS.pySpParMatBool_Square(self, *args)
    def SpGEMM(self, *args): return _pyCombBLAS.pySpParMatBool_SpGEMM(self, *args)
    __swig_getmethods__["Column"] = lambda x: _pyCombBLAS.pySpParMatBool_Column
    if _newclass:Column = staticmethod(_pyCombBLAS.pySpParMatBool_Column)
    __swig_getmethods__["Row"] = lambda x: _pyCombBLAS.pySpParMatBool_Row
    if _newclass:Row = staticmethod(_pyCombBLAS.pySpParMatBool_Row)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParMatBool
    __del__ = lambda self : None;
pySpParMatBool_swigregister = _pyCombBLAS.pySpParMatBool_swigregister
pySpParMatBool_swigregister(pySpParMatBool)

def pySpParMatBool_Column():
  return _pyCombBLAS.pySpParMatBool_Column()
pySpParMatBool_Column = _pyCombBLAS.pySpParMatBool_Column

def pySpParMatBool_Row():
  return _pyCombBLAS.pySpParMatBool_Row()
pySpParMatBool_Row = _pyCombBLAS.pySpParMatBool_Row

class pySpParMatObj1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParMatObj1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParMatObj1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParMatObj1(*args)
        try: self.this.append(this)
        except: self.this = this
    def getnee(self): return _pyCombBLAS.pySpParMatObj1_getnee(self)
    def getnrow(self): return _pyCombBLAS.pySpParMatObj1_getnrow(self)
    def getncol(self): return _pyCombBLAS.pySpParMatObj1_getncol(self)
    def load(self, *args): return _pyCombBLAS.pySpParMatObj1_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParMatObj1_save(self, *args)
    def copy(self): return _pyCombBLAS.pySpParMatObj1_copy(self)
    def assign(self, *args): return _pyCombBLAS.pySpParMatObj1_assign(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParMatObj1_SubsRef(self, *args)
    def removeSelfLoops(self): return _pyCombBLAS.pySpParMatObj1_removeSelfLoops(self)
    def Apply(self, *args): return _pyCombBLAS.pySpParMatObj1_Apply(self, *args)
    def DimWiseApply(self, *args): return _pyCombBLAS.pySpParMatObj1_DimWiseApply(self, *args)
    def Prune(self, *args): return _pyCombBLAS.pySpParMatObj1_Prune(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParMatObj1_Reduce(self, *args)
    def Transpose(self): return _pyCombBLAS.pySpParMatObj1_Transpose(self)
    def Find(self, *args): return _pyCombBLAS.pySpParMatObj1_Find(self, *args)
    def SpMV(self, *args): return _pyCombBLAS.pySpParMatObj1_SpMV(self, *args)
    def SpMV_inplace(self, *args): return _pyCombBLAS.pySpParMatObj1_SpMV_inplace(self, *args)
    def Square(self, *args): return _pyCombBLAS.pySpParMatObj1_Square(self, *args)
    def SpGEMM(self, *args): return _pyCombBLAS.pySpParMatObj1_SpGEMM(self, *args)
    __swig_getmethods__["Column"] = lambda x: _pyCombBLAS.pySpParMatObj1_Column
    if _newclass:Column = staticmethod(_pyCombBLAS.pySpParMatObj1_Column)
    __swig_getmethods__["Row"] = lambda x: _pyCombBLAS.pySpParMatObj1_Row
    if _newclass:Row = staticmethod(_pyCombBLAS.pySpParMatObj1_Row)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParMatObj1
    __del__ = lambda self : None;
pySpParMatObj1_swigregister = _pyCombBLAS.pySpParMatObj1_swigregister
pySpParMatObj1_swigregister(pySpParMatObj1)

def pySpParMatObj1_Column():
  return _pyCombBLAS.pySpParMatObj1_Column()
pySpParMatObj1_Column = _pyCombBLAS.pySpParMatObj1_Column

def pySpParMatObj1_Row():
  return _pyCombBLAS.pySpParMatObj1_Row()
pySpParMatObj1_Row = _pyCombBLAS.pySpParMatObj1_Row

class pySpParMatObj2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParMatObj2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParMatObj2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParMatObj2(*args)
        try: self.this.append(this)
        except: self.this = this
    def getnee(self): return _pyCombBLAS.pySpParMatObj2_getnee(self)
    def getnrow(self): return _pyCombBLAS.pySpParMatObj2_getnrow(self)
    def getncol(self): return _pyCombBLAS.pySpParMatObj2_getncol(self)
    def load(self, *args): return _pyCombBLAS.pySpParMatObj2_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParMatObj2_save(self, *args)
    def copy(self): return _pyCombBLAS.pySpParMatObj2_copy(self)
    def assign(self, *args): return _pyCombBLAS.pySpParMatObj2_assign(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParMatObj2_SubsRef(self, *args)
    def removeSelfLoops(self): return _pyCombBLAS.pySpParMatObj2_removeSelfLoops(self)
    def Apply(self, *args): return _pyCombBLAS.pySpParMatObj2_Apply(self, *args)
    def DimWiseApply(self, *args): return _pyCombBLAS.pySpParMatObj2_DimWiseApply(self, *args)
    def Prune(self, *args): return _pyCombBLAS.pySpParMatObj2_Prune(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParMatObj2_Reduce(self, *args)
    def Transpose(self): return _pyCombBLAS.pySpParMatObj2_Transpose(self)
    def Find(self, *args): return _pyCombBLAS.pySpParMatObj2_Find(self, *args)
    def SpMV(self, *args): return _pyCombBLAS.pySpParMatObj2_SpMV(self, *args)
    def SpMV_inplace(self, *args): return _pyCombBLAS.pySpParMatObj2_SpMV_inplace(self, *args)
    def Square(self, *args): return _pyCombBLAS.pySpParMatObj2_Square(self, *args)
    def SpGEMM(self, *args): return _pyCombBLAS.pySpParMatObj2_SpGEMM(self, *args)
    __swig_getmethods__["Column"] = lambda x: _pyCombBLAS.pySpParMatObj2_Column
    if _newclass:Column = staticmethod(_pyCombBLAS.pySpParMatObj2_Column)
    __swig_getmethods__["Row"] = lambda x: _pyCombBLAS.pySpParMatObj2_Row
    if _newclass:Row = staticmethod(_pyCombBLAS.pySpParMatObj2_Row)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParMatObj2
    __del__ = lambda self : None;
pySpParMatObj2_swigregister = _pyCombBLAS.pySpParMatObj2_swigregister
pySpParMatObj2_swigregister(pySpParMatObj2)

def pySpParMatObj2_Column():
  return _pyCombBLAS.pySpParMatObj2_Column()
pySpParMatObj2_Column = _pyCombBLAS.pySpParMatObj2_Column

def pySpParMatObj2_Row():
  return _pyCombBLAS.pySpParMatObj2_Row()
pySpParMatObj2_Row = _pyCombBLAS.pySpParMatObj2_Row

class pySpParVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParVec, name)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def dense(self): return _pyCombBLAS.pySpParVec_dense(self)
    def getnee(self): return _pyCombBLAS.pySpParVec_getnee(self)
    def __len__(self): return _pyCombBLAS.pySpParVec___len__(self)
    def len(self): return _pyCombBLAS.pySpParVec_len(self)
    def copy(self): return _pyCombBLAS.pySpParVec_copy(self)
    def intersectSize(self, *args): return _pyCombBLAS.pySpParVec_intersectSize(self, *args)
    def printall(self): return _pyCombBLAS.pySpParVec_printall(self)
    def load(self, *args): return _pyCombBLAS.pySpParVec_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParVec_save(self, *args)
    def Count(self, *args): return _pyCombBLAS.pySpParVec_Count(self, *args)
    def Apply(self, *args): return _pyCombBLAS.pySpParVec_Apply(self, *args)
    def ApplyInd(self, *args): return _pyCombBLAS.pySpParVec_ApplyInd(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParVec_SubsRef(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParVec_Reduce(self, *args)
    def Sort(self): return _pyCombBLAS.pySpParVec_Sort(self)
    def TopK(self, *args): return _pyCombBLAS.pySpParVec_TopK(self, *args)
    def setNumToInd(self): return _pyCombBLAS.pySpParVec_setNumToInd(self)
    __swig_getmethods__["zeros"] = lambda x: _pyCombBLAS.pySpParVec_zeros
    if _newclass:zeros = staticmethod(_pyCombBLAS.pySpParVec_zeros)
    __swig_getmethods__["range"] = lambda x: _pyCombBLAS.pySpParVec_range
    if _newclass:range = staticmethod(_pyCombBLAS.pySpParVec_range)
    def __delitem__(self, *args): return _pyCombBLAS.pySpParVec___delitem__(self, *args)
    def __getitem__(self, *args): return _pyCombBLAS.pySpParVec___getitem__(self, *args)
    def __setitem__(self, *args): return _pyCombBLAS.pySpParVec___setitem__(self, *args)
    def __repr__(self): return _pyCombBLAS.pySpParVec___repr__(self)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParVec
    __del__ = lambda self : None;
pySpParVec_swigregister = _pyCombBLAS.pySpParVec_swigregister
pySpParVec_swigregister(pySpParVec)

def pySpParVec_zeros(*args):
  return _pyCombBLAS.pySpParVec_zeros(*args)
pySpParVec_zeros = _pyCombBLAS.pySpParVec_zeros

def pySpParVec_range(*args):
  return _pyCombBLAS.pySpParVec_range(*args)
pySpParVec_range = _pyCombBLAS.pySpParVec_range


def EWiseMult(*args):
  return _pyCombBLAS.EWiseMult(*args)
EWiseMult = _pyCombBLAS.EWiseMult

def EWiseMult_inplacefirst(*args):
  return _pyCombBLAS.EWiseMult_inplacefirst(*args)
EWiseMult_inplacefirst = _pyCombBLAS.EWiseMult_inplacefirst
class pySpParVecObj1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParVecObj1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParVecObj1, name)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParVecObj1(*args)
        try: self.this.append(this)
        except: self.this = this
    def dense(self): return _pyCombBLAS.pySpParVecObj1_dense(self)
    def getnee(self): return _pyCombBLAS.pySpParVecObj1_getnee(self)
    def __len__(self): return _pyCombBLAS.pySpParVecObj1___len__(self)
    def len(self): return _pyCombBLAS.pySpParVecObj1_len(self)
    def copy(self): return _pyCombBLAS.pySpParVecObj1_copy(self)
    def any(self): return _pyCombBLAS.pySpParVecObj1_any(self)
    def all(self): return _pyCombBLAS.pySpParVecObj1_all(self)
    def intersectSize(self, *args): return _pyCombBLAS.pySpParVecObj1_intersectSize(self, *args)
    def printall(self): return _pyCombBLAS.pySpParVecObj1_printall(self)
    def load(self, *args): return _pyCombBLAS.pySpParVecObj1_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParVecObj1_save(self, *args)
    def Count(self, *args): return _pyCombBLAS.pySpParVecObj1_Count(self, *args)
    def Apply(self, *args): return _pyCombBLAS.pySpParVecObj1_Apply(self, *args)
    def ApplyInd(self, *args): return _pyCombBLAS.pySpParVecObj1_ApplyInd(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParVecObj1_SubsRef(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParVecObj1_Reduce(self, *args)
    def Sort(self): return _pyCombBLAS.pySpParVecObj1_Sort(self)
    def TopK(self, *args): return _pyCombBLAS.pySpParVecObj1_TopK(self, *args)
    def __delitem__(self, *args): return _pyCombBLAS.pySpParVecObj1___delitem__(self, *args)
    def __getitem__(self, *args): return _pyCombBLAS.pySpParVecObj1___getitem__(self, *args)
    def __setitem__(self, *args): return _pyCombBLAS.pySpParVecObj1___setitem__(self, *args)
    def __repr__(self): return _pyCombBLAS.pySpParVecObj1___repr__(self)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParVecObj1
    __del__ = lambda self : None;
pySpParVecObj1_swigregister = _pyCombBLAS.pySpParVecObj1_swigregister
pySpParVecObj1_swigregister(pySpParVecObj1)

class pySpParVecObj2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pySpParVecObj2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pySpParVecObj2, name)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pySpParVecObj2(*args)
        try: self.this.append(this)
        except: self.this = this
    def dense(self): return _pyCombBLAS.pySpParVecObj2_dense(self)
    def getnee(self): return _pyCombBLAS.pySpParVecObj2_getnee(self)
    def __len__(self): return _pyCombBLAS.pySpParVecObj2___len__(self)
    def len(self): return _pyCombBLAS.pySpParVecObj2_len(self)
    def copy(self): return _pyCombBLAS.pySpParVecObj2_copy(self)
    def any(self): return _pyCombBLAS.pySpParVecObj2_any(self)
    def all(self): return _pyCombBLAS.pySpParVecObj2_all(self)
    def intersectSize(self, *args): return _pyCombBLAS.pySpParVecObj2_intersectSize(self, *args)
    def printall(self): return _pyCombBLAS.pySpParVecObj2_printall(self)
    def load(self, *args): return _pyCombBLAS.pySpParVecObj2_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pySpParVecObj2_save(self, *args)
    def Count(self, *args): return _pyCombBLAS.pySpParVecObj2_Count(self, *args)
    def Apply(self, *args): return _pyCombBLAS.pySpParVecObj2_Apply(self, *args)
    def ApplyInd(self, *args): return _pyCombBLAS.pySpParVecObj2_ApplyInd(self, *args)
    def SubsRef(self, *args): return _pyCombBLAS.pySpParVecObj2_SubsRef(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pySpParVecObj2_Reduce(self, *args)
    def Sort(self): return _pyCombBLAS.pySpParVecObj2_Sort(self)
    def TopK(self, *args): return _pyCombBLAS.pySpParVecObj2_TopK(self, *args)
    def __delitem__(self, *args): return _pyCombBLAS.pySpParVecObj2___delitem__(self, *args)
    def __getitem__(self, *args): return _pyCombBLAS.pySpParVecObj2___getitem__(self, *args)
    def __setitem__(self, *args): return _pyCombBLAS.pySpParVecObj2___setitem__(self, *args)
    def __repr__(self): return _pyCombBLAS.pySpParVecObj2___repr__(self)
    __swig_destroy__ = _pyCombBLAS.delete_pySpParVecObj2
    __del__ = lambda self : None;
pySpParVecObj2_swigregister = _pyCombBLAS.pySpParVecObj2_swigregister
pySpParVecObj2_swigregister(pySpParVecObj2)

class pyDenseParVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyDenseParVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pyDenseParVec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pyDenseParVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def sparse(self, *args): return _pyCombBLAS.pyDenseParVec_sparse(self, *args)
    def len(self): return _pyCombBLAS.pyDenseParVec_len(self)
    def __len__(self): return _pyCombBLAS.pyDenseParVec___len__(self)
    def copy(self): return _pyCombBLAS.pyDenseParVec_copy(self)
    def SubsRef(self, *args): return _pyCombBLAS.pyDenseParVec_SubsRef(self, *args)
    def RandPerm(self): return _pyCombBLAS.pyDenseParVec_RandPerm(self)
    def Sort(self): return _pyCombBLAS.pyDenseParVec_Sort(self)
    def TopK(self, *args): return _pyCombBLAS.pyDenseParVec_TopK(self, *args)
    def printall(self): return _pyCombBLAS.pyDenseParVec_printall(self)
    def getnee(self): return _pyCombBLAS.pyDenseParVec_getnee(self)
    def load(self, *args): return _pyCombBLAS.pyDenseParVec_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pyDenseParVec_save(self, *args)
    def Count(self, *args): return _pyCombBLAS.pyDenseParVec_Count(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pyDenseParVec_Reduce(self, *args)
    def Find(self, *args): return _pyCombBLAS.pyDenseParVec_Find(self, *args)
    def FindInds(self, *args): return _pyCombBLAS.pyDenseParVec_FindInds(self, *args)
    def Apply(self, *args): return _pyCombBLAS.pyDenseParVec_Apply(self, *args)
    def ApplyInd(self, *args): return _pyCombBLAS.pyDenseParVec_ApplyInd(self, *args)
    def ApplyMasked(self, *args): return _pyCombBLAS.pyDenseParVec_ApplyMasked(self, *args)
    def EWiseApply(self, *args): return _pyCombBLAS.pyDenseParVec_EWiseApply(self, *args)
    __swig_getmethods__["range"] = lambda x: _pyCombBLAS.pyDenseParVec_range
    if _newclass:range = staticmethod(_pyCombBLAS.pyDenseParVec_range)
    def __getitem__(self, *args): return _pyCombBLAS.pyDenseParVec___getitem__(self, *args)
    def __setitem__(self, *args): return _pyCombBLAS.pyDenseParVec___setitem__(self, *args)
    __swig_destroy__ = _pyCombBLAS.delete_pyDenseParVec
    __del__ = lambda self : None;
pyDenseParVec_swigregister = _pyCombBLAS.pyDenseParVec_swigregister
pyDenseParVec_swigregister(pyDenseParVec)

def EWiseApply(*args):
  return _pyCombBLAS.EWiseApply(*args)
EWiseApply = _pyCombBLAS.EWiseApply

def pyDenseParVec_range(*args):
  return _pyCombBLAS.pyDenseParVec_range(*args)
pyDenseParVec_range = _pyCombBLAS.pyDenseParVec_range

class pyDenseParVecObj1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyDenseParVecObj1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pyDenseParVecObj1, name)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pyDenseParVecObj1(*args)
        try: self.this.append(this)
        except: self.this = this
    def sparse(self, keep = None): return _pyCombBLAS.pyDenseParVecObj1_sparse(self, keep)
    def len(self): return _pyCombBLAS.pyDenseParVecObj1_len(self)
    def __len__(self): return _pyCombBLAS.pyDenseParVecObj1___len__(self)
    def copy(self): return _pyCombBLAS.pyDenseParVecObj1_copy(self)
    def SubsRef(self, *args): return _pyCombBLAS.pyDenseParVecObj1_SubsRef(self, *args)
    def RandPerm(self): return _pyCombBLAS.pyDenseParVecObj1_RandPerm(self)
    def Sort(self): return _pyCombBLAS.pyDenseParVecObj1_Sort(self)
    def TopK(self, *args): return _pyCombBLAS.pyDenseParVecObj1_TopK(self, *args)
    def printall(self): return _pyCombBLAS.pyDenseParVecObj1_printall(self)
    def getnee(self): return _pyCombBLAS.pyDenseParVecObj1_getnee(self)
    def load(self, *args): return _pyCombBLAS.pyDenseParVecObj1_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pyDenseParVecObj1_save(self, *args)
    def Count(self, *args): return _pyCombBLAS.pyDenseParVecObj1_Count(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pyDenseParVecObj1_Reduce(self, *args)
    def Find(self, *args): return _pyCombBLAS.pyDenseParVecObj1_Find(self, *args)
    def FindInds(self, *args): return _pyCombBLAS.pyDenseParVecObj1_FindInds(self, *args)
    def Apply(self, *args): return _pyCombBLAS.pyDenseParVecObj1_Apply(self, *args)
    def ApplyMasked(self, *args): return _pyCombBLAS.pyDenseParVecObj1_ApplyMasked(self, *args)
    def ApplyInd(self, *args): return _pyCombBLAS.pyDenseParVecObj1_ApplyInd(self, *args)
    def EWiseApply(self, *args): return _pyCombBLAS.pyDenseParVecObj1_EWiseApply(self, *args)
    def __getitem__(self, *args): return _pyCombBLAS.pyDenseParVecObj1___getitem__(self, *args)
    def __setitem__(self, *args): return _pyCombBLAS.pyDenseParVecObj1___setitem__(self, *args)
    def __repr__(self): return _pyCombBLAS.pyDenseParVecObj1___repr__(self)
    __swig_destroy__ = _pyCombBLAS.delete_pyDenseParVecObj1
    __del__ = lambda self : None;
pyDenseParVecObj1_swigregister = _pyCombBLAS.pyDenseParVecObj1_swigregister
pyDenseParVecObj1_swigregister(pyDenseParVecObj1)

class pyDenseParVecObj2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyDenseParVecObj2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pyDenseParVecObj2, name)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_pyDenseParVecObj2(*args)
        try: self.this.append(this)
        except: self.this = this
    def sparse(self, keep = None): return _pyCombBLAS.pyDenseParVecObj2_sparse(self, keep)
    def len(self): return _pyCombBLAS.pyDenseParVecObj2_len(self)
    def __len__(self): return _pyCombBLAS.pyDenseParVecObj2___len__(self)
    def copy(self): return _pyCombBLAS.pyDenseParVecObj2_copy(self)
    def SubsRef(self, *args): return _pyCombBLAS.pyDenseParVecObj2_SubsRef(self, *args)
    def RandPerm(self): return _pyCombBLAS.pyDenseParVecObj2_RandPerm(self)
    def Sort(self): return _pyCombBLAS.pyDenseParVecObj2_Sort(self)
    def TopK(self, *args): return _pyCombBLAS.pyDenseParVecObj2_TopK(self, *args)
    def printall(self): return _pyCombBLAS.pyDenseParVecObj2_printall(self)
    def getnee(self): return _pyCombBLAS.pyDenseParVecObj2_getnee(self)
    def load(self, *args): return _pyCombBLAS.pyDenseParVecObj2_load(self, *args)
    def save(self, *args): return _pyCombBLAS.pyDenseParVecObj2_save(self, *args)
    def Count(self, *args): return _pyCombBLAS.pyDenseParVecObj2_Count(self, *args)
    def Reduce(self, *args): return _pyCombBLAS.pyDenseParVecObj2_Reduce(self, *args)
    def Find(self, *args): return _pyCombBLAS.pyDenseParVecObj2_Find(self, *args)
    def FindInds(self, *args): return _pyCombBLAS.pyDenseParVecObj2_FindInds(self, *args)
    def Apply(self, *args): return _pyCombBLAS.pyDenseParVecObj2_Apply(self, *args)
    def ApplyMasked(self, *args): return _pyCombBLAS.pyDenseParVecObj2_ApplyMasked(self, *args)
    def ApplyInd(self, *args): return _pyCombBLAS.pyDenseParVecObj2_ApplyInd(self, *args)
    def EWiseApply(self, *args): return _pyCombBLAS.pyDenseParVecObj2_EWiseApply(self, *args)
    def __getitem__(self, *args): return _pyCombBLAS.pyDenseParVecObj2___getitem__(self, *args)
    def __setitem__(self, *args): return _pyCombBLAS.pyDenseParVecObj2___setitem__(self, *args)
    def __repr__(self): return _pyCombBLAS.pyDenseParVecObj2___repr__(self)
    __swig_destroy__ = _pyCombBLAS.delete_pyDenseParVecObj2
    __del__ = lambda self : None;
pyDenseParVecObj2_swigregister = _pyCombBLAS.pyDenseParVecObj2_swigregister
pyDenseParVecObj2_swigregister(pyDenseParVecObj2)

class UnaryFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCombBLAS.delete_UnaryFunction
    __del__ = lambda self : None;
    def __call__(self, *args): return _pyCombBLAS.UnaryFunction___call__(self, *args)
UnaryFunction_swigregister = _pyCombBLAS.UnaryFunction_swigregister
UnaryFunction_swigregister(UnaryFunction)


def set(*args):
  return _pyCombBLAS.set(*args)
set = _pyCombBLAS.set

def identity():
  return _pyCombBLAS.identity()
identity = _pyCombBLAS.identity

def safemultinv():
  return _pyCombBLAS.safemultinv()
safemultinv = _pyCombBLAS.safemultinv

def abs():
  return _pyCombBLAS.abs()
abs = _pyCombBLAS.abs

def negate():
  return _pyCombBLAS.negate()
negate = _pyCombBLAS.negate

def bitwise_not():
  return _pyCombBLAS.bitwise_not()
bitwise_not = _pyCombBLAS.bitwise_not

def logical_not():
  return _pyCombBLAS.logical_not()
logical_not = _pyCombBLAS.logical_not

def totality():
  return _pyCombBLAS.totality()
totality = _pyCombBLAS.totality

def ifthenelse(*args):
  return _pyCombBLAS.ifthenelse(*args)
ifthenelse = _pyCombBLAS.ifthenelse

def unary(*args):
  return _pyCombBLAS.unary(*args)
unary = _pyCombBLAS.unary
class BinaryFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCombBLAS.delete_BinaryFunction
    __del__ = lambda self : None;
    __swig_setmethods__["commutable"] = _pyCombBLAS.BinaryFunction_commutable_set
    __swig_getmethods__["commutable"] = _pyCombBLAS.BinaryFunction_commutable_get
    if _newclass:commutable = _swig_property(_pyCombBLAS.BinaryFunction_commutable_get, _pyCombBLAS.BinaryFunction_commutable_set)
    __swig_setmethods__["associative"] = _pyCombBLAS.BinaryFunction_associative_set
    __swig_getmethods__["associative"] = _pyCombBLAS.BinaryFunction_associative_get
    if _newclass:associative = _swig_property(_pyCombBLAS.BinaryFunction_associative_get, _pyCombBLAS.BinaryFunction_associative_set)
    def __call__(self, *args): return _pyCombBLAS.BinaryFunction___call__(self, *args)
BinaryFunction_swigregister = _pyCombBLAS.BinaryFunction_swigregister
BinaryFunction_swigregister(BinaryFunction)


def plus():
  return _pyCombBLAS.plus()
plus = _pyCombBLAS.plus

def minus():
  return _pyCombBLAS.minus()
minus = _pyCombBLAS.minus

def multiplies():
  return _pyCombBLAS.multiplies()
multiplies = _pyCombBLAS.multiplies

def divides():
  return _pyCombBLAS.divides()
divides = _pyCombBLAS.divides

def modulus():
  return _pyCombBLAS.modulus()
modulus = _pyCombBLAS.modulus

def fmod():
  return _pyCombBLAS.fmod()
fmod = _pyCombBLAS.fmod

def pow():
  return _pyCombBLAS.pow()
pow = _pyCombBLAS.pow

def max():
  return _pyCombBLAS.max()
max = _pyCombBLAS.max

def min():
  return _pyCombBLAS.min()
min = _pyCombBLAS.min

def bitwise_and():
  return _pyCombBLAS.bitwise_and()
bitwise_and = _pyCombBLAS.bitwise_and

def bitwise_or():
  return _pyCombBLAS.bitwise_or()
bitwise_or = _pyCombBLAS.bitwise_or

def bitwise_xor():
  return _pyCombBLAS.bitwise_xor()
bitwise_xor = _pyCombBLAS.bitwise_xor

def logical_and():
  return _pyCombBLAS.logical_and()
logical_and = _pyCombBLAS.logical_and

def logical_or():
  return _pyCombBLAS.logical_or()
logical_or = _pyCombBLAS.logical_or

def logical_xor():
  return _pyCombBLAS.logical_xor()
logical_xor = _pyCombBLAS.logical_xor

def equal_to():
  return _pyCombBLAS.equal_to()
equal_to = _pyCombBLAS.equal_to

def not_equal_to():
  return _pyCombBLAS.not_equal_to()
not_equal_to = _pyCombBLAS.not_equal_to

def greater():
  return _pyCombBLAS.greater()
greater = _pyCombBLAS.greater

def less():
  return _pyCombBLAS.less()
less = _pyCombBLAS.less

def greater_equal():
  return _pyCombBLAS.greater_equal()
greater_equal = _pyCombBLAS.greater_equal

def less_equal():
  return _pyCombBLAS.less_equal()
less_equal = _pyCombBLAS.less_equal

def binary(*args):
  return _pyCombBLAS.binary(*args)
binary = _pyCombBLAS.binary

def binaryPtr(*args):
  return _pyCombBLAS.binaryPtr(*args)
binaryPtr = _pyCombBLAS.binaryPtr

def bind1st(*args):
  return _pyCombBLAS.bind1st(*args)
bind1st = _pyCombBLAS.bind1st

def bind2nd(*args):
  return _pyCombBLAS.bind2nd(*args)
bind2nd = _pyCombBLAS.bind2nd

def compose1(*args):
  return _pyCombBLAS.compose1(*args)
compose1 = _pyCombBLAS.compose1

def compose2(*args):
  return _pyCombBLAS.compose2(*args)
compose2 = _pyCombBLAS.compose2

def not1(*args):
  return _pyCombBLAS.not1(*args)
not1 = _pyCombBLAS.not1

def not2(*args):
  return _pyCombBLAS.not2(*args)
not2 = _pyCombBLAS.not2
class Obj1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Obj1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Obj1, name)
    __swig_setmethods__["weight"] = _pyCombBLAS.Obj1_weight_set
    __swig_getmethods__["weight"] = _pyCombBLAS.Obj1_weight_get
    if _newclass:weight = _swig_property(_pyCombBLAS.Obj1_weight_get, _pyCombBLAS.Obj1_weight_set)
    __swig_setmethods__["category"] = _pyCombBLAS.Obj1_category_set
    __swig_getmethods__["category"] = _pyCombBLAS.Obj1_category_get
    if _newclass:category = _swig_property(_pyCombBLAS.Obj1_category_get, _pyCombBLAS.Obj1_category_set)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_Obj1(*args)
        try: self.this.append(this)
        except: self.this = this
    def __repr__(self): return _pyCombBLAS.Obj1___repr__(self)
    def __eq__(self, *args): return _pyCombBLAS.Obj1___eq__(self, *args)
    def __ne__(self, *args): return _pyCombBLAS.Obj1___ne__(self, *args)
    def __lt__(self, *args): return _pyCombBLAS.Obj1___lt__(self, *args)
    __swig_destroy__ = _pyCombBLAS.delete_Obj1
    __del__ = lambda self : None;
Obj1_swigregister = _pyCombBLAS.Obj1_swigregister
Obj1_swigregister(Obj1)

class Obj2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Obj2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Obj2, name)
    __swig_setmethods__["follower"] = _pyCombBLAS.Obj2_follower_set
    __swig_getmethods__["follower"] = _pyCombBLAS.Obj2_follower_get
    if _newclass:follower = _swig_property(_pyCombBLAS.Obj2_follower_get, _pyCombBLAS.Obj2_follower_set)
    __swig_setmethods__["latest"] = _pyCombBLAS.Obj2_latest_set
    __swig_getmethods__["latest"] = _pyCombBLAS.Obj2_latest_get
    if _newclass:latest = _swig_property(_pyCombBLAS.Obj2_latest_get, _pyCombBLAS.Obj2_latest_set)
    __swig_setmethods__["count"] = _pyCombBLAS.Obj2_count_set
    __swig_getmethods__["count"] = _pyCombBLAS.Obj2_count_get
    if _newclass:count = _swig_property(_pyCombBLAS.Obj2_count_get, _pyCombBLAS.Obj2_count_set)
    def __init__(self, *args): 
        this = _pyCombBLAS.new_Obj2(*args)
        try: self.this.append(this)
        except: self.this = this
    def __repr__(self): return _pyCombBLAS.Obj2___repr__(self)
    def __eq__(self, *args): return _pyCombBLAS.Obj2___eq__(self, *args)
    def __ne__(self, *args): return _pyCombBLAS.Obj2___ne__(self, *args)
    def __lt__(self, *args): return _pyCombBLAS.Obj2___lt__(self, *args)
    __swig_destroy__ = _pyCombBLAS.delete_Obj2
    __del__ = lambda self : None;
Obj2_swigregister = _pyCombBLAS.Obj2_swigregister
Obj2_swigregister(Obj2)

class CallError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyCombBLAS.new_CallError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCombBLAS.delete_CallError
    __del__ = lambda self : None;
CallError_swigregister = _pyCombBLAS.CallError_swigregister
CallError_swigregister(CallError)

class UnaryPredicateObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryPredicateObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryPredicateObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCombBLAS.delete_UnaryPredicateObj
    __del__ = lambda self : None;
UnaryPredicateObj_swigregister = _pyCombBLAS.UnaryPredicateObj_swigregister
UnaryPredicateObj_swigregister(UnaryPredicateObj)

class UnaryFunctionObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunctionObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunctionObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCombBLAS.delete_UnaryFunctionObj
    __del__ = lambda self : None;
UnaryFunctionObj_swigregister = _pyCombBLAS.UnaryFunctionObj_swigregister
UnaryFunctionObj_swigregister(UnaryFunctionObj)


def unaryObj(*args):
  return _pyCombBLAS.unaryObj(*args)
unaryObj = _pyCombBLAS.unaryObj

def unaryObjPred(*args):
  return _pyCombBLAS.unaryObjPred(*args)
unaryObjPred = _pyCombBLAS.unaryObjPred
class BinaryFunctionObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryFunctionObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryFunctionObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCombBLAS.delete_BinaryFunctionObj
    __del__ = lambda self : None;
    def getCallback(self): return _pyCombBLAS.BinaryFunctionObj_getCallback(self)
    __swig_setmethods__["commutable"] = _pyCombBLAS.BinaryFunctionObj_commutable_set
    __swig_getmethods__["commutable"] = _pyCombBLAS.BinaryFunctionObj_commutable_get
    if _newclass:commutable = _swig_property(_pyCombBLAS.BinaryFunctionObj_commutable_get, _pyCombBLAS.BinaryFunctionObj_commutable_set)
    __swig_setmethods__["associative"] = _pyCombBLAS.BinaryFunctionObj_associative_set
    __swig_getmethods__["associative"] = _pyCombBLAS.BinaryFunctionObj_associative_get
    if _newclass:associative = _swig_property(_pyCombBLAS.BinaryFunctionObj_associative_get, _pyCombBLAS.BinaryFunctionObj_associative_set)
    def __call__(self, *args): return _pyCombBLAS.BinaryFunctionObj___call__(self, *args)
    def rettype2nd_call(self, *args): return _pyCombBLAS.BinaryFunctionObj_rettype2nd_call(self, *args)
BinaryFunctionObj_swigregister = _pyCombBLAS.BinaryFunctionObj_swigregister
BinaryFunctionObj_swigregister(BinaryFunctionObj)

class BinaryPredicateObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryPredicateObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryPredicateObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyCombBLAS.delete_BinaryPredicateObj
    __del__ = lambda self : None;
BinaryPredicateObj_swigregister = _pyCombBLAS.BinaryPredicateObj_swigregister
BinaryPredicateObj_swigregister(BinaryPredicateObj)


def binaryObjPred(*args):
  return _pyCombBLAS.binaryObjPred(*args)
binaryObjPred = _pyCombBLAS.binaryObjPred
class SemiringObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemiringObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemiringObj, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyCombBLAS.new_SemiringObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCombBLAS.delete_SemiringObj
    __del__ = lambda self : None;
    def setFilters(self, left_filter_py = None, right_filter_py = None): return _pyCombBLAS.SemiringObj_setFilters(self, left_filter_py, right_filter_py)
    def getAddCallback(self): return _pyCombBLAS.SemiringObj_getAddCallback(self)
    def getMulCallback(self): return _pyCombBLAS.SemiringObj_getMulCallback(self)
    def mpi_op(self): return _pyCombBLAS.SemiringObj_mpi_op(self)
SemiringObj_swigregister = _pyCombBLAS.SemiringObj_swigregister
SemiringObj_swigregister(SemiringObj)

def binaryObj(*args):
  return _pyCombBLAS.binaryObj(*args)
binaryObj = _pyCombBLAS.binaryObj


def TimesPlusSemiringObj():
  return _pyCombBLAS.TimesPlusSemiringObj()
TimesPlusSemiringObj = _pyCombBLAS.TimesPlusSemiringObj

def SecondMaxSemiringObj():
  return _pyCombBLAS.SecondMaxSemiringObj()
SecondMaxSemiringObj = _pyCombBLAS.SecondMaxSemiringObj

def finalize():
  return _pyCombBLAS.finalize()
finalize = _pyCombBLAS.finalize

def root():
  return _pyCombBLAS.root()
root = _pyCombBLAS.root

def _broadcast(*args):
  return _pyCombBLAS._broadcast(*args)
_broadcast = _pyCombBLAS._broadcast

def _barrier():
  return _pyCombBLAS._barrier()
_barrier = _pyCombBLAS._barrier

def _nprocs():
  return _pyCombBLAS._nprocs()
_nprocs = _pyCombBLAS._nprocs

def _rank():
  return _pyCombBLAS._rank()
_rank = _pyCombBLAS._rank

def prnt(*args):
  return _pyCombBLAS.prnt(*args)
prnt = _pyCombBLAS.prnt

def testFunc(*args):
  return _pyCombBLAS.testFunc(*args)
testFunc = _pyCombBLAS.testFunc
class NotFoundError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotFoundError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotFoundError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyCombBLAS.new_NotFoundError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCombBLAS.delete_NotFoundError
    __del__ = lambda self : None;
NotFoundError_swigregister = _pyCombBLAS.NotFoundError_swigregister
NotFoundError_swigregister(NotFoundError)

class EWiseArg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EWiseArg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EWiseArg, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyCombBLAS.new_EWiseArg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyCombBLAS.delete_EWiseArg
    __del__ = lambda self : None;
EWiseArg_swigregister = _pyCombBLAS.EWiseArg_swigregister
EWiseArg_swigregister(EWiseArg)


def EWise_Index():
  return _pyCombBLAS.EWise_Index()
EWise_Index = _pyCombBLAS.EWise_Index

def EWise(*args):
  return _pyCombBLAS.EWise(*args)
EWise = _pyCombBLAS.EWise

def Graph500VectorOps(*args):
  return _pyCombBLAS.Graph500VectorOps(*args)
Graph500VectorOps = _pyCombBLAS.Graph500VectorOps
#import atexit
#atexit.register(finalize)

try:
	import ObjMethods

	ObjMethods.defUserCallbacks((Obj1,Obj2))
except ImportError:
	print "Failed to import ObjMethods!"
	print "----------------------------"
	print ""

# This file is compatible with both classic and new-style classes.


def EWise_OnlyNZ(*args):
  return _pyCombBLAS.EWise_OnlyNZ(*args)
EWise_OnlyNZ = _pyCombBLAS.EWise_OnlyNZ

