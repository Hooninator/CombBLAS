-- Will be using pre-selected starting vertices for large: [8032503, 3187035, 4217991, 10757667, 943598, 2848253, 9322023, 1343828, 3190402, 5937131, 2044637, 1224243, 10690863, 9818564, 9879877, 408150]
--Reading network from /home/aydin/twitter/twitter_from06_to-09.induced.bin.remapped.bin.converted.balanced
Read in 55.244406s. Read 	11295959	 vertices and 	636241873	 edges.
--calculating degrees on original graph
Calculated in 55.250681s.
--Generating starting verts
Generated starting verts in 140.385042s.
--Doing BFS
12464064.000000	: iteration 1.0: start= 8032503, BFS took 	7.205338	s, covered 	73029	 edges, discovered 	45290	 verts, TEPS incl. filtered edges=	8,288,825	, TEPS=	10,135	 
12464064.000000	: iteration 2.0: start= 3187035, BFS took 	0.215362	s, covered 	137	 edges, discovered 	131	 verts, TEPS incl. filtered edges=	267,391	, TEPS=	636	 
12464064.000000	: iteration 3.0: start= 4217991, BFS took 	7.105662	s, covered 	73040	 edges, discovered 	45305	 verts, TEPS incl. filtered edges=	8,405,406	, TEPS=	10,279	 
12464064.000000	: iteration 4.0: start=10757667, BFS took 	7.304385	s, covered 	73031	 edges, discovered 	45296	 verts, TEPS incl. filtered edges=	8,177,206	, TEPS=	9,998	 
12464064.000000	: iteration 5.0: start=  943598, BFS took 	0.464390	s, covered 	297	 edges, discovered 	253	 verts, TEPS incl. filtered edges=	689,073	, TEPS=	639	 
12464064.000000	: iteration 6.0: start= 2848253, BFS took 	7.111019	s, covered 	73053	 edges, discovered 	45312	 verts, TEPS incl. filtered edges=	8,402,022	, TEPS=	10,273	 
12464064.000000	: iteration 7.0: start= 9322023, BFS took 	7.206347	s, covered 	73021	 edges, discovered 	45290	 verts, TEPS incl. filtered edges=	8,287,664	, TEPS=	10,132	 
12464064.000000	: iteration 8.0: start= 1343828, BFS took 	7.054487	s, covered 	73029	 edges, discovered 	45296	 verts, TEPS incl. filtered edges=	8,466,147	, TEPS=	10,352	 
12464064.000000	: iteration 9.0: start= 3190402, BFS took 	7.181568	s, covered 	73078	 edges, discovered 	45332	 verts, TEPS incl. filtered edges=	8,317,115	, TEPS=	10,175	 
12464064.000000	: iteration 10.0: start= 5937131, BFS took 	6.940681	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	8,604,887	, TEPS=	10,520	 
12464064.000000	: iteration 11.0: start= 2044637, BFS took 	7.014553	s, covered 	73071	 edges, discovered 	45322	 verts, TEPS incl. filtered edges=	8,516,939	, TEPS=	10,417	 
12464064.000000	: iteration 12.0: start= 1224243, BFS took 	6.923735	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	8,625,948	, TEPS=	10,546	 
12464064.000000	: iteration 13.0: start=10690863, BFS took 	7.189009	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	8,307,651	, TEPS=	10,157	 
12464064.000000	: iteration 14.0: start= 9818564, BFS took 	7.116535	s, covered 	73086	 edges, discovered 	45337	 verts, TEPS incl. filtered edges=	8,401,364	, TEPS=	10,269	 
12464064.000000	: iteration 15.0: start= 9879877, BFS took 	0.519377	s, covered 	145	 edges, discovered 	122	 verts, TEPS incl. filtered edges=	92,021	, TEPS=	279	 
12464064.000000	: iteration 16.0: start=  408150, BFS took 	0.018577	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	53	, TEPS=	0	 (result discarded)

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	2.15361833572387695e-01
  firstquartile_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	6.92373490333557129e+00
         median_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	7.10566210746765137e+00
  thirdquartile_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	7.18900895118713379e+00
            max_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	7.30438494682312012e+00
           mean_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	5.77016320228576696e+00
         stddev_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	2.78198514810730035e+00
          total_PythonSR_PythonFilter_OTFtime	12464064.000000	: 	8.655245e+01

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	1.37000000000000000e+02
  firstquartile_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	7.30190000000000000e+04
         median_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	7.30290000000000000e+04
  thirdquartile_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	7.30530000000000000e+04
            max_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	7.30860000000000000e+04
           mean_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	5.84715999999999985e+04
         stddev_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	3.01620681860038057e+04
          total_PythonSR_PythonFilter_OTFnedge	12464064.000000	: 	8.770740e+05

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	2.79180637387103047e+02
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	9.99824085555118654e+03
         median_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	1.01757723303538296e+04
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	1.03521347624257305e+04
            max_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	1.05461865625188002e+04
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	1.90209044641912192e+03
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	1.11359498409976823e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	9.20217888502014102e+04
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	8.17720662791437376e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	8.31711539467690326e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	8.46614786941606738e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	8.62594825391531549e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	8.57783130455618957e+05
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	12464064.000000	: 	5.51773787758257822e+04
Total runtime for ppo on 1246406400% is	243.570528	s.

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1246406400	% in	3.092985	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 150.804006s.
--Doing BFS
12464064.000000	: iteration 1.0: start= 8032503, BFS took 	1.109252	s, covered 	73029	 edges, discovered 	45290	 verts, TEPS incl. filtered edges=	53,841,498	, TEPS=	65,836	 
12464064.000000	: iteration 2.0: start= 3187035, BFS took 	0.245225	s, covered 	137	 edges, discovered 	131	 verts, TEPS incl. filtered edges=	234,829	, TEPS=	558	 
12464064.000000	: iteration 3.0: start= 4217991, BFS took 	0.946574	s, covered 	73040	 edges, discovered 	45305	 verts, TEPS incl. filtered edges=	63,097,002	, TEPS=	77,162	 
12464064.000000	: iteration 4.0: start=10757667, BFS took 	1.091109	s, covered 	73031	 edges, discovered 	45296	 verts, TEPS incl. filtered edges=	54,741,988	, TEPS=	66,932	 
12464064.000000	: iteration 5.0: start=  943598, BFS took 	0.494211	s, covered 	297	 edges, discovered 	253	 verts, TEPS incl. filtered edges=	647,494	, TEPS=	600	 
12464064.000000	: iteration 6.0: start= 2848253, BFS took 	1.046632	s, covered 	73053	 edges, discovered 	45312	 verts, TEPS incl. filtered edges=	57,084,955	, TEPS=	69,798	 
12464064.000000	: iteration 7.0: start= 9322023, BFS took 	1.090792	s, covered 	73021	 edges, discovered 	45290	 verts, TEPS incl. filtered edges=	54,752,669	, TEPS=	66,943	 
12464064.000000	: iteration 8.0: start= 1343828, BFS took 	0.945591	s, covered 	73029	 edges, discovered 	45296	 verts, TEPS incl. filtered edges=	63,160,850	, TEPS=	77,231	 
12464064.000000	: iteration 9.0: start= 3190402, BFS took 	0.947822	s, covered 	73078	 edges, discovered 	45332	 verts, TEPS incl. filtered edges=	63,018,096	, TEPS=	77,100	 
12464064.000000	: iteration 10.0: start= 5937131, BFS took 	0.843895	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	70,771,559	, TEPS=	86,526	 
12464064.000000	: iteration 11.0: start= 2044637, BFS took 	0.931218	s, covered 	73071	 edges, discovered 	45322	 verts, TEPS incl. filtered edges=	64,155,257	, TEPS=	78,468	 
12464064.000000	: iteration 12.0: start= 1224243, BFS took 	0.851214	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	70,163,046	, TEPS=	85,782	 
12464064.000000	: iteration 13.0: start=10690863, BFS took 	1.192139	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	50,098,003	, TEPS=	61,250	 
12464064.000000	: iteration 14.0: start= 9818564, BFS took 	1.057012	s, covered 	73086	 edges, discovered 	45337	 verts, TEPS incl. filtered edges=	56,563,796	, TEPS=	69,143	 
12464064.000000	: iteration 15.0: start= 9879877, BFS took 	0.589869	s, covered 	145	 edges, discovered 	122	 verts, TEPS incl. filtered edges=	81,024	, TEPS=	245	 
12464064.000000	: iteration 16.0: start=  408150, BFS took 	0.022031	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	45	, TEPS=	0	 (result discarded)

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	2.45225191116333008e-01
  firstquartile_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	8.43895196914672852e-01
         median_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	9.46573972702026367e-01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	1.09079217910766602e+00
            max_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	1.19213891029357910e+00
           mean_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	8.92170333862304710e-01
         stddev_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	2.60480718866424266e-01
          total_PythonSR_SejitsFilter_OTFtime	12464064.000000	: 	1.338256e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	1.37000000000000000e+02
  firstquartile_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30190000000000000e+04
         median_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30290000000000000e+04
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30530000000000000e+04
            max_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30860000000000000e+04
           mean_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	5.84715999999999985e+04
         stddev_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	3.01620681860038057e+04
          total_PythonSR_SejitsFilter_OTFnedge	12464064.000000	: 	8.770740e+05

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	2.45817282313901273e+02
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	6.12504124892779146e+04
         median_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	6.91439745948339259e+04
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	7.72310672298401187e+04
            max_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	8.65261471649103769e+04
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	1.95133191168145595e+03
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	1.36237543163563970e+02

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	8.10247668338661897e+04
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.00980032480378225e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.65637967174645215e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	6.31608504222590700e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	7.07715593338526040e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	8.17593842612961074e+05
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.77248948087774406e+04
Total runtime for pso on 1246406400% is	184.203431	s.

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1246406400	% in	0.044065	s.
--Generating starting verts

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!

Source code for backend 'c++':
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_57bcccb429bfcd84817426270dd8d33c
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1246406400))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_57bcccb429bfcd84817426270dd8d33c;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 138.756201s.
--Doing BFS
12464064.000000	: iteration 1.0: start= 8032503, BFS took 	1.362910	s, covered 	73029	 edges, discovered 	45290	 verts, TEPS incl. filtered edges=	43,820,786	, TEPS=	53,583	 
12464064.000000	: iteration 2.0: start= 3187035, BFS took 	0.289271	s, covered 	137	 edges, discovered 	131	 verts, TEPS incl. filtered edges=	199,072	, TEPS=	473	 
12464064.000000	: iteration 3.0: start= 4217991, BFS took 	1.079839	s, covered 	73040	 edges, discovered 	45305	 verts, TEPS incl. filtered edges=	55,310,079	, TEPS=	67,639	 
12464064.000000	: iteration 4.0: start=10757667, BFS took 	1.230196	s, covered 	73031	 edges, discovered 	45296	 verts, TEPS incl. filtered edges=	48,552,803	, TEPS=	59,365	 
12464064.000000	: iteration 5.0: start=  943598, BFS took 	0.577165	s, covered 	297	 edges, discovered 	253	 verts, TEPS incl. filtered edges=	554,432	, TEPS=	514	 
12464064.000000	: iteration 6.0: start= 2848253, BFS took 	1.191142	s, covered 	73053	 edges, discovered 	45312	 verts, TEPS incl. filtered edges=	50,159,376	, TEPS=	61,330	 
12464064.000000	: iteration 7.0: start= 9322023, BFS took 	1.230198	s, covered 	73021	 edges, discovered 	45290	 verts, TEPS incl. filtered edges=	48,548,110	, TEPS=	59,357	 
12464064.000000	: iteration 8.0: start= 1343828, BFS took 	1.071548	s, covered 	73029	 edges, discovered 	45296	 verts, TEPS incl. filtered edges=	55,736,496	, TEPS=	68,152	 
12464064.000000	: iteration 9.0: start= 3190402, BFS took 	1.072492	s, covered 	73078	 edges, discovered 	45332	 verts, TEPS incl. filtered edges=	55,692,650	, TEPS=	68,138	 
12464064.000000	: iteration 10.0: start= 5937131, BFS took 	0.950544	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	62,831,148	, TEPS=	76,818	 
12464064.000000	: iteration 11.0: start= 2044637, BFS took 	1.048029	s, covered 	73071	 edges, discovered 	45322	 verts, TEPS incl. filtered edges=	57,004,638	, TEPS=	69,722	 
12464064.000000	: iteration 12.0: start= 1224243, BFS took 	0.956459	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	62,442,604	, TEPS=	76,343	 
12464064.000000	: iteration 13.0: start=10690863, BFS took 	1.351861	s, covered 	73019	 edges, discovered 	45289	 verts, TEPS incl. filtered edges=	44,178,934	, TEPS=	54,013	 
12464064.000000	: iteration 14.0: start= 9818564, BFS took 	1.235652	s, covered 	73086	 edges, discovered 	45337	 verts, TEPS incl. filtered edges=	48,386,280	, TEPS=	59,147	 
12464064.000000	: iteration 15.0: start= 9879877, BFS took 	0.656915	s, covered 	145	 edges, discovered 	122	 verts, TEPS incl. filtered edges=	72,755	, TEPS=	220	 
12464064.000000	: iteration 16.0: start=  408150, BFS took 	0.025632	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	39	, TEPS=	0	 (result discarded)

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	2.89271116256713867e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	9.50544118881225586e-01
         median_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	1.07249212265014648e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	1.23019790649414062e+00
            max_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	1.36291003227233887e+00
           mean_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	1.02028141021728525e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	3.01474670820812307e-01
          total_SejitsSR_SejitsFilter_OTFtime	12464064.000000	: 	1.530422e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	1.37000000000000000e+02
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30190000000000000e+04
         median_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30290000000000000e+04
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30530000000000000e+04
            max_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	7.30860000000000000e+04
           mean_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	5.84715999999999985e+04
         stddev_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	3.01620681860038057e+04
          total_SejitsSR_SejitsFilter_OTFnedge	12464064.000000	: 	8.770740e+05

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	2.20728726189987952e+02
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.35831406848190454e+04
         median_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.93653369468988822e+04
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	6.81528041833411262e+04
            max_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	7.68181071762793435e+04
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	1.70961509487825924e+03
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	1.19397641794870765e+02

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	7.27552326863743801e+04
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	4.38207861016506925e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	4.85528038145856336e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.57364960148878694e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	6.28311488269412294e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	7.21072246607771725e+05
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	12464064.000000	: 	5.09140692303493779e+04
Total runtime for sso on 1246406400% is	171.027651	s.
Total runtime for everything is		725.101089
