graph_generation:               0.904942 s
Generated renamed edge lists
Generation took 0.905387 seconds
Warning: Using smaller indices for the matrix than DistEdgeList
Local matrices are 1048576-by-1048576
Duplicates removed (or summed): 416598 and self-loops removed: 0
Created Sparse Matrix (with int32 local indices and values)
Calculated degrees in 0.0519769 seconds
Converted to Boolean and removed 275 loops
As a whole: 4194304 rows and 4194304 columns and 20554647 nonzeros
Reductions done
Intersection of colsums and rowsums found
Found (and permuted) non-isolated vertices
As a whole: 4194304 rows and 4194304 columns and 20554647 nonzeros
Dropped isolated vertices from input
As a whole: 1751377 rows and 1751377 columns and 20554647 nonzeros
Symmetricized
As a whole: 1751377 rows and 1751377 columns and 41109294 nonzeros
Generated Erdos-Renyi graph in 4.071111s: 	1751377	 vertices and 	41109294	 edges.
Converted in 26.290860s. GER has 1751377 vertices and 41109294 edges.
Symmetricized randoms in 16.746792s. GER has 1751377 vertices and 41109294 edges.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	0.042289	s.
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.227185	MIS size is	1683188	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220266	MIS size is	1683309	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220561	MIS size is	1683137	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220516	MIS size is	1683317	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220821	MIS size is	1683315	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.221377	MIS size is	1683210	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.219188	MIS size is	1683113	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220068	MIS size is	1683253	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.218933	MIS size is	1683015	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.222232	MIS size is	1683071	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.223344	MIS size is	1683207	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.222646	MIS size is	1683127	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220955	MIS size is	1683212	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.222277	MIS size is	1683331	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.221561	MIS size is	1683063	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.220734	MIS size is	1683325	verification succeeded

            min_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	2.18932867050170898e-01
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	2.20328390598297119e-01
         median_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	2.20887899398803711e-01
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	2.22265720367431641e-01
            max_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	2.27185010910034180e-01
           mean_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	2.21416443586349487e-01
         stddev_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	1.94565911765851160e-03
          total_SejitsSR_SejitsFilter_ER_OTF_22time	1.000000	: 	3.542663e+00

            min_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68301500000000000e+06
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68311650000000000e+06
         median_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68320850000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68331350000000000e+06
            max_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68333100000000000e+06
           mean_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68319956250000000e+06
         stddev_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.03706617435918716e+02
          total_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	2.693119e+07

Total runtime for sso2 on SejitsSR_SejitsFilter_ER_OTF_22 1% is	11.644074	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	1.061507	s.
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.669955	MIS size is	1683377	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.668242	MIS size is	1683305	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.668982	MIS size is	1683004	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.666990	MIS size is	1683092	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.664515	MIS size is	1683337	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.665797	MIS size is	1683064	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.668486	MIS size is	1683138	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.666332	MIS size is	1683470	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.627289	MIS size is	1683298	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.666040	MIS size is	1682978	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.668577	MIS size is	1683493	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.667410	MIS size is	1683519	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.669582	MIS size is	1683289	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.669484	MIS size is	1682947	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.666307	MIS size is	1683156	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.667291	MIS size is	1683287	verification succeeded

            min_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	6.27289056777954102e-01
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	6.66106700897216797e-01
         median_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	6.67350530624389648e-01
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	6.68880760669708252e-01
            max_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	6.69955015182495117e-01
           mean_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	6.65079921483993530e-01
         stddev_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	1.01961719943856697e-02
          total_PythonSR_SejitsFilter_ER_OTF_22time	1.000000	: 	1.064128e+01

            min_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68294700000000000e+06
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68307100000000000e+06
         median_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68328800000000000e+06
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68336700000000000e+06
            max_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68351900000000000e+06
           mean_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.68323462500000000e+06
         stddev_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	1.85327412974983275e+02
          total_PythonSR_SejitsFilter_ER_OTF_22_MISverts	1.000000	: 	2.693175e+07

Total runtime for pso2 on PythonSR_SejitsFilter_ER_OTF_22 1% is	26.914001	s.
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.691467	MIS size is	1683309	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.211669	MIS size is	1683281	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.751964	MIS size is	1683311	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.695317	MIS size is	1683330	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.699921	MIS size is	1683279	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.667756	MIS size is	1683109	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.709440	MIS size is	1683171	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.731664	MIS size is	1683401	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.683571	MIS size is	1683203	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.685093	MIS size is	1683229	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.700770	MIS size is	1683053	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.808177	MIS size is	1683394	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.679158	MIS size is	1683319	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.727694	MIS size is	1683310	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.744652	MIS size is	1683415	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.687593	MIS size is	1683230	verification succeeded

            min_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	9.66775608062744141e+00
  firstquartile_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	9.68571811914443970e+00
         median_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	9.70034563541412354e+00
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	9.74140489101409912e+00
            max_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	1.02116689682006836e+01
           mean_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	9.74224415421485901e+00
         stddev_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	1.30057039533078511e-01
          total_PythonSR_PythonFilter_ER_OTF_22time	1.000000	: 	1.558759e+02

            min_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.68305300000000000e+06
  firstquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.68320950000000000e+06
         median_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.68329500000000000e+06
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.68332725000000000e+06
            max_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.68341500000000000e+06
           mean_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.68327150000000000e+06
         stddev_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	1.01689724161293697e+02
          total_PythonSR_PythonFilter_ER_OTF_22_MISverts	1.000000	: 	2.693234e+07

Total runtime for ppo2 on PythonSR_PythonFilter_ER_OTF_22 1% is	202.499905	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	0.032056	s.
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.441048	MIS size is	1531540	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.436337	MIS size is	1531609	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.436172	MIS size is	1531304	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.671162	MIS size is	1531768	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.735819	MIS size is	1531410	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.713374	MIS size is	1531638	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.712929	MIS size is	1531111	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.703145	MIS size is	1531483	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.707348	MIS size is	1531712	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.722199	MIS size is	1531286	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.721294	MIS size is	1531820	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.711110	MIS size is	1531881	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.631786	MIS size is	1531650	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.647576	MIS size is	1531947	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.634159	MIS size is	1531598	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.631904	MIS size is	1531750	verification succeeded

            min_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	4.36172008514404297e-01
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	6.31815552711486816e-01
         median_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	6.87153577804565430e-01
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	7.13262856006622314e-01
            max_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	7.35819101333618164e-01
           mean_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	6.41085147857666016e-01
         stddev_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.06649571504818061e-01
          total_SejitsSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.025736e+01

            min_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53111100000000000e+06
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53142825000000000e+06
         median_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53162350000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53176350000000000e+06
            max_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53194700000000000e+06
           mean_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53159418750000000e+06
         stddev_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	2.29963538776621419e+02
          total_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	2.450551e+07

Total runtime for sso2 on SejitsSR_SejitsFilter_ER_OTF_22 10% is	12.357373	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	1.064248	s.
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.345087	MIS size is	1531160	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.374273	MIS size is	1532036	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.368214	MIS size is	1530874	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.337226	MIS size is	1531483	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.337361	MIS size is	1531468	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.338165	MIS size is	1531349	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.336862	MIS size is	1531486	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.375503	MIS size is	1531605	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.339451	MIS size is	1531189	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.340275	MIS size is	1531065	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.335688	MIS size is	1531446	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.338713	MIS size is	1531120	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.344230	MIS size is	1531381	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.377186	MIS size is	1531329	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.376077	MIS size is	1530995	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.340728	MIS size is	1531857	verification succeeded

            min_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.33568787574768066e+00
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.33756208419799805e+00
         median_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.34050154685974121e+00
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.37275826930999756e+00
            max_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.37718605995178223e+00
           mean_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.35031497478485107e+00
         stddev_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	1.69428844152565428e-02
          total_PythonSR_SejitsFilter_ER_OTF_22time	10.000000	: 	2.160504e+01

            min_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53087400000000000e+06
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53113000000000000e+06
         median_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53136500000000000e+06
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53148525000000000e+06
            max_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53203600000000000e+06
           mean_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	1.53136518750000000e+06
         stddev_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	3.05336365068645819e+02
          total_PythonSR_SejitsFilter_ER_OTF_22_MISverts	10.000000	: 	2.450184e+07

Total runtime for pso2 on PythonSR_SejitsFilter_ER_OTF_22 10% is	38.204952	s.
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.546229	MIS size is	1530901	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.565523	MIS size is	1531742	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.554781	MIS size is	1531209	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.534662	MIS size is	1531598	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.596436	MIS size is	1531826	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.624895	MIS size is	1531549	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.550738	MIS size is	1531901	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.615891	MIS size is	1531136	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.584678	MIS size is	1531233	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.578749	MIS size is	1531837	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.539839	MIS size is	1531748	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.502370	MIS size is	1531705	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.587864	MIS size is	1531683	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.551189	MIS size is	1530983	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.586483	MIS size is	1531175	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	9.582886	MIS size is	1531733	verification succeeded

            min_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	9.50236988067626953e+00
  firstquartile_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	9.54735630750656128e+00
         median_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	9.57213592529296875e+00
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	9.58751869201660156e+00
            max_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	9.62489509582519531e+00
           mean_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	9.56895081698894501e+00
         stddev_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	3.17526435582670338e-02
          total_PythonSR_PythonFilter_ER_OTF_22time	10.000000	: 	1.531032e+02

            min_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	1.53090100000000000e+06
  firstquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	1.53118350000000000e+06
         median_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	1.53164050000000000e+06
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	1.53174650000000000e+06
            max_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	1.53190100000000000e+06
           mean_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	1.53149743750000000e+06
         stddev_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	3.32926211794745882e+02
          total_PythonSR_PythonFilter_ER_OTF_22_MISverts	10.000000	: 	2.450396e+07

Total runtime for ppo2 on PythonSR_PythonFilter_ER_OTF_22 10% is	178.247513	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	0.037117	s.
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.731301	MIS size is	1432047	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.716365	MIS size is	1430869	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.727393	MIS size is	1431555	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.727794	MIS size is	1431131	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.726610	MIS size is	1430914	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.716758	MIS size is	1432224	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.714126	MIS size is	1431333	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.728290	MIS size is	1431027	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.726366	MIS size is	1431780	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.716254	MIS size is	1431730	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.724429	MIS size is	1430797	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.728032	MIS size is	1430597	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.717507	MIS size is	1430653	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.720190	MIS size is	1430884	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.713173	MIS size is	1431151	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	0.727317	MIS size is	1430746	verification succeeded

            min_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	7.13172912597656250e-01
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	7.16463148593902588e-01
         median_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	7.25397467613220215e-01
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	7.27693915367126465e-01
            max_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	7.31301069259643555e-01
           mean_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	7.22619056701660156e-01
         stddev_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	6.05032398084810134e-03
          total_SejitsSR_SejitsFilter_ER_OTF_22time	25.000000	: 	1.156190e+01

            min_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43059700000000000e+06
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43081500000000000e+06
         median_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43107900000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43168625000000000e+06
            max_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43222400000000000e+06
           mean_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43121487500000000e+06
         stddev_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	5.08796341050784974e+02
          total_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	2.289944e+07

Total runtime for sso2 on SejitsSR_SejitsFilter_ER_OTF_22 25% is	15.453772	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	7.059946	s.
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.427739	MIS size is	1431654	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.412586	MIS size is	1431565	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.373120	MIS size is	1430509	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.420611	MIS size is	1431865	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.378113	MIS size is	1431436	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.422067	MIS size is	1431327	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.386957	MIS size is	1431034	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.415454	MIS size is	1431331	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.377177	MIS size is	1430724	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.413003	MIS size is	1431535	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.389840	MIS size is	1432263	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.369520	MIS size is	1430718	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.375217	MIS size is	1431433	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.543545	MIS size is	1430293	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.704083	MIS size is	1430872	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	2.677791	MIS size is	1430711	verification succeeded

            min_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	2.36952018737792969e+00
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	2.37741094827651978e+00
         median_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	2.41279447078704834e+00
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	2.42632114887237549e+00
            max_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	2.70408320426940918e+00
           mean_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	2.44292643666267395e+00
         stddev_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	1.05370220002334550e-01
          total_PythonSR_SejitsFilter_ER_OTF_22time	25.000000	: 	3.908682e+01

            min_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43029300000000000e+06
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43071950000000000e+06
         median_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43132900000000000e+06
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43155750000000000e+06
            max_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43226300000000000e+06
           mean_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	1.43120437500000000e+06
         stddev_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	5.35413843053514370e+02
          total_PythonSR_SejitsFilter_ER_OTF_22_MISverts	25.000000	: 	2.289927e+07

Total runtime for pso2 on PythonSR_SejitsFilter_ER_OTF_22 25% is	56.012693	s.
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	11.478113	MIS size is	1431203	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	11.898387	MIS size is	1430932	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	11.176901	MIS size is	1431459	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.469800	MIS size is	1431470	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.463924	MIS size is	1430915	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.525126	MIS size is	1430710	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.564445	MIS size is	1432515	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.510696	MIS size is	1431421	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.515955	MIS size is	1431209	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.444005	MIS size is	1430692	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.508311	MIS size is	1431665	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.517545	MIS size is	1431339	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.477299	MIS size is	1431193	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.494316	MIS size is	1431579	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.463443	MIS size is	1430644	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	10.437902	MIS size is	1430334	verification succeeded

            min_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.04379019737243652e+01
  firstquartile_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.04653929471969604e+01
         median_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.05095034837722778e+01
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.05546152591705322e+01
            max_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.18983869552612305e+01
           mean_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.06841354966163635e+01
         stddev_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	4.35469953152649858e-01
          total_PythonSR_PythonFilter_ER_OTF_22time	25.000000	: 	1.709462e+02

            min_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	1.43033400000000000e+06
  firstquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	1.43076125000000000e+06
         median_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	1.43120600000000000e+06
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	1.43146725000000000e+06
            max_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	1.43251500000000000e+06
           mean_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	1.43120500000000000e+06
         stddev_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	5.16867358871371039e+02
          total_PythonSR_PythonFilter_ER_OTF_22_MISverts	25.000000	: 	2.289928e+07

Total runtime for ppo2 on PythonSR_PythonFilter_ER_OTF_22 25% is	190.737007	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db
{
  double myfunc(const double &v)
  {
    return _random();
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryFunctionObj *");

              UnaryFunctionObj_SEJITS* retf = new UnaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_double_double = &myfunc;
                              
              UnaryFunctionObj* retO = new UnaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_87378a19d0440c3cbf7b552b078ed3db;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	0.062597	s.
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryFunctionObj_Python()!!!
UnaryFunctionObj_SEJITS()!!!
UnaryFunctionObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2
{
  double myfunc(const double &x, const double &y)
  {
    return 1;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f8e76f3fd91b5b952a96bd31fa1716e2;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50
{
  bool myfunc(const double &x, const double &y)
  {
    return y < x;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_c6f7b50c5beff560b3e498e31a48de50;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f
{
  double myfunc(const double &x, const double &y)
  {
    if (x < y)
      return x;
    else
      return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_13b224f0334c8e63c8dc6232fb7fc53f;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.842641	MIS size is	1227669	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.821446	MIS size is	1227855	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.828430	MIS size is	1228624	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.824652	MIS size is	1228203	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.824487	MIS size is	1227790	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.826632	MIS size is	1228156	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.830403	MIS size is	1228657	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.826244	MIS size is	1228399	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.828426	MIS size is	1229136	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.824813	MIS size is	1228443	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.825117	MIS size is	1228637	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.828467	MIS size is	1228780	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.823102	MIS size is	1227528	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.824790	MIS size is	1227372	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.824787	MIS size is	1228114	verification succeeded
SejitsSR_SejitsFilter_ER_OTF_22	16	 procs time:	1.826957	MIS size is	1228566	verification succeeded

            min_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.82144594192504883e+00
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.82468575239181519e+00
         median_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.82568049430847168e+00
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.82842898368835449e+00
            max_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.84264111518859863e+00
           mean_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.82696214318275452e+00
         stddev_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	4.75479411904691091e-03
          total_SejitsSR_SejitsFilter_ER_OTF_22time	100.000000	: 	2.923139e+01

            min_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22737200000000000e+06
  firstquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22780625000000000e+06
         median_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22830100000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22863375000000000e+06
            max_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22913600000000000e+06
           mean_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22824556250000000e+06
         stddev_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	4.97130159850851669e+02
          total_SejitsSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.965193e+07

Total runtime for sso2 on SejitsSR_SejitsFilter_ER_OTF_22 100% is	45.943730	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2a#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
e6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	3.059538	s.
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.310442	MIS size is	1229127	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.288561	MIS size is	1228365	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.319483	MIS size is	1227908	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.268977	MIS size is	1228066	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.306985	MIS size is	1228271	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.299558	MIS size is	1229165	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.277878	MIS size is	1227055	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.309795	MIS size is	1228043	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.313850	MIS size is	1229509	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.239093	MIS size is	1228251	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.443082	MIS size is	1229335	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.499778	MIS size is	1228782	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.399452	MIS size is	1228019	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.299950	MIS size is	1226884	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.267150	MIS size is	1228070	verification succeeded
PythonSR_SejitsFilter_ER_OTF_22	16	 procs time:	7.323765	MIS size is	1228108	verification succeeded

            min_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	7.23909306526184082e+00
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	7.28054881095886230e+00
         median_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	7.30838990211486816e+00
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	7.32269454002380371e+00
            max_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	7.49977803230285645e+00
           mean_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	7.32298746705055237e+00
         stddev_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	6.81083676786146258e-02
          total_PythonSR_SejitsFilter_ER_OTF_22time	100.000000	: 	1.171678e+02

            min_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22688400000000000e+06
  firstquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22802500000000000e+06
         median_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22817950000000000e+06
  thirdquartile_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22904075000000000e+06
            max_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22950900000000000e+06
           mean_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.22830987500000000e+06
         stddev_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	7.39439686519461929e+02
          total_PythonSR_SejitsFilter_ER_OTF_22_MISverts	100.000000	: 	1.965296e+07

Total runtime for pso2 on PythonSR_SejitsFilter_ER_OTF_22 100% is	134.931032	s.
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.711387	MIS size is	1228617	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.644374	MIS size is	1227594	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.688944	MIS size is	1228367	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.678333	MIS size is	1228418	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.657354	MIS size is	1227721	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.690627	MIS size is	1228182	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.735239	MIS size is	1228389	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.628330	MIS size is	1227542	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.710060	MIS size is	1228388	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.640902	MIS size is	1228260	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.726871	MIS size is	1228584	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.670960	MIS size is	1228024	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.675096	MIS size is	1228274	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.696764	MIS size is	1228215	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.664629	MIS size is	1228611	verification succeeded
PythonSR_PythonFilter_ER_OTF_22	16	 procs time:	15.656471	MIS size is	1227628	verification succeeded

            min_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	1.56283302307128906e+01
  firstquartile_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	1.56566917300224304e+01
         median_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	1.56767144203186035e+01
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	1.57067359089851379e+01
            max_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	1.57352390289306641e+01
           mean_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	1.56797713041305542e+01
         stddev_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	3.10795023242126413e-02
          total_PythonSR_PythonFilter_ER_OTF_22time	100.000000	: 	2.508763e+02

            min_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.22754200000000000e+06
  firstquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.22779675000000000e+06
         median_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.22826700000000000e+06
  thirdquartile_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.22841075000000000e+06
            max_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.22861700000000000e+06
           mean_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.22817587500000000e+06
         stddev_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	3.67410556008760693e+02
          total_PythonSR_PythonFilter_ER_OTF_22_MISverts	100.000000	: 	1.965081e+07

Total runtime for ppo2 on PythonSR_PythonFilter_ER_OTF_22 100% is	264.384467	s.
Total runtime for everything is 1262.168653
