--Generating a plain RMAT graph of scale 22
graph_generation:               11.397484 s
Generated renamed edge lists
Generation took 11.3977 seconds
Warning: Using smaller indices for the matrix than DistEdgeList
Local matrices are 2097152-by-2097152
Duplicates removed (or summed): 2953347 and self-loops removed: 0
Created Sparse Matrix (with int32 local indices and values)
Calculated degrees in 0.225194 seconds
Converted to Boolean and removed 675 loops
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Reductions done
Intersection of colsums and rowsums found
Found (and permuted) non-isolated vertices
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Dropped isolated vertices from input
As a whole: 2396784 rows and 2396784 columns and 64154842 nonzeros
Symmetricized
As a whole: 2396784 rows and 2396784 columns and 128309684 nonzeros
Generated graph in 43.228278s: 	2396784	 vertices and 	128309684	 edges.
--Converting binary RMAT to twitter object
Converted in 366.828100s. G has 2396784 vertices and 128309684 edges.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--calculating degrees on original graph
Calculated in 43.511525s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	2.074238	s.
--Generating starting verts
Generated starting verts in 136.323991s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.802228	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	129,456,287	, TEPS=	1,290,761	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.013064	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	76	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.011630	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,751	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.012163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,713	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.010758	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.011024	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.011748	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	340	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.012161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	246	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.807067	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	128,680,066	, TEPS=	1,283,022	 
1.000000	: iteration 10: start=  565854, BFS took 	0.012394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	887	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.805131	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	128,989,518	, TEPS=	1,286,107	 
1.000000	: iteration 12: start=  950518, BFS took 	0.013273	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,862	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.011661	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.012194	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.012471	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.011165	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,686	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.012746	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.012403	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.010352	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,062	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.011422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	350	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.012341	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	729	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.011941	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.010705	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	467	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.010313	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	290	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.011059	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	542	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.012701	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.011841	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	928	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.011187	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.797553	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	130,215,104	, TEPS=	1,298,327	 
1.000000	: iteration 30: start= 1280874, BFS took 	0.010932	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,744	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.011003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.012004	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,166	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.013197	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	75	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.012684	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.010653	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.012883	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	698	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.010859	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	276	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.011843	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,177	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.011394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	263	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.011345	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.011271	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,759	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.010992	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	272	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.012059	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.011218	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,158	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.012162	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.010637	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	940	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.011136	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.010201	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	294	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.806347	s, covered 	1035488	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	128,795,405	, TEPS=	1,284,171	 
1.000000	: iteration 50: start= 2073266, BFS took 	0.012567	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	159	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.012219	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,145	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.011690	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,908	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.011231	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,068	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.011415	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	438	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.010541	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.011961	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.807366	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	128,632,419	, TEPS=	1,282,548	 
1.000000	: iteration 58: start=  141993, BFS took 	0.011185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	268	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.012248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,204	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.010882	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,378	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.010729	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.010505	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	761	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.798025	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	130,138,075	, TEPS=	1,297,559	 
1.000000	: iteration 64: start= 1609809, BFS took 	0.011175	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	715	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.012258	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	326	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.013261	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	301	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.010437	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	862	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.011395	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	263	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.010992	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,001	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.011965	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.011840	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.010889	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.010950	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.011338	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	352	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.011473	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	87	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.012639	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	79	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.010480	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.010455	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	860	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.011349	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	264	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.010566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.012339	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,593	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.010539	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,795	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.011136	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	179	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.012094	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,157	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.011947	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,013	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.012408	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.011335	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	264	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.011305	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	176	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.010732	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.010595	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,265	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.813550	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	127,654,706	, TEPS=	1,272,799	 
1.000000	: iteration 92: start= 1124663, BFS took 	0.013821	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	506	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.012464	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,727	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.800748	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	129,695,535	, TEPS=	1,293,146	 
1.000000	: iteration 95: start=  703729, BFS took 	0.805850	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	128,874,419	, TEPS=	1,284,959	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.012606	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,348	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.805616	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	128,911,873	, TEPS=	1,285,333	 
1.000000	: iteration 98: start=  286392, BFS took 	0.011678	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.020100	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	4,975	, TEPS=	49	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.010543	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	284	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.010495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	381	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.010636	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	282	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.010926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,111	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.809506	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	128,292,394	, TEPS=	1,279,156	 
1.000000	: iteration 105: start=  507226, BFS took 	0.012314	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.011988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,591	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.012023	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,578	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.011956	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.012404	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	644	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.010627	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.010449	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	191	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.810264	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	128,172,424	, TEPS=	1,277,961	 
1.000000	: iteration 113: start= 1376035, BFS took 	0.010947	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,192	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.010785	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.812369	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	127,840,242	, TEPS=	1,274,649	 
1.000000	: iteration 116: start= 2292609, BFS took 	0.012841	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.010824	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,771	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.804672	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	129,063,104	, TEPS=	1,286,842	 
1.000000	: iteration 119: start= 1677169, BFS took 	0.011711	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	256	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.030980	s, covered 	3	 edges, discovered 	4	 verts, TEPS incl. filtered edges=	18,786	, TEPS=	96	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.010974	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	729	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.010274	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	97	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.012794	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	390	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.012185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.010711	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,026	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.012758	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 127: start=  992698, BFS took 	0.012615	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,506	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.816248	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	127,232,694	, TEPS=	1,268,590	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	7.97553062438964844e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	8.02838981151580811e-01
         median_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	8.06098461151123047e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	8.10074388980865479e-01
            max_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	8.16248178482055664e-01
           mean_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	8.06408777832984924e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	5.24700476643826397e-03
          total_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	1.290254e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
         median_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548600000000000e+06
            max_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548800000000000e+06
           mean_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548550000000000e+06
         stddev_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	8.16496580927726034e-01
          total_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.656777e+07

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.26859088607787201e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.27826028566431161e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.28456590329075418e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.28978172497605742e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.29832740762529965e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.28407022555162222e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	9.40041415006002694e+02

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.27232694341973484e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.28202416916073307e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.28834912631599933e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.29357991597535610e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.30215104036350816e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.28785156185239211e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	9.42829987376102654e+04
Total runtime for sso on 1% is	263.096734	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	3.073114	s.
--Generating starting verts
Generated starting verts in 136.286124s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.897441	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	115,721,774	, TEPS=	1,153,819	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.013987	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	71	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.011561	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,767	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.012768	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,584	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.010825	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.011087	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	180	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.011928	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	335	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.012642	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	237	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.897626	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	115,697,923	, TEPS=	1,153,581	 
1.000000	: iteration 10: start=  565854, BFS took 	0.011855	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	927	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.894397	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	116,115,609	, TEPS=	1,157,746	 
1.000000	: iteration 12: start=  950518, BFS took 	0.012883	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,949	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.011180	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.012430	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.012123	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.011250	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,666	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.012108	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.012141	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.010422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,055	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.012659	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	315	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.011973	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	751	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.011798	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	254	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.011317	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	441	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.010386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	288	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.011197	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	535	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.012452	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	401	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.012264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	896	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.011276	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.889798	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	116,715,744	, TEPS=	1,163,730	 
1.000000	: iteration 30: start= 1280874, BFS took 	0.011391	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,633	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.011214	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.012057	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,161	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.012694	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.012203	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.010646	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.012245	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	734	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.010838	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	276	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.012608	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,741	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.011322	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	264	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.011618	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.011572	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,505	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.011523	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	260	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.012440	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.011445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,135	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.011691	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.010547	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	948	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.011063	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.010378	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	289	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.893501	s, covered 	1035488	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	116,232,435	, TEPS=	1,158,911	 
1.000000	: iteration 50: start= 2073266, BFS took 	0.012927	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	154	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.012273	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,140	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.012234	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,779	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.011115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,079	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.011916	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	419	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.010576	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.011267	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.893549	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	116,225,786	, TEPS=	1,158,846	 
1.000000	: iteration 58: start=  141993, BFS took 	0.011337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	264	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.012732	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,120	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.011043	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,358	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.010957	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	182	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.010736	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	745	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.890119	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	116,673,665	, TEPS=	1,163,310	 
1.000000	: iteration 64: start= 1609809, BFS took 	0.011468	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	697	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.012248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	326	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.012496	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	320	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.010469	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	859	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.011171	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	268	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.011116	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,979	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.011774	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	254	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.011518	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.010771	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.011533	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.011542	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	346	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.011977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.012433	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.010415	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	96	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.010524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	855	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.011518	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	260	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.010810	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.012915	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,477	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.010931	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,659	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.011618	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.012096	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,157	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.011857	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,036	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.012322	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.011584	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	258	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.011292	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.010654	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	187	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.010560	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,272	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.903065	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	115,001,123	, TEPS=	1,146,635	 
1.000000	: iteration 92: start= 1124663, BFS took 	0.013026	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	537	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.012453	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,730	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.893085	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	116,286,192	, TEPS=	1,159,447	 
1.000000	: iteration 95: start=  703729, BFS took 	0.890861	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	116,576,524	, TEPS=	1,162,342	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.013021	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,305	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.890636	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	116,605,952	, TEPS=	1,162,635	 
1.000000	: iteration 98: start=  286392, BFS took 	0.011480	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	174	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.018319	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	5,458	, TEPS=	54	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.010792	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	277	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.010512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	380	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.010650	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	281	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.011075	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,069	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.896492	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	115,844,262	, TEPS=	1,155,040	 
1.000000	: iteration 105: start=  507226, BFS took 	0.011808	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.012720	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,097	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.011831	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,620	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.011553	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	259	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.012393	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	645	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.010816	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.010524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	190	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.895553	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	115,965,777	, TEPS=	1,156,253	 
1.000000	: iteration 113: start= 1376035, BFS took 	0.011559	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,076	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.011017	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.895309	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	115,997,345	, TEPS=	1,156,568	 
1.000000	: iteration 116: start= 2292609, BFS took 	0.013217	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	75	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.010815	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,773	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.893199	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	116,271,369	, TEPS=	1,159,300	 
1.000000	: iteration 119: start= 1677169, BFS took 	0.012224	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.029575	s, covered 	3	 edges, discovered 	4	 verts, TEPS incl. filtered edges=	19,678	, TEPS=	101	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.010619	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	753	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.010811	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.012789	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	390	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.012639	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	79	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.011366	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	967	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.012956	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
1.000000	: iteration 127: start=  992698, BFS took 	0.012303	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,544	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.903787	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	114,909,198	, TEPS=	1,145,717	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	1.000000	: 	8.89798164367675781e-01
  firstquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	8.91416847705841064e-01
         median_C++SR_SejitsFilter_OTFtime	1.000000	: 	8.93973112106323242e-01
  thirdquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	8.97203683853149414e-01
            max_C++SR_SejitsFilter_OTFtime	1.000000	: 	9.03787136077880859e-01
           mean_C++SR_SejitsFilter_OTFtime	1.000000	: 	8.94901111721992493e-01
         stddev_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.13335153806519955e-03
          total_C++SR_SejitsFilter_OTFtime	1.000000	: 	1.431842e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  firstquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
         median_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  thirdquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03548600000000000e+06
            max_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03548800000000000e+06
           mean_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03548550000000000e+06
         stddev_C++SR_SejitsFilter_OTFnedge	1.000000	: 	8.16496580927726034e-01
          total_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.656777e+07

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.14571778980351682e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.15412501745721931e+06
         median_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.15829628323756950e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.16161839424811723e+06
            max_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.16373020474351593e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.15709488632142707e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.39832358853060782e+02

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.14909198033828586e+08
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.15752396765638843e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.16170697917091116e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.16503941277970314e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.16715744265220180e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	1.16050230579447374e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.41145949211511834e+04
Total runtime for cso on 1% is	264.777405	s.
--Materializing the filter
Materialized 1.000000 in	221.992061	s.
1.000000	: 	1278277	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 1278277 elements.
1 filter(s) remove 127031407 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 0.823106s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.201639	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,135,342	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.003394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.003647	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.002906	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.003094	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.002789	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.002851	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.002980	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.200015	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,177,034	 
1.000000	: iteration 10: start=  565854, BFS took 	0.003000	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.198978	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,204,012	 
1.000000	: iteration 12: start=  950518, BFS took 	0.003161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.002747	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.002855	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.002830	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.003040	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.002889	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.002829	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.003544	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.002941	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.002883	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.002837	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.002857	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.002685	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.002753	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.002880	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.002905	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.002718	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.198186	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,224,809	 
1.000000	: iteration 30: start= 1280874, BFS took 	0.003098	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.002785	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.002877	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.002903	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.002868	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.002717	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.002893	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.002764	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.002819	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.002777	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.002858	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.002765	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.002728	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.002922	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.002835	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.002987	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.002775	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.002847	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.002707	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.198626	s, covered 	1035488	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,213,253	 
1.000000	: iteration 50: start= 2073266, BFS took 	0.002971	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.002875	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.002770	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.002798	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.002810	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.002737	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.002930	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.199036	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,202,509	 
1.000000	: iteration 58: start=  141993, BFS took 	0.002867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.002907	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.002697	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.002805	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.002797	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.196191	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,277,947	 
1.000000	: iteration 64: start= 1609809, BFS took 	0.002862	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.002912	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.002948	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.002671	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.002787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.002736	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.002812	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.002841	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.002709	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.002804	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.002840	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.002768	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.002831	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.002748	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.002728	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.003015	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.002706	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.002914	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.002785	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.002746	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.002871	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.002750	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.002864	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.002798	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.002823	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.002747	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.002665	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.201029	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,150,932	 
1.000000	: iteration 92: start= 1124663, BFS took 	0.003016	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.003054	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.199732	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,184,370	 
1.000000	: iteration 95: start=  703729, BFS took 	0.198993	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,203,626	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.002988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.198115	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,226,689	 
1.000000	: iteration 98: start=  286392, BFS took 	0.002880	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.004548	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	219	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.002807	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.002779	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.002813	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.002740	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.200142	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,173,754	 
1.000000	: iteration 105: start=  507226, BFS took 	0.002926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.003001	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.002779	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.002867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.002909	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.002790	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.002672	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.201227	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,145,855	 
1.000000	: iteration 113: start= 1376035, BFS took 	0.002822	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.002700	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.201328	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,143,277	 
1.000000	: iteration 116: start= 2292609, BFS took 	0.003033	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.002759	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.199303	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,195,538	 
1.000000	: iteration 119: start= 1677169, BFS took 	0.002914	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.006639	s, covered 	3	 edges, discovered 	4	 verts, TEPS incl. filtered edges=	0	, TEPS=	451	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.002662	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.002767	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.002789	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.003016	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.002708	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.002898	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 127: start=  992698, BFS took 	0.002782	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.202806	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	0	, TEPS=	5,105,790	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	1.000000	: 	1.96190834045410156e-01
  firstquartile_C++SR_PythonFilter_Mattime	1.000000	: 	1.98714077472686768e-01
         median_C++SR_PythonFilter_Mattime	1.000000	: 	1.99517488479614258e-01
  thirdquartile_C++SR_PythonFilter_Mattime	1.000000	: 	2.01177597045898438e-01
            max_C++SR_PythonFilter_Mattime	1.000000	: 	2.02805995941162109e-01
           mean_C++SR_PythonFilter_Mattime	1.000000	: 	1.99709117412567139e-01
         stddev_C++SR_PythonFilter_Mattime	1.000000	: 	1.63994190918419669e-03
          total_C++SR_PythonFilter_Mattime	1.000000	: 	3.195346e+00

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03548500000000000e+06
  firstquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03548500000000000e+06
         median_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03548500000000000e+06
  thirdquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03548600000000000e+06
            max_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03548800000000000e+06
           mean_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03548550000000000e+06
         stddev_C++SR_PythonFilter_Matnedge	1.000000	: 	8.16496580927726034e-01
          total_C++SR_PythonFilter_Matnedge	1.000000	: 	1.656777e+07

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.10579085788180493e+06
  firstquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.14712474977153353e+06
         median_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.18995455550173204e+06
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.21094365001969691e+06
            max_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.27794789720057789e+06
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.18496858558699861e+06
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	6.08942236914483783e+03

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.66025616773175261e+03
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.66029482217595978e+03
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.66032739135204793e+03
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.66034973449631707e+03
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.66039491651235494e+03
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.66032337205115164e+03
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	4.76955752546354660e-03
Total runtime for cpm on 1% is	307.888053	s.
--Generating starting verts
Generated starting verts in 136.649327s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	57.520331	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,805,508	, TEPS=	18,002	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.013878	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	72	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.012066	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,652	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.012501	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,639	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.010817	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.011259	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.012126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	329	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.012803	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	57.737873	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,798,705	, TEPS=	17,934	 
1.000000	: iteration 10: start=  565854, BFS took 	0.012530	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	877	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	58.192995	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,784,638	, TEPS=	17,793	 
1.000000	: iteration 12: start=  950518, BFS took 	0.013290	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,859	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.011355	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.012223	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.012296	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.011575	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,591	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.012462	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.012372	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.010802	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,018	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.012171	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	328	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.012608	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	713	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.012076	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.011196	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	446	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.010373	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	289	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.011512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	521	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.012705	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.012019	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	915	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.011506	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	57.966854	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,791,600	, TEPS=	17,863	 
1.000000	: iteration 30: start= 1280874, BFS took 	0.011159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,688	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.011544	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.012401	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,128	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.013361	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.013990	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	71	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.011021	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.012495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	720	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.011085	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	270	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.012625	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,732	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.011443	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	262	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.011717	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.011689	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,410	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.011405	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	263	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.012444	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.012343	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,053	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.011876	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.010678	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	936	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.011358	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.010377	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	289	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	57.623678	s, covered 	1035488	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,802,276	, TEPS=	17,969	 
1.000000	: iteration 50: start= 2073266, BFS took 	0.012817	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	156	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.012321	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,136	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.011935	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,848	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.011191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,072	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.012286	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	406	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.010716	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.011626	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	57.735335	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,798,785	, TEPS=	17,935	 
1.000000	: iteration 58: start=  141993, BFS took 	0.011899	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.013347	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,022	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.011721	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,279	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.011495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	173	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.011484	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	696	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	58.046305	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,789,148	, TEPS=	17,838	 
1.000000	: iteration 64: start= 1609809, BFS took 	0.011514	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	694	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.012382	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	323	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.013270	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	301	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.010534	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	854	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.011191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	268	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.011318	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,943	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.012020	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.012039	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.010860	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.011514	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.012014	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	332	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.012056	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.012350	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.010524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.010489	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	858	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.011479	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	261	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.010766	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.012704	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,518	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.010979	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,643	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.011574	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.012457	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,123	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.011869	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,033	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.012703	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.011934	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.011226	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.010732	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.010672	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,248	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	57.522621	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,805,437	, TEPS=	18,001	 
1.000000	: iteration 92: start= 1124663, BFS took 	0.013701	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	510	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.013189	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,577	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	57.583340	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,803,533	, TEPS=	17,982	 
1.000000	: iteration 95: start=  703729, BFS took 	57.465994	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,807,215	, TEPS=	18,019	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.013133	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,294	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	57.715980	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,799,388	, TEPS=	17,941	 
1.000000	: iteration 98: start=  286392, BFS took 	0.011936	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.019527	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	5,121	, TEPS=	51	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.010810	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	277	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.010605	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	377	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.010680	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	280	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.011235	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,026	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	58.602714	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,772,161	, TEPS=	17,669	 
1.000000	: iteration 105: start=  507226, BFS took 	0.012422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.013264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,765	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.012249	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,530	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.012238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.012928	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	618	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.011243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.010791	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	58.033793	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,789,534	, TEPS=	17,842	 
1.000000	: iteration 113: start= 1376035, BFS took 	0.011360	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,112	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.011204	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	57.942338	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,792,358	, TEPS=	17,870	 
1.000000	: iteration 116: start= 2292609, BFS took 	0.014150	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	70	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.010989	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,730	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	57.931759	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,792,686	, TEPS=	17,874	 
1.000000	: iteration 119: start= 1677169, BFS took 	0.012312	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.031544	s, covered 	3	 edges, discovered 	4	 verts, TEPS incl. filtered edges=	18,450	, TEPS=	95	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.010968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	729	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.010660	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.012611	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	396	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.013353	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.011366	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	967	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.012968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
1.000000	: iteration 127: start=  992698, BFS took 	0.012288	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,546	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	57.852533	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,795,141	, TEPS=	17,898	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	1.000000	: 	5.74659941196441650e+01
  firstquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	5.75934244394302368e+01
         median_C++SR_PythonFilter_OTFtime	1.000000	: 	5.77952029705047607e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	5.80170581936836243e+01
            max_C++SR_PythonFilter_OTFtime	1.000000	: 	5.86027138233184814e+01
           mean_C++SR_PythonFilter_OTFtime	1.000000	: 	5.78421526551246643e+01
         stddev_C++SR_PythonFilter_OTFtime	1.000000	: 	2.95945493582386421e-01
          total_C++SR_PythonFilter_OTFtime	1.000000	: 	9.254744e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  firstquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
         median_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  thirdquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03548600000000000e+06
            max_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03548800000000000e+06
           mean_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03548550000000000e+06
         stddev_C++SR_PythonFilter_OTFnedge	1.000000	: 	8.16496580927726034e-01
          total_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.656777e+07

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.76695741962033899e+04
  firstquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.78479578357159953e+04
         median_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.79164699777621354e+04
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.79792372982435954e+04
            max_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.80190913924523920e+04
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.79019184402867977e+04
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	7.76073401775302152e+00

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.77216118886760320e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.79005117915340909e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.79692347894404177e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.80321877918776427e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.80721584288226487e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.79546361138729495e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	7.78387155945745008e+02
Total runtime for cpo on 1% is	1173.987451	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	3.072228	s.
--Generating starting verts
Generated starting verts in 136.264119s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	1.197596	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	86,718,266	, TEPS=	864,636	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.014577	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	68	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.011997	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,667	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.013199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,500	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.010748	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.011210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.011996	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	333	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.013383	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	1.197394	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	86,732,891	, TEPS=	864,782	 
1.000000	: iteration 10: start=  565854, BFS took 	0.012322	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	892	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	1.193025	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	87,050,518	, TEPS=	867,949	 
1.000000	: iteration 12: start=  950518, BFS took 	0.012860	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,954	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.011744	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.012761	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.012005	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.011474	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,614	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.012600	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	79	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.013464	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.010658	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,032	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.012456	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	321	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.012665	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	710	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.011940	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.011584	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	431	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.010486	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	286	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.011150	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	538	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.012660	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	394	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.012880	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	854	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.011168	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	1.194544	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	86,939,826	, TEPS=	866,845	 
1.000000	: iteration 30: start= 1280874, BFS took 	0.011493	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,610	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.011948	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.013787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,015	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.013487	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.013350	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.011087	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.013104	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	686	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.011161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	268	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.013660	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,222	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.011646	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	257	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.012249	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.012552	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,763	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.011973	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.013119	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	228	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.012038	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,079	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.011966	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.010845	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	922	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.011491	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	87	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.010576	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	283	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	1.204988	s, covered 	1035488	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	86,186,563	, TEPS=	859,334	 
1.000000	: iteration 50: start= 2073266, BFS took 	0.013690	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	146	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.013446	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,041	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.012968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,621	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.011035	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,087	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.012445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	401	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.010588	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.011679	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	1.208292	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	85,950,629	, TEPS=	856,983	 
1.000000	: iteration 58: start=  141993, BFS took 	0.011262	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	266	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.012906	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,092	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.011511	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,303	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.011015	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.011154	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	717	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	1.203291	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	86,307,850	, TEPS=	860,544	 
1.000000	: iteration 64: start= 1609809, BFS took 	0.012178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	656	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.013747	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	290	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.012713	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	314	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.010848	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	829	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.011429	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	262	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.011771	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,869	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.011728	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	255	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.011797	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.011094	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.011681	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.011993	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	333	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.012769	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.012844	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.010398	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	96	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.010517	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	855	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.012306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.011157	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.013775	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,323	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.011467	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,488	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.012211	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	163	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.012274	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,140	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.011690	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,079	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.012803	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.012516	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.011643	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.010903	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.010587	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,266	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	1.225063	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	84,774,006	, TEPS=	845,251	 
1.000000	: iteration 92: start= 1124663, BFS took 	0.013725	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	510	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.013586	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,502	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	1.207427	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	86,012,200	, TEPS=	857,596	 
1.000000	: iteration 95: start=  703729, BFS took 	1.213156	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	85,606,019	, TEPS=	853,546	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.013994	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,214	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	1.214595	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	85,504,590	, TEPS=	852,535	 
1.000000	: iteration 98: start=  286392, BFS took 	0.011761	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.019645	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	5,090	, TEPS=	50	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.011125	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.010546	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	379	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.010713	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	280	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.011548	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,944	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	1.216317	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	85,383,547	, TEPS=	851,328	 
1.000000	: iteration 105: start=  507226, BFS took 	0.012423	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.013671	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,534	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.011695	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,650	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.011991	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.013079	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	611	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.010984	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.010592	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	188	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	1.216943	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	85,339,644	, TEPS=	850,891	 
1.000000	: iteration 113: start= 1376035, BFS took 	0.011502	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,086	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.011147	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	1.222500	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	84,951,702	, TEPS=	847,023	 
1.000000	: iteration 116: start= 2292609, BFS took 	0.013944	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	71	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.010961	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,737	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	1.210031	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	85,827,110	, TEPS=	855,751	 
1.000000	: iteration 119: start= 1677169, BFS took 	0.012134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.031240	s, covered 	3	 edges, discovered 	4	 verts, TEPS incl. filtered edges=	18,629	, TEPS=	96	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.011096	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	720	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.010741	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.013040	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	383	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.013462	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.011618	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	946	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.013002	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	76	, TEPS=	0	 (result discarded)
1.000000	: iteration 127: start=  992698, BFS took 	0.012704	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,495	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	1.229216	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	84,487,548	, TEPS=	842,394	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.19302511215209961e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.19901978969573975e+00
         median_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.20916152000427246e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.21678650379180908e+00
            max_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.22921609878540039e+00
           mean_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.20964865386486053e+00
         stddev_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.09211624855563866e-02
          total_PythonSR_SejitsFilter_OTFtime	1.000000	: 	1.935438e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  firstquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
         median_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548600000000000e+06
            max_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548800000000000e+06
           mean_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03548550000000000e+06
         stddev_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	8.16496580927726034e-01
          total_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.656777e+07

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.42394596868013847e+05
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.51000399899766548e+05
         median_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.56367423482813756e+05
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.63613243411519332e+05
            max_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.67949039339236682e+05
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.56021703290080884e+05
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	7.84228724479365837e+02

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.44875486927144378e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.53506201212852895e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.58888700828542858e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.66156623341161609e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.70505188383324295e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	8.58542519830027968e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	7.86551666832486371e+04
Total runtime for pso on 1% is	269.786214	s.
--Generating starting verts
Generated starting verts in 136.629253s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	58.002579	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,790,497	, TEPS=	17,852	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.014566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	68	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.011867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,696	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.013821	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,387	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.010855	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.011238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.012284	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	325	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.013838	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	216	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	57.276310	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,813,200	, TEPS=	18,078	 
1.000000	: iteration 10: start=  565854, BFS took 	0.012387	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	888	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	57.193214	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,815,835	, TEPS=	18,105	 
1.000000	: iteration 12: start=  950518, BFS took 	0.013318	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,853	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.011532	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.012781	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.012336	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.011661	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,572	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.012375	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.013626	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	73	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.010895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,009	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.012857	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	311	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.013085	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	687	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.012097	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.011513	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	434	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.010774	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	278	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.011411	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	525	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.012553	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	398	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.013100	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	839	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.011566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	56.983548	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,822,516	, TEPS=	18,171	 
1.000000	: iteration 30: start= 1280874, BFS took 	0.011413	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,628	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.011735	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.013454	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,040	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.013455	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.013042	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	76	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.010926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.012889	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	698	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.011141	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.013525	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,284	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.011468	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	261	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.012426	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.012725	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,644	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.011822	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	253	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.013941	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	215	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.012475	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,042	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.011745	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.010793	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	926	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.011894	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.011366	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	263	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	57.224145	s, covered 	1035488	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,814,859	, TEPS=	18,095	 
1.000000	: iteration 50: start= 2073266, BFS took 	0.013334	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	149	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.013217	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,059	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.012781	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,660	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.011324	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,059	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.012266	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	407	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.010591	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.012214	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	163	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	56.981718	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,822,575	, TEPS=	18,172	 
1.000000	: iteration 58: start=  141993, BFS took 	0.011354	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	264	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.013261	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,036	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.011409	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,314	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.011012	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.011134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	718	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	56.834310	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,827,302	, TEPS=	18,219	 
1.000000	: iteration 64: start= 1609809, BFS took 	0.011692	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	684	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.013629	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	293	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.013445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	297	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.010706	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	840	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.011351	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	264	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.011907	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,847	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.012003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.011802	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.010991	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.011740	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.012509	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	319	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.012146	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.012923	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.010468	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.010381	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	866	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.011979	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.011138	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.013876	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,306	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.011306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,537	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.011670	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.011988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,167	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.011938	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,015	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.012838	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	233	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.012238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.011387	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	175	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.010918	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.010790	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,224	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	56.852096	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,826,731	, TEPS=	18,213	 
1.000000	: iteration 92: start= 1124663, BFS took 	0.013555	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	516	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.013611	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,497	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	57.742234	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,798,570	, TEPS=	17,932	 
1.000000	: iteration 95: start=  703729, BFS took 	56.414962	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,840,884	, TEPS=	18,354	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.013834	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,228	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	56.860455	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,826,461	, TEPS=	18,210	 
1.000000	: iteration 98: start=  286392, BFS took 	0.011933	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.020026	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	4,993	, TEPS=	49	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.011025	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	272	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.010534	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	379	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.010745	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.011468	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,964	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	56.389213	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,841,725	, TEPS=	18,363	 
1.000000	: iteration 105: start=  507226, BFS took 	0.012207	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.014059	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,326	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.011997	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,583	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.011899	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.012874	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	621	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.011088	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.010634	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	188	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	56.556976	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,836,263	, TEPS=	18,308	 
1.000000	: iteration 113: start= 1376035, BFS took 	0.011487	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,089	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.011015	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	57.078836	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,819,474	, TEPS=	18,141	 
1.000000	: iteration 116: start= 2292609, BFS took 	0.013747	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	72	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.011128	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,695	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	56.299648	s, covered 	1035486	 edges, discovered 	338071	 verts, TEPS incl. filtered edges=	1,844,655	, TEPS=	18,392	 
1.000000	: iteration 119: start= 1677169, BFS took 	0.012185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	246	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.031782	s, covered 	3	 edges, discovered 	4	 verts, TEPS incl. filtered edges=	18,312	, TEPS=	94	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.010868	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	736	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.010737	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.012955	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	385	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.013479	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	74	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.011516	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	955	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.013028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	76	, TEPS=	0	 (result discarded)
1.000000	: iteration 127: start=  992698, BFS took 	0.012834	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,480	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	56.615772	s, covered 	1035485	 edges, discovered 	338070	 verts, TEPS incl. filtered edges=	1,834,355	, TEPS=	18,289	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	1.000000	: 	5.62996480464935303e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	5.65716750621795654e+01
         median_PythonSR_PythonFilter_OTFtime	1.000000	: 	5.69210865497589111e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	5.72164122462272644e+01
            max_PythonSR_PythonFilter_OTFtime	1.000000	: 	5.80025789737701416e+01
           mean_PythonSR_PythonFilter_OTFtime	1.000000	: 	5.69566259980201721e+01
         stddev_PythonSR_PythonFilter_OTFtime	1.000000	: 	4.70123447608460754e-01
          total_PythonSR_PythonFilter_OTFtime	1.000000	: 	9.113060e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  firstquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
         median_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03548500000000000e+06
  thirdquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03548600000000000e+06
            max_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03548800000000000e+06
           mean_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03548550000000000e+06
         stddev_PythonSR_PythonFilter_OTFnedge	1.000000	: 	8.16496580927726034e-01
          total_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.656777e+07

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.78523958472306185e+04
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.80977322030359865e+04
         median_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.81916182054283636e+04
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.83039649907610656e+04
            max_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.83924062748113829e+04
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.81802464879770887e+04
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.39808323132665571e+01

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.79049719577063085e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.81510333456129022e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.82451848914431175e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.83578616709905188e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.84465570573790162e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.82337838004036038e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.40212671453339590e+03
Total runtime for ppo on 1% is	1159.010989	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	0.075691	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 139.913981s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	2.610406	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,505,747	, TEPS=	4,750,710	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.012638	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	79	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	2.581300	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	48,041,411	, TEPS=	4,804,278	 
10.000000	: iteration  4: start= 2235138, BFS took 	2.603572	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,630,443	, TEPS=	4,763,180	 
10.000000	: iteration  5: start=     274, BFS took 	0.010028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	199	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	2.586754	s, covered 	12401286	 edges, discovered 	1156305	 verts, TEPS incl. filtered edges=	47,940,118	, TEPS=	4,794,149	 
10.000000	: iteration  7: start=  724625, BFS took 	0.011081	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	360	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.011558	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	259	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	2.671704	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	46,415,805	, TEPS=	4,641,713	 
10.000000	: iteration 10: start=  565854, BFS took 	0.010867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,012	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	2.593884	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,808,343	, TEPS=	4,780,971	 
10.000000	: iteration 12: start=  950518, BFS took 	2.676945	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	46,324,932	, TEPS=	4,632,626	 
10.000000	: iteration 13: start=  446425, BFS took 	0.010830	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.010885	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.010795	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	2.626644	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,212,070	, TEPS=	4,721,342	 
10.000000	: iteration 17: start=  950965, BFS took 	0.011829	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.011656	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	2.584536	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,981,259	, TEPS=	4,798,263	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.011178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	357	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	2.622267	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,290,872	, TEPS=	4,729,222	 
10.000000	: iteration 22: start=  750848, BFS took 	2.625397	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,234,489	, TEPS=	4,723,584	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.010476	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	477	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.012131	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.012893	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	465	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.011541	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	433	, TEPS=	0	 (result discarded)
10.000000	: iteration 27: start= 2104657, BFS took 	0.019726	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	608	, TEPS=	50	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.010212	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	97	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	2.600590	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,685,062	, TEPS=	4,768,642	 
10.000000	: iteration 30: start= 1280874, BFS took 	2.606520	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,576,576	, TEPS=	4,757,794	 
10.000000	: iteration 31: start= 1606965, BFS took 	0.010422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	2.582194	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	48,024,777	, TEPS=	4,802,615	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.011387	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	87	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.011202	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
10.000000	: iteration 35: start= 1339058, BFS took 	0.009811	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	101	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.010980	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	819	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.009945	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	301	, TEPS=	0	 (result discarded)
10.000000	: iteration 38: start= 2250886, BFS took 	2.592730	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	47,829,621	, TEPS=	4,783,099	 
10.000000	: iteration 39: start=  474806, BFS took 	0.010666	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	281	, TEPS=	0	 (result discarded)
10.000000	: iteration 40: start= 1865630, BFS took 	0.010942	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
10.000000	: iteration 41: start= 1919211, BFS took 	2.678051	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	46,305,800	, TEPS=	4,630,712	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.58130002021789551e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.58824807405471802e+00
         median_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.60504603385925293e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.62633222341537476e+00
            max_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.67805099487304688e+00
           mean_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.61521841585636139e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	3.33012316084770957e-02
          total_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	4.184349e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012860000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850625000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	2.50000000000000000e-01
          total_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.984206e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.63071279215423763e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.72190281697980873e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.76048745729040168e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.79138698341404647e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.80427881411211099e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.74196915509211831e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.10010177135150570e+03

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.63058008370294943e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.72176749517556354e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.76035102971516848e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.79124943836767599e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.80414113155013993e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.74183323931023255e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	4.09998549729283259e+04
Total runtime for sso on 10% is	217.512102	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
}
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	2.069058	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 138.339089s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	2.948581	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,057,280	, TEPS=	4,205,848	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.011964	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	2.938754	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,197,918	, TEPS=	4,219,912	 
10.000000	: iteration  4: start= 2235138, BFS took 	2.964624	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	41,829,685	, TEPS=	4,183,088	 
10.000000	: iteration  5: start=     274, BFS took 	0.010119	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	197	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	2.915139	s, covered 	12401286	 edges, discovered 	1156305	 verts, TEPS incl. filtered edges=	42,539,755	, TEPS=	4,254,097	 
10.000000	: iteration  7: start=  724625, BFS took 	0.011058	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	361	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.010419	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	287	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	3.022109	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	41,034,024	, TEPS=	4,103,520	 
10.000000	: iteration 10: start=  565854, BFS took 	0.010924	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,006	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	2.919073	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,482,425	, TEPS=	4,248,364	 
10.000000	: iteration 12: start=  950518, BFS took 	3.030567	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	40,919,500	, TEPS=	4,092,067	 
10.000000	: iteration 13: start=  446425, BFS took 	0.010572	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.010887	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.011059	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	2.959308	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	41,904,830	, TEPS=	4,190,603	 
10.000000	: iteration 17: start=  950965, BFS took 	0.011293	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.010115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	98	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	2.901071	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,746,042	, TEPS=	4,274,726	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.009885	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	404	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	3.168556	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	39,137,479	, TEPS=	3,913,860	 
10.000000	: iteration 22: start=  750848, BFS took 	3.187908	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	38,899,898	, TEPS=	3,890,101	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.011423	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	437	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.010736	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.013080	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	458	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.011461	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	436	, TEPS=	0	 (result discarded)
10.000000	: iteration 27: start= 2104657, BFS took 	0.018941	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	633	, TEPS=	52	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.010277	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	97	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	2.926765	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,370,773	, TEPS=	4,237,198	 
10.000000	: iteration 30: start= 1280874, BFS took 	2.923687	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,415,380	, TEPS=	4,241,659	 
10.000000	: iteration 31: start= 1606965, BFS took 	0.009170	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	109	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	2.916715	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,516,766	, TEPS=	4,251,798	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.011574	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.011264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
10.000000	: iteration 35: start= 1339058, BFS took 	0.008644	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	115	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.011471	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	784	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.009903	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	302	, TEPS=	0	 (result discarded)
10.000000	: iteration 38: start= 2250886, BFS took 	2.898650	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	42,781,742	, TEPS=	4,278,296	 
10.000000	: iteration 39: start=  474806, BFS took 	0.010463	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	286	, TEPS=	0	 (result discarded)
10.000000	: iteration 40: start= 1865630, BFS took 	0.009344	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	107	, TEPS=	0	 (result discarded)
10.000000	: iteration 41: start= 1919211, BFS took 	2.995594	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	41,397,230	, TEPS=	4,139,841	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	10.000000	: 	2.89864993095397949e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	2.91730457544326782e+00
         median_C++SR_SejitsFilter_OTFtime	10.000000	: 	2.94366741180419922e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	3.01548027992248535e+00
            max_C++SR_SejitsFilter_OTFtime	10.000000	: 	3.18790793418884277e+00
           mean_C++SR_SejitsFilter_OTFtime	10.000000	: 	2.97606879472732544e+00
         stddev_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.84062485713125179e-02
          total_C++SR_SejitsFilter_OTFtime	10.000000	: 	4.761710e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
            max_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24012860000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850625000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	10.000000	: 	2.50000000000000000e-01
          total_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.984206e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	3.89010136302931979e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.11260045634544408e+06
         median_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.21288067502663471e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.25093993357314635e+06
            max_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.27829689524412248e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.16700214833462937e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	7.22663653046537911e+03

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	3.88998987925772518e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.11248259612352476e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.21275994094206914e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.25081810877415314e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.27817428644055352e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	4.16688271259545460e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	7.22643046719687118e+04
Total runtime for cso on 10% is	223.980953	s.
--Materializing the filter
Materialized 10.000000 in	223.131019	s.
10.000000	: 	12830580	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 12830580 elements.
1 filter(s) remove 115479104 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 4.861150s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	1.258130	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,856,919	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.005155	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	1.251384	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,910,055	 
10.000000	: iteration  4: start= 2235138, BFS took 	1.252773	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,899,067	 
10.000000	: iteration  5: start=     274, BFS took 	0.004749	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	1.246672	s, covered 	12401286	 edges, discovered 	1156305	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,947,513	 
10.000000	: iteration  7: start=  724625, BFS took 	0.005253	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.005020	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	1.255874	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,874,623	 
10.000000	: iteration 10: start=  565854, BFS took 	0.004752	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	1.267574	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,783,479	 
10.000000	: iteration 12: start=  950518, BFS took 	1.259681	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,844,782	 
10.000000	: iteration 13: start=  446425, BFS took 	0.004978	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.004518	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.004564	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	1.255844	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,874,860	 
10.000000	: iteration 17: start=  950965, BFS took 	0.005244	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.004945	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	1.254600	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,884,652	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.004922	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	1.254451	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,885,826	 
10.000000	: iteration 22: start=  750848, BFS took 	1.274351	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,731,452	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.004627	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004196	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.004656	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.004561	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 27: start= 2104657, BFS took 	0.008014	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	124	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.004258	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	1.272704	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,744,044	 
10.000000	: iteration 30: start= 1280874, BFS took 	1.245133	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,959,808	 
10.000000	: iteration 31: start= 1606965, BFS took 	0.004737	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	1.262454	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,823,157	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.005065	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.004731	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 35: start= 1339058, BFS took 	0.004358	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.004531	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.004308	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 38: start= 2250886, BFS took 	1.251814	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,906,650	 
10.000000	: iteration 39: start=  474806, BFS took 	0.004962	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 40: start= 1865630, BFS took 	0.004732	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 41: start= 1919211, BFS took 	1.259891	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	0	, TEPS=	9,843,140	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	10.000000	: 	1.24513292312622070e+00
  firstquartile_C++SR_PythonFilter_Mattime	10.000000	: 	1.25205385684967041e+00
         median_C++SR_PythonFilter_Mattime	10.000000	: 	1.25585913658142090e+00
  thirdquartile_C++SR_PythonFilter_Mattime	10.000000	: 	1.26181328296661377e+00
            max_C++SR_PythonFilter_Mattime	10.000000	: 	1.27435088157653809e+00
           mean_C++SR_PythonFilter_Mattime	10.000000	: 	1.25770814716815948e+00
         stddev_C++SR_PythonFilter_Mattime	10.000000	: 	8.31338636034217870e-03
          total_C++SR_PythonFilter_Mattime	10.000000	: 	2.012333e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24012850000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24012850000000000e+07
         median_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24012850000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24012850000000000e+07
            max_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24012860000000000e+07
           mean_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24012850625000000e+07
         stddev_C++SR_PythonFilter_Matnedge	10.000000	: 	2.50000000000000000e-01
          total_C++SR_PythonFilter_Matnedge	10.000000	: 	1.984206e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	9.73145244319052435e+06
  firstquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	9.82815347612743266e+06
         median_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	9.87474203160360456e+06
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	9.90475473203127459e+06
            max_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	9.95980812142003328e+06
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	9.86022479847502522e+06
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	6.57250915175869613e+03

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	5.52628709382686939e+04
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	5.52659586661154535e+04
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	5.52674251569694679e+04
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	5.52683624293421162e+04
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	5.52700671944316127e+04
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	5.52669700202137319e+04
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.06466710748024834e-01
Total runtime for cpm on 10% is	274.619358	s.
--Generating starting verts
Generated starting verts in 137.395235s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	71.931991	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,723,979	, TEPS=	172,402	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.010738	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	71.753958	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,728,257	, TEPS=	172,830	 
10.000000	: iteration  4: start= 2235138, BFS took 	71.620310	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,731,482	, TEPS=	173,153	 
10.000000	: iteration  5: start=     274, BFS took 	0.009791	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	71.406040	s, covered 	12401286	 edges, discovered 	1156305	 verts, TEPS incl. filtered edges=	1,736,677	, TEPS=	173,672	 
10.000000	: iteration  7: start=  724625, BFS took 	0.011113	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	359	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.010518	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	285	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	71.334560	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,738,418	, TEPS=	173,846	 
10.000000	: iteration 10: start=  565854, BFS took 	0.010848	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,014	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	71.798311	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,727,189	, TEPS=	172,723	 
10.000000	: iteration 12: start=  950518, BFS took 	71.888195	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,725,030	, TEPS=	172,507	 
10.000000	: iteration 13: start=  446425, BFS took 	0.010854	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.011361	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.010877	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	71.861588	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,725,668	, TEPS=	172,571	 
10.000000	: iteration 17: start=  950965, BFS took 	0.011610	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.010127	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	98	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	71.624172	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,731,388	, TEPS=	173,143	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.012557	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	318	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	72.808751	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,703,219	, TEPS=	170,326	 
10.000000	: iteration 22: start=  750848, BFS took 	70.811131	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,751,268	, TEPS=	175,131	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.009863	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	506	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.008551	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	350	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.010717	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	559	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.011345	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	440	, TEPS=	0	 (result discarded)
10.000000	: iteration 27: start= 2104657, BFS took 	0.019540	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	614	, TEPS=	51	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.010355	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	96	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	71.095052	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,744,274	, TEPS=	174,432	 
10.000000	: iteration 30: start= 1280874, BFS took 	70.747929	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,752,832	, TEPS=	175,288	 
10.000000	: iteration 31: start= 1606965, BFS took 	0.009349	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	106	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	70.808589	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,751,331	, TEPS=	175,138	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.011809	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.011443	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	87	, TEPS=	0	 (result discarded)
10.000000	: iteration 35: start= 1339058, BFS took 	0.010611	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.011502	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	782	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.010059	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	298	, TEPS=	0	 (result discarded)
10.000000	: iteration 38: start= 2250886, BFS took 	70.725430	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,753,390	, TEPS=	175,344	 
10.000000	: iteration 39: start=  474806, BFS took 	0.010669	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	281	, TEPS=	0	 (result discarded)
10.000000	: iteration 40: start= 1865630, BFS took 	0.012151	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
10.000000	: iteration 41: start= 1919211, BFS took 	70.990395	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,746,846	, TEPS=	174,689	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	10.000000	: 	7.07254300117492676e+01
  firstquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	7.08559470176696777e+01
         median_C++SR_PythonFilter_OTFtime	10.000000	: 	7.15131748914718628e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	7.18457688093185425e+01
            max_C++SR_PythonFilter_OTFtime	10.000000	: 	7.28087508678436279e+01
           mean_C++SR_PythonFilter_OTFtime	10.000000	: 	7.14504001140594482e+01
         stddev_C++SR_PythonFilter_OTFtime	10.000000	: 	5.71719031326468285e-01
          total_C++SR_PythonFilter_OTFtime	10.000000	: 	1.143206e+03

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
         median_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
            max_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24012860000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24012850625000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	10.000000	: 	2.50000000000000000e-01
          total_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.984206e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.70326847421263665e+05
  firstquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.72609842026552244e+05
         median_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.73412987920443702e+05
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.75021298656993487e+05
            max_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.75344073524046951e+05
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.73564949148842687e+05
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.17404835534954273e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.70321966139882454e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.72604895318379952e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.73408012593892636e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.75016282840524288e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.75339048457392119e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.73559974369577831e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	1.17401516585226841e+03
Total runtime for cpo on 10% is	1316.251215	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	1.074764	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 141.336131s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	6.782448	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,283,854	, TEPS=	1,828,437	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.014477	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	69	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	6.753277	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,362,833	, TEPS=	1,836,335	 
10.000000	: iteration  4: start= 2235138, BFS took 	6.780352	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,289,506	, TEPS=	1,829,003	 
10.000000	: iteration  5: start=     274, BFS took 	0.009887	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	202	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	6.753288	s, covered 	12401286	 edges, discovered 	1156305	 verts, TEPS incl. filtered edges=	18,362,803	, TEPS=	1,836,333	 
10.000000	: iteration  7: start=  724625, BFS took 	0.011370	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	351	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.014332	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	209	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	6.870718	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,048,957	, TEPS=	1,804,947	 
10.000000	: iteration 10: start=  565854, BFS took 	0.010772	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,021	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	6.839390	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,131,630	, TEPS=	1,813,215	 
10.000000	: iteration 12: start=  950518, BFS took 	6.875977	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,035,153	, TEPS=	1,803,567	 
10.000000	: iteration 13: start=  446425, BFS took 	0.010771	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.011444	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	87	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.010933	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	91	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	6.803452	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,227,408	, TEPS=	1,822,793	 
10.000000	: iteration 17: start=  950965, BFS took 	0.011861	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.013568	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	73	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	6.764802	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,331,548	, TEPS=	1,833,207	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.013446	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	297	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	6.773865	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,307,022	, TEPS=	1,830,754	 
10.000000	: iteration 22: start=  750848, BFS took 	6.842941	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,122,221	, TEPS=	1,812,274	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.012357	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	404	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.010773	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	278	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.010754	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	557	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.011077	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	451	, TEPS=	0	 (result discarded)
10.000000	: iteration 27: start= 2104657, BFS took 	0.022305	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	537	, TEPS=	44	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.010619	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	6.840791	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,127,917	, TEPS=	1,812,843	 
10.000000	: iteration 30: start= 1280874, BFS took 	6.772508	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,310,689	, TEPS=	1,831,121	 
10.000000	: iteration 31: start= 1606965, BFS took 	0.012223	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	81	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	6.797097	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,244,450	, TEPS=	1,824,497	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.011552	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.014508	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	68	, TEPS=	0	 (result discarded)
10.000000	: iteration 35: start= 1339058, BFS took 	0.011093	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.011501	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	782	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.009816	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	305	, TEPS=	0	 (result discarded)
10.000000	: iteration 38: start= 2250886, BFS took 	6.764785	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,331,595	, TEPS=	1,833,212	 
10.000000	: iteration 39: start=  474806, BFS took 	0.010893	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	275	, TEPS=	0	 (result discarded)
10.000000	: iteration 40: start= 1865630, BFS took 	0.012894	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
10.000000	: iteration 41: start= 1919211, BFS took 	6.849345	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	18,105,278	, TEPS=	1,810,579	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	10.000000	: 	6.75327682495117188e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	6.76672852039337158e+00
         median_PythonSR_SejitsFilter_OTFtime	10.000000	: 	6.78977251052856445e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	6.84240353107452393e+00
            max_PythonSR_SejitsFilter_OTFtime	10.000000	: 	6.87597680091857910e+00
           mean_PythonSR_SejitsFilter_OTFtime	10.000000	: 	6.80406473577022552e+00
         stddev_PythonSR_SejitsFilter_OTFtime	10.000000	: 	4.24270862286975914e-02
          total_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.088650e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012860000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24012850625000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	2.50000000000000000e-01
          total_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.984206e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.80356702168385452e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.81241652488123369e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.82646758961987682e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.83268590968333790e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.83633594793290063e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.82262890545966290e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.06981893235412940e+02

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.80351533448212445e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.81236458406760506e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.82641524612633139e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.83263338798318282e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.83628332162878029e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.82257666468291208e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.06956379628641662e+03
Total runtime for pso on 10% is	287.032304	s.
--Generating starting verts
Generated starting verts in 137.665026s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	73.762619	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,681,194	, TEPS=	168,124	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.014364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	69	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	73.452216	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,688,298	, TEPS=	168,834	 
10.000000	: iteration  4: start= 2235138, BFS took 	73.449238	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,688,367	, TEPS=	168,841	 
10.000000	: iteration  5: start=     274, BFS took 	0.009850	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	203	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	73.510223	s, covered 	12401286	 edges, discovered 	1156305	 verts, TEPS incl. filtered edges=	1,686,966	, TEPS=	168,701	 
10.000000	: iteration  7: start=  724625, BFS took 	0.011188	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	357	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.013789	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	217	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	73.944188	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,677,066	, TEPS=	167,711	 
10.000000	: iteration 10: start=  565854, BFS took 	0.010878	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,011	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	73.534125	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,686,418	, TEPS=	168,646	 
10.000000	: iteration 12: start=  950518, BFS took 	73.994417	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,675,927	, TEPS=	167,597	 
10.000000	: iteration 13: start=  446425, BFS took 	0.010769	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.011168	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.010701	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	73.448957	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,688,373	, TEPS=	168,842	 
10.000000	: iteration 17: start=  950965, BFS took 	0.011659	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.014163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	70	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	73.310734	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,691,557	, TEPS=	169,160	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.013716	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	291	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	74.106939	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,673,383	, TEPS=	167,343	 
10.000000	: iteration 22: start=  750848, BFS took 	73.339201	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,690,900	, TEPS=	169,094	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.012516	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	399	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.010974	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	273	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.010431	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	575	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.011312	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	442	, TEPS=	0	 (result discarded)
10.000000	: iteration 27: start= 2104657, BFS took 	0.021866	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	548	, TEPS=	45	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.010441	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	73.736798	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,681,783	, TEPS=	168,183	 
10.000000	: iteration 30: start= 1280874, BFS took 	73.305530	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,691,677	, TEPS=	169,172	 
10.000000	: iteration 31: start= 1606965, BFS took 	0.012054	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	82	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	73.592002	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,685,092	, TEPS=	168,514	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.012041	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	83	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.014333	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	69	, TEPS=	0	 (result discarded)
10.000000	: iteration 35: start= 1339058, BFS took 	0.011158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.011281	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	797	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.009887	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	303	, TEPS=	0	 (result discarded)
10.000000	: iteration 38: start= 2250886, BFS took 	73.481367	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,687,629	, TEPS=	168,767	 
10.000000	: iteration 39: start=  474806, BFS took 	0.010478	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	286	, TEPS=	0	 (result discarded)
10.000000	: iteration 40: start= 1865630, BFS took 	0.013049	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	76	, TEPS=	0	 (result discarded)
10.000000	: iteration 41: start= 1919211, BFS took 	73.860574	s, covered 	12401285	 edges, discovered 	1156304	 verts, TEPS incl. filtered edges=	1,678,964	, TEPS=	167,901	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	10.000000	: 	7.33055298328399658e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	7.34490271806716919e+01
         median_PythonSR_PythonFilter_OTFtime	10.000000	: 	7.35221741199493408e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	7.38360852599143982e+01
            max_PythonSR_PythonFilter_OTFtime	10.000000	: 	7.41069388389587402e+01
           mean_PythonSR_PythonFilter_OTFtime	10.000000	: 	7.36143205165863037e+01
         stddev_PythonSR_PythonFilter_OTFtime	10.000000	: 	2.54704722147765128e-01
          total_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.177829e+03

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24012850000000000e+07
            max_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24012860000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24012850625000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	10.000000	: 	2.50000000000000000e-01
          total_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.984206e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.67343101662168832e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.67957023337800463e+05
         median_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.68674090180176951e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.68842059262800321e+05
            max_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.69172571677455882e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.68462942745188251e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	4.71101499104540835e+01

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.67338305889929854e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.67952209971597325e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.68669250822817348e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.68837220532953972e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.69167723475678870e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.68458114201953774e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	4.71088446487389376e+02
Total runtime for ppo on 10% is	1351.095933	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	0.072523	s.
--Generating starting verts
Generated starting verts in 142.593594s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	4.916302	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	25,767,920	, TEPS=	6,442,721	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.014503	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	68	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	4.866246	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	26,032,978	, TEPS=	6,508,993	 
25.000000	: iteration  4: start= 2235138, BFS took 	4.923373	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	25,730,912	, TEPS=	6,433,468	 
25.000000	: iteration  5: start=     274, BFS took 	4.856269	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	26,086,463	, TEPS=	6,522,366	 
25.000000	: iteration  6: start=  307086, BFS took 	4.761725	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	26,604,408	, TEPS=	6,651,867	 
25.000000	: iteration  7: start=  724625, BFS took 	0.011308	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	353	, TEPS=	0	 (result discarded)
25.000000	: iteration  8: start= 2394484, BFS took 	0.011958	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	4.696427	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	26,974,309	, TEPS=	6,744,353	 
25.000000	: iteration 10: start=  565854, BFS took 	4.613602	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	27,458,562	, TEPS=	6,865,430	 
25.000000	: iteration 11: start=  221315, BFS took 	4.592650	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	27,583,830	, TEPS=	6,896,751	 
25.000000	: iteration 12: start=  950518, BFS took 	4.879026	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	25,964,789	, TEPS=	6,491,944	 
25.000000	: iteration 13: start=  446425, BFS took 	0.010450	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.011029	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.010868	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	92	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	4.805452	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	26,362,323	, TEPS=	6,591,339	 
25.000000	: iteration 17: start=  950965, BFS took 	0.011530	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.013814	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	72	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	4.825620	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	26,252,145	, TEPS=	6,563,791	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.011568	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	345	, TEPS=	0	 (result discarded)
25.000000	: iteration 21: start= 1004718, BFS took 	4.842849	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	26,158,750	, TEPS=	6,540,440	 
25.000000	: iteration 22: start=  750848, BFS took 	4.894831	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	25,880,950	, TEPS=	6,470,982	 
25.000000	: iteration 23: start= 1642323, BFS took 	4.829769	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	26,229,593	, TEPS=	6,558,153	 
25.000000	: iteration 24: start= 1257228, BFS took 	4.672127	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	27,114,605	, TEPS=	6,779,431	 
25.000000	: iteration 25: start=  490027, BFS took 	0.010649	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	563	, TEPS=	0	 (result discarded)
25.000000	: iteration 26: start= 1062860, BFS took 	0.011436	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	437	, TEPS=	0	 (result discarded)
25.000000	: iteration 27: start= 2104657, BFS took 	4.584780	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	27,631,179	, TEPS=	6,908,589	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.58477997779846191e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.67820203304290771e+00
         median_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.82769453525543213e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.87583094835281372e+00
            max_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.92337298393249512e+00
           mean_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.78506548702716827e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.16613672802105897e-01
          total_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	7.656105e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743660000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743651250000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.41565025531986588e-01
          total_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	5.067898e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.43346849880555179e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.49620673687351122e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.56097245132132247e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.77066201943769492e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.90858997670146078e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.61942145023883041e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.84709986963659867e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.57309124076992683e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.59818364790053964e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.62408695225009993e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.70795312663196623e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.76311796015195251e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.64746385592216775e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.38754950393244799e+04
Total runtime for sso on 25% is	242.614252	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	3.073487	s.
--Generating starting verts
Generated starting verts in 139.598783s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	5.473533	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,144,627	, TEPS=	5,786,822	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.013098	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	76	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	5.409465	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,418,744	, TEPS=	5,855,359	 
25.000000	: iteration  4: start= 2235138, BFS took 	5.423911	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,356,371	, TEPS=	5,839,765	 
25.000000	: iteration  5: start=     274, BFS took 	5.267949	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	24,047,855	, TEPS=	6,012,656	 
25.000000	: iteration  6: start=  307086, BFS took 	5.204595	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	24,340,584	, TEPS=	6,085,846	 
25.000000	: iteration  7: start=  724625, BFS took 	0.012749	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	313	, TEPS=	0	 (result discarded)
25.000000	: iteration  8: start= 2394484, BFS took 	0.012455	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	5.158208	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	24,559,474	, TEPS=	6,140,575	 
25.000000	: iteration 10: start=  565854, BFS took 	5.044379	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	25,113,670	, TEPS=	6,279,140	 
25.000000	: iteration 11: start=  221315, BFS took 	5.034655	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	25,162,176	, TEPS=	6,291,268	 
25.000000	: iteration 12: start=  950518, BFS took 	5.346108	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,696,280	, TEPS=	5,924,751	 
25.000000	: iteration 13: start=  446425, BFS took 	0.012393	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.013615	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	73	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.011053	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	90	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	5.282590	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,981,205	, TEPS=	5,995,991	 
25.000000	: iteration 17: start=  950965, BFS took 	0.011448	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	87	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.011825	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	5.299749	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,903,562	, TEPS=	5,976,578	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.011308	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	353	, TEPS=	0	 (result discarded)
25.000000	: iteration 21: start= 1004718, BFS took 	5.323403	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	23,797,349	, TEPS=	5,950,022	 
25.000000	: iteration 22: start=  750848, BFS took 	5.198548	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	24,368,897	, TEPS=	6,092,925	 
25.000000	: iteration 23: start= 1642323, BFS took 	5.100717	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	24,836,288	, TEPS=	6,209,786	 
25.000000	: iteration 24: start= 1257228, BFS took 	5.188764	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	24,414,846	, TEPS=	6,104,414	 
25.000000	: iteration 25: start=  490027, BFS took 	0.010599	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	566	, TEPS=	0	 (result discarded)
25.000000	: iteration 26: start= 1062860, BFS took 	0.011783	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	424	, TEPS=	0	 (result discarded)
25.000000	: iteration 27: start= 2104657, BFS took 	5.124808	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	24,719,536	, TEPS=	6,180,595	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	25.000000	: 	5.03465509414672852e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	5.13315808773040771e+00
         median_C++SR_SejitsFilter_OTFtime	25.000000	: 	5.23627197742462158e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	5.34043186902999878e+00
            max_C++SR_SejitsFilter_OTFtime	25.000000	: 	5.47353291511535645e+00
           mean_C++SR_SejitsFilter_OTFtime	25.000000	: 	5.24258640408515930e+00
         stddev_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.33352156115209730e-01
          total_C++SR_SejitsFilter_OTFtime	25.000000	: 	8.388138e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
            max_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16743660000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16743651250000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.41565025531986588e-01
          total_C++SR_SejitsFilter_OTFnedge	25.000000	: 	5.067898e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	5.78682278725868464e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	5.93106950115684792e+06
         median_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	6.04925133191555832e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	6.17059032378577348e+06
            max_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	6.29126810232234187e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	6.04174403309174813e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.59751635851201117e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.31446272388644479e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.37215476918209270e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.41942202290694714e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.46795207211486027e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.51621762823993750e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.41641948239487857e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	6.38933032448841768e+04
Total runtime for cso on 25% is	250.057847	s.
--Materializing the filter
Materialized 25.000000 in	225.132061	s.
25.000000	: 	32080414	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 32080414 elements.
1 filter(s) remove 96229270 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 11.470894s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	2.931798	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,803,733	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.007560	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	2.927751	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,818,667	 
25.000000	: iteration  4: start= 2235138, BFS took 	2.871909	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,029,028	 
25.000000	: iteration  5: start=     274, BFS took 	2.917543	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,856,520	 
25.000000	: iteration  6: start=  307086, BFS took 	2.904569	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,905,014	 
25.000000	: iteration  7: start=  724625, BFS took 	0.006449	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  8: start= 2394484, BFS took 	0.007092	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	2.861300	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,069,921	 
25.000000	: iteration 10: start=  565854, BFS took 	2.876306	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,012,167	 
25.000000	: iteration 11: start=  221315, BFS took 	2.878532	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,003,652	 
25.000000	: iteration 12: start=  950518, BFS took 	2.916571	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,860,138	 
25.000000	: iteration 13: start=  446425, BFS took 	0.006126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.006320	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.005873	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	2.924511	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,830,652	 
25.000000	: iteration 17: start=  950965, BFS took 	0.006554	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.006931	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	2.888634	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,965,170	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.006787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 21: start= 1004718, BFS took 	2.915044	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,865,828	 
25.000000	: iteration 22: start=  750848, BFS took 	2.906852	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,896,449	 
25.000000	: iteration 23: start= 1642323, BFS took 	2.868286	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,042,959	 
25.000000	: iteration 24: start= 1257228, BFS took 	2.889924	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,960,276	 
25.000000	: iteration 25: start=  490027, BFS took 	0.006205	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 26: start= 1062860, BFS took 	0.006152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 27: start= 2104657, BFS took 	2.848556	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,119,445	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	25.000000	: 	2.84855604171752930e+00
  firstquartile_C++SR_PythonFilter_Mattime	25.000000	: 	2.87300819158554077e+00
         median_C++SR_PythonFilter_Mattime	25.000000	: 	2.89724636077880859e+00
  thirdquartile_C++SR_PythonFilter_Mattime	25.000000	: 	2.91729992628097534e+00
            max_C++SR_PythonFilter_Mattime	25.000000	: 	2.93179798126220703e+00
           mean_C++SR_PythonFilter_Mattime	25.000000	: 	2.89550533890724182e+00
         stddev_C++SR_PythonFilter_Mattime	25.000000	: 	2.59837823241469736e-02
          total_C++SR_PythonFilter_Mattime	25.000000	: 	4.632809e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16743650000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16743650000000000e+07
         median_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16743650000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16743650000000000e+07
            max_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16743660000000000e+07
           mean_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16743651250000000e+07
         stddev_C++SR_PythonFilter_Matnedge	25.000000	: 	3.41565025531986588e-01
          total_C++SR_PythonFilter_Matnedge	25.000000	: 	5.067898e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.08037338187822383e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.08574254309755713e+07
         median_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.09326456526102163e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.10248132928373367e+07
            max_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.11194459705633968e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.09391492738967501e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.18248845829682032e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.38883754492456152e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.38892587204845739e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.38904800872320950e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.38919564875767916e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.38934464738112030e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.38905859641934629e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.90661377993490166e+00
Total runtime for cpm on 25% is	302.918412	s.
--Generating starting verts
Generated starting verts in 139.533442s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	75.981934	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,667,276	, TEPS=	416,867	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.012705	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	75.570388	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,676,356	, TEPS=	419,137	 
25.000000	: iteration  4: start= 2235138, BFS took 	75.469581	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,678,595	, TEPS=	419,697	 
25.000000	: iteration  5: start=     274, BFS took 	77.577777	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	1,632,979	, TEPS=	408,291	 
25.000000	: iteration  6: start=  307086, BFS took 	75.203799	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	1,684,527	, TEPS=	421,180	 
25.000000	: iteration  7: start=  724625, BFS took 	0.013126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	304	, TEPS=	0	 (result discarded)
25.000000	: iteration  8: start= 2394484, BFS took 	0.012202	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	75.273586	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,682,965	, TEPS=	420,789	 
25.000000	: iteration 10: start=  565854, BFS took 	74.889902	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,691,588	, TEPS=	422,945	 
25.000000	: iteration 11: start=  221315, BFS took 	75.229236	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,683,958	, TEPS=	421,037	 
25.000000	: iteration 12: start=  950518, BFS took 	75.204150	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,684,519	, TEPS=	421,178	 
25.000000	: iteration 13: start=  446425, BFS took 	0.012430	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	80	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.014500	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	68	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.011227	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	89	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	75.495249	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,678,024	, TEPS=	419,554	 
25.000000	: iteration 17: start=  950965, BFS took 	0.011763	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	85	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.011865	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	84	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	75.665166	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,674,256	, TEPS=	418,612	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.011735	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	340	, TEPS=	0	 (result discarded)
25.000000	: iteration 21: start= 1004718, BFS took 	75.443791	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,679,169	, TEPS=	419,840	 
25.000000	: iteration 22: start=  750848, BFS took 	75.251481	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,683,460	, TEPS=	420,913	 
25.000000	: iteration 23: start= 1642323, BFS took 	75.158114	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,685,551	, TEPS=	421,436	 
25.000000	: iteration 24: start= 1257228, BFS took 	75.276348	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,682,904	, TEPS=	420,774	 
25.000000	: iteration 25: start=  490027, BFS took 	0.010610	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	565	, TEPS=	0	 (result discarded)
25.000000	: iteration 26: start= 1062860, BFS took 	0.011868	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	421	, TEPS=	0	 (result discarded)
25.000000	: iteration 27: start= 2104657, BFS took 	75.181328	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,685,031	, TEPS=	421,306	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	25.000000	: 	7.48899021148681641e+01
  firstquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	7.52038868069648743e+01
         median_C++SR_PythonFilter_OTFtime	25.000000	: 	7.52749670743942261e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	7.55516033172607422e+01
            max_C++SR_PythonFilter_OTFtime	25.000000	: 	7.75777769088745117e+01
           mean_C++SR_PythonFilter_OTFtime	25.000000	: 	7.54919894337654114e+01
         stddev_C++SR_PythonFilter_OTFtime	25.000000	: 	6.10301006440883476e-01
          total_C++SR_PythonFilter_OTFtime	25.000000	: 	1.207872e+03

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
         median_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
            max_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16743660000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16743651250000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.41565025531986588e-01
          total_C++SR_PythonFilter_OTFnedge	25.000000	: 	5.067898e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	4.08291746194348729e+05
  firstquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	4.19241544672120363e+05
         median_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	4.20782183529323316e+05
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	4.21179902994015487e+05
            max_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	4.22945739085317531e+05
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	4.19572531656202278e+05
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.23086958923887408e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.63297900568620325e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.67677318473381619e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.68293503094382631e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.68452570577492053e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.69158825719508040e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.67809697695309157e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	8.92245359472552650e+02
Total runtime for cpo on 25% is	1370.928846	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	2.072592	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 144.170128s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	14.877418	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,515,111	, TEPS=	2,129,022	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.012547	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	79	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	14.777647	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,572,601	, TEPS=	2,143,397	 
25.000000	: iteration  4: start= 2235138, BFS took 	14.658489	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,642,287	, TEPS=	2,160,820	 
25.000000	: iteration  5: start=     274, BFS took 	14.594952	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	8,679,910	, TEPS=	2,170,227	 
25.000000	: iteration  6: start=  307086, BFS took 	14.397894	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	8,798,709	, TEPS=	2,199,930	 
25.000000	: iteration  7: start=  724625, BFS took 	0.010478	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	381	, TEPS=	0	 (result discarded)
25.000000	: iteration  8: start= 2394484, BFS took 	0.010422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	287	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	14.477365	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,750,409	, TEPS=	2,187,854	 
25.000000	: iteration 10: start=  565854, BFS took 	14.335862	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,836,781	, TEPS=	2,209,449	 
25.000000	: iteration 11: start=  221315, BFS took 	14.317883	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,847,877	, TEPS=	2,212,224	 
25.000000	: iteration 12: start=  950518, BFS took 	14.524795	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,721,835	, TEPS=	2,180,709	 
25.000000	: iteration 13: start=  446425, BFS took 	0.011517	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	86	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.012718	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	78	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.010009	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	99	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	14.529728	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,718,874	, TEPS=	2,179,969	 
25.000000	: iteration 17: start=  950965, BFS took 	0.010350	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	96	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.010439	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	95	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	14.616082	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,667,362	, TEPS=	2,167,089	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.010279	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	389	, TEPS=	0	 (result discarded)
25.000000	: iteration 21: start= 1004718, BFS took 	14.496001	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,739,160	, TEPS=	2,185,041	 
25.000000	: iteration 22: start=  750848, BFS took 	14.463442	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,758,833	, TEPS=	2,189,960	 
25.000000	: iteration 23: start= 1642323, BFS took 	14.520501	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,724,415	, TEPS=	2,181,354	 
25.000000	: iteration 24: start= 1257228, BFS took 	14.517038	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,726,496	, TEPS=	2,181,875	 
25.000000	: iteration 25: start=  490027, BFS took 	0.009375	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	639	, TEPS=	0	 (result discarded)
25.000000	: iteration 26: start= 1062860, BFS took 	0.009787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	510	, TEPS=	0	 (result discarded)
25.000000	: iteration 27: start= 2104657, BFS took 	14.346153	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	8,830,442	, TEPS=	2,207,864	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.43178830146789551e+01
  firstquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.44142808914184570e+01
         median_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.45187693834304810e+01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.46107994318008423e+01
            max_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.48774180412292480e+01
           mean_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.45282030999660492e+01
         stddev_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.53338780843007783e-01
          total_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.324512e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743660000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16743651250000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.41565025531986588e-01
          total_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	5.067898e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.12902298720261687e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.16787437458959594e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.18161502631583437e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.19743797997837560e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.21222403951246571e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.18019839802491339e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.10413445232154891e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.51511187283494696e+06
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.67049950325667299e+06
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.72545581903064623e+06
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.78874024557300098e+06
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.84787778124198876e+06
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.71978994083233550e+06
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.41557030180287802e+03
Total runtime for pso on 25% is	402.061273	s.
--Generating starting verts
Generated starting verts in 142.182392s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	85.535771	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,481,051	, TEPS=	370,305	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.010740	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	93	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	84.916840	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,491,846	, TEPS=	373,004	 
25.000000	: iteration  4: start= 2235138, BFS took 	85.133365	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,488,052	, TEPS=	372,055	 
25.000000	: iteration  5: start=     274, BFS took 	84.547025	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	1,498,371	, TEPS=	374,636	 
25.000000	: iteration  6: start=  307086, BFS took 	84.301161	s, covered 	31674366	 edges, discovered 	1623956	 verts, TEPS incl. filtered edges=	1,502,741	, TEPS=	375,728	 
25.000000	: iteration  7: start=  724625, BFS took 	0.011847	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	337	, TEPS=	0	 (result discarded)
25.000000	: iteration  8: start= 2394484, BFS took 	0.010816	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	277	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	87.349688	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,450,295	, TEPS=	362,615	 
25.000000	: iteration 10: start=  565854, BFS took 	84.190295	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,504,720	, TEPS=	376,223	 
25.000000	: iteration 11: start=  221315, BFS took 	84.659281	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,496,385	, TEPS=	374,139	 
25.000000	: iteration 12: start=  950518, BFS took 	84.780295	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,494,249	, TEPS=	373,605	 
25.000000	: iteration 13: start=  446425, BFS took 	0.011266	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.012917	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	77	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.010306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	97	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	84.795080	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,493,988	, TEPS=	373,540	 
25.000000	: iteration 17: start=  950965, BFS took 	0.010635	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	94	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.010380	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	96	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	84.396416	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,501,045	, TEPS=	375,304	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.010132	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	394	, TEPS=	0	 (result discarded)
25.000000	: iteration 21: start= 1004718, BFS took 	84.657221	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,496,421	, TEPS=	374,148	 
25.000000	: iteration 22: start=  750848, BFS took 	84.473654	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,499,673	, TEPS=	374,961	 
25.000000	: iteration 23: start= 1642323, BFS took 	84.387181	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,501,209	, TEPS=	375,345	 
25.000000	: iteration 24: start= 1257228, BFS took 	84.403516	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,500,919	, TEPS=	375,273	 
25.000000	: iteration 25: start=  490027, BFS took 	0.009403	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	638	, TEPS=	0	 (result discarded)
25.000000	: iteration 26: start= 1062860, BFS took 	0.009859	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	507	, TEPS=	0	 (result discarded)
25.000000	: iteration 27: start= 2104657, BFS took 	84.506588	s, covered 	31674365	 edges, discovered 	1623955	 verts, TEPS incl. filtered edges=	1,499,088	, TEPS=	374,815	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	25.000000	: 	8.41902949810028076e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	8.43981911540031433e+01
         median_PythonSR_PythonFilter_OTFtime	25.000000	: 	8.46021230220794678e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	8.48864001035690308e+01
            max_PythonSR_PythonFilter_OTFtime	25.000000	: 	8.73496878147125244e+01
           mean_PythonSR_PythonFilter_OTFtime	25.000000	: 	8.48145861029624939e+01
         stddev_PythonSR_PythonFilter_OTFtime	25.000000	: 	7.55950396639690769e-01
          total_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.357033e+03

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16743650000000000e+07
            max_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16743660000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16743651250000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.41565025531986588e-01
          total_PythonSR_PythonFilter_OTFnedge	25.000000	: 	5.067898e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.62615663460505311e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.73138420162617520e+05
         median_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.74392246946987114e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.75296728625733231e+05
            max_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.76223470973075833e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.73454220315037644e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.83257810874958437e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.45029572708630213e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.49238190984135098e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.49739662796628918e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.50101415013654088e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.50472069290867168e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.49364496214200207e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.32947075145604117e+02
Total runtime for ppo on 25% is	1522.560650	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	0.074884	s.
--Generating starting verts
Generated starting verts in 146.432676s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	12.929408	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,923,747	, TEPS=	9,923,747	 
100.000000	: iteration  2: start= 2390036, BFS took 	13.417681	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,562,619	, TEPS=	9,562,619	 
100.000000	: iteration  3: start= 1726462, BFS took 	13.405101	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,571,593	, TEPS=	9,571,593	 
100.000000	: iteration  4: start= 2235138, BFS took 	13.347106	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,613,183	, TEPS=	9,613,183	 
100.000000	: iteration  5: start=     274, BFS took 	13.261596	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,675,169	, TEPS=	9,675,169	 
100.000000	: iteration  6: start=  307086, BFS took 	14.044481	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,135,843	, TEPS=	9,135,843	 
100.000000	: iteration  7: start=  724625, BFS took 	14.184749	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,045,502	, TEPS=	9,045,502	 
100.000000	: iteration  8: start= 2394484, BFS took 	13.880782	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,243,584	, TEPS=	9,243,584	 
100.000000	: iteration  9: start=  351742, BFS took 	13.058751	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,825,456	, TEPS=	9,825,456	 
100.000000	: iteration 10: start=  565854, BFS took 	14.059949	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,125,792	, TEPS=	9,125,792	 
100.000000	: iteration 11: start=  221315, BFS took 	13.488686	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,512,282	, TEPS=	9,512,282	 
100.000000	: iteration 12: start=  950518, BFS took 	13.356583	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,606,363	, TEPS=	9,606,363	 
100.000000	: iteration 13: start=  446425, BFS took 	12.895460	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,949,872	, TEPS=	9,949,872	 
100.000000	: iteration 14: start=  929738, BFS took 	14.216553	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,025,266	, TEPS=	9,025,266	 
100.000000	: iteration 15: start=  828234, BFS took 	14.029706	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,145,464	, TEPS=	9,145,464	 
100.000000	: iteration 16: start= 1605236, BFS took 	13.163417	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,747,331	, TEPS=	9,747,331	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.28954601287841797e+01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.31879616379737854e+01
         median_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.34113910198211670e+01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.40407872796058655e+01
            max_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.42165529727935791e+01
           mean_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.35462505370378494e+01
         stddev_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	4.54563068533334724e-01
          total_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	2.167400e+02

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.02526683124560490e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.13824902397970296e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.56710694910916500e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.72929069128532894e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.94987249145155214e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.47185965955544077e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.03365392409238993e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.02526683124560490e+06
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.13824902397970296e+06
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.56710694910916500e+06
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.72929069128532894e+06
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.94987249145155214e+06
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.47185965955544077e+06
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.03365392409238993e+04
Total runtime for sso on 100% is	376.863323	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	3.072863	s.
--Generating starting verts
Generated starting verts in 146.367759s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	13.628635	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,414,602	, TEPS=	9,414,602	 
100.000000	: iteration  2: start= 2390036, BFS took 	14.217626	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,024,585	, TEPS=	9,024,585	 
100.000000	: iteration  3: start= 1726462, BFS took 	14.155383	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,064,268	, TEPS=	9,064,268	 
100.000000	: iteration  4: start= 2235138, BFS took 	14.076368	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,115,148	, TEPS=	9,115,148	 
100.000000	: iteration  5: start=     274, BFS took 	13.842841	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,268,919	, TEPS=	9,268,919	 
100.000000	: iteration  6: start=  307086, BFS took 	14.667551	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,747,757	, TEPS=	8,747,757	 
100.000000	: iteration  7: start=  724625, BFS took 	14.872961	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,626,942	, TEPS=	8,626,942	 
100.000000	: iteration  8: start= 2394484, BFS took 	14.453916	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,877,053	, TEPS=	8,877,053	 
100.000000	: iteration  9: start=  351742, BFS took 	13.459243	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,533,090	, TEPS=	9,533,090	 
100.000000	: iteration 10: start=  565854, BFS took 	14.728358	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,711,642	, TEPS=	8,711,642	 
100.000000	: iteration 11: start=  221315, BFS took 	14.181947	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,047,289	, TEPS=	9,047,289	 
100.000000	: iteration 12: start=  950518, BFS took 	14.035479	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,141,703	, TEPS=	9,141,703	 
100.000000	: iteration 13: start=  446425, BFS took 	13.473534	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,522,979	, TEPS=	9,522,979	 
100.000000	: iteration 14: start=  929738, BFS took 	14.912757	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,603,920	, TEPS=	8,603,920	 
100.000000	: iteration 15: start=  828234, BFS took 	14.765889	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,689,499	, TEPS=	8,689,499	 
100.000000	: iteration 16: start= 1605236, BFS took 	13.855192	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,260,657	, TEPS=	9,260,657	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.34592428207397461e+01
  firstquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.38459289073944092e+01
         median_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.41686649322509766e+01
  thirdquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.47131562829017639e+01
            max_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.49127571582794189e+01
           mean_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.42079799920320511e+01
         stddev_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.85572959766886803e-01
          total_C++SR_SejitsFilter_OTFtime	100.000000	: 	2.273277e+02

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	8.60392096767729707e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	8.72067103068225086e+06
         median_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.05577888717389852e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.26685410513032787e+06
            max_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.53309080673439614e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.03071260460362397e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.17269131578014712e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	8.60392096767729707e+06
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	8.72067103068225086e+06
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.05577888717389852e+06
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.26685410513032787e+06
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.53309080673439614e+06
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	9.03071260460362397e+06
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.17269131578014712e+04
Total runtime for cso on 100% is	390.390076	s.
--Materializing the filter
Materialized 100.000000 in	230.762106	s.
100.000000	: 	128309684	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
1 filter(s) remove 0 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 44.684332s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	10.360049	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,384,901	 
100.000000	: iteration  2: start= 2390036, BFS took 	10.431787	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,299,732	 
100.000000	: iteration  3: start= 1726462, BFS took 	10.797504	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,883,133	 
100.000000	: iteration  4: start= 2235138, BFS took 	10.712503	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,977,423	 
100.000000	: iteration  5: start=     274, BFS took 	10.279704	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,481,700	 
100.000000	: iteration  6: start=  307086, BFS took 	11.159244	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,497,927	 
100.000000	: iteration  7: start=  724625, BFS took 	11.309401	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,345,268	 
100.000000	: iteration  8: start= 2394484, BFS took 	11.241970	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,413,318	 
100.000000	: iteration  9: start=  351742, BFS took 	10.296715	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,461,079	 
100.000000	: iteration 10: start=  565854, BFS took 	11.379375	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,275,503	 
100.000000	: iteration 11: start=  221315, BFS took 	10.674601	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,019,951	 
100.000000	: iteration 12: start=  950518, BFS took 	10.793241	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,887,827	 
100.000000	: iteration 13: start=  446425, BFS took 	10.431567	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,299,991	 
100.000000	: iteration 14: start=  929738, BFS took 	11.491310	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,165,670	 
100.000000	: iteration 15: start=  828234, BFS took 	11.223364	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	11,432,239	 
100.000000	: iteration 16: start= 1605236, BFS took 	10.649864	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	12,047,870	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	100.000000	: 	1.02797040939331055e+01
  firstquartile_C++SR_PythonFilter_Mattime	100.000000	: 	1.04316219091415405e+01
         median_C++SR_PythonFilter_Mattime	100.000000	: 	1.07528719902038574e+01
  thirdquartile_C++SR_PythonFilter_Mattime	100.000000	: 	1.12373185753822327e+01
            max_C++SR_PythonFilter_Mattime	100.000000	: 	1.14913101196289062e+01
           mean_C++SR_PythonFilter_Mattime	100.000000	: 	1.08270124346017838e+01
         stddev_C++SR_PythonFilter_Mattime	100.000000	: 	4.16324249444328609e-01
          total_C++SR_PythonFilter_Mattime	100.000000	: 	1.732322e+02

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_Matnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_Matnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.11656706384444442e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.14180486338311508e+07
         median_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.19326253092297874e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.22999266200630441e+07
            max_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.24817001372369416e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.18507468957865983e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.99372258869182187e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.29644477613802184e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.30200368857158930e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.31263893790148664e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.31971478459545528e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.32306756163977087e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.31100841222936753e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	8.02121999784821753e+01
Total runtime for cpm on 100% is	460.706877	s.
--Generating starting verts
Generated starting verts in 145.289017s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	87.467444	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,466,925	, TEPS=	1,466,925	 
100.000000	: iteration  2: start= 2390036, BFS took 	86.314082	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,486,526	, TEPS=	1,486,526	 
100.000000	: iteration  3: start= 1726462, BFS took 	85.980161	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,492,299	, TEPS=	1,492,299	 
100.000000	: iteration  4: start= 2235138, BFS took 	85.500805	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,500,666	, TEPS=	1,500,666	 
100.000000	: iteration  5: start=     274, BFS took 	85.684653	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,497,446	, TEPS=	1,497,446	 
100.000000	: iteration  6: start=  307086, BFS took 	87.461726	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,467,020	, TEPS=	1,467,020	 
100.000000	: iteration  7: start=  724625, BFS took 	87.404055	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,467,988	, TEPS=	1,467,988	 
100.000000	: iteration  8: start= 2394484, BFS took 	86.997212	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,474,853	, TEPS=	1,474,853	 
100.000000	: iteration  9: start=  351742, BFS took 	84.629889	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,516,109	, TEPS=	1,516,109	 
100.000000	: iteration 10: start=  565854, BFS took 	87.049480	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,473,968	, TEPS=	1,473,968	 
100.000000	: iteration 11: start=  221315, BFS took 	86.652420	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,480,722	, TEPS=	1,480,722	 
100.000000	: iteration 12: start=  950518, BFS took 	85.411399	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,502,237	, TEPS=	1,502,237	 
100.000000	: iteration 13: start=  446425, BFS took 	85.310511	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,504,013	, TEPS=	1,504,013	 
100.000000	: iteration 14: start=  929738, BFS took 	88.175675	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,455,142	, TEPS=	1,455,142	 
100.000000	: iteration 15: start=  828234, BFS took 	88.069810	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,456,891	, TEPS=	1,456,891	 
100.000000	: iteration 16: start= 1605236, BFS took 	86.174718	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	1,488,930	, TEPS=	1,488,930	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	100.000000	: 	8.46298890113830566e+01
  firstquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	8.55467669367790222e+01
         median_C++SR_PythonFilter_OTFtime	100.000000	: 	8.64832510948181152e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	8.74473083615303040e+01
            max_C++SR_PythonFilter_OTFtime	100.000000	: 	8.81756751537322998e+01
           mean_C++SR_PythonFilter_OTFtime	100.000000	: 	8.65177525281906128e+01
         stddev_C++SR_PythonFilter_OTFtime	100.000000	: 	1.05479058346057641e+00
          total_C++SR_PythonFilter_OTFtime	100.000000	: 	1.384284e+03

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.45514263175527239e+06
  firstquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.46726293663175660e+06
         median_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.48362455528936349e+06
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.49986141602726094e+06
            max_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.51610956245897990e+06
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.48302724297181121e+06
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	2.15736304178415958e+03

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.45514263175527239e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.46726293663175660e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.48362455528936349e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.49986141602726094e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.51610956245897990e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.48302724297181121e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	2.15736304178415958e+03
Total runtime for cpo on 100% is	1543.236956	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	3.075941	s.
--Generating starting verts
Generated starting verts in 147.609455s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	56.177222	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,283,989	, TEPS=	2,283,989	 
100.000000	: iteration  2: start= 2390036, BFS took 	57.235984	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,241,739	, TEPS=	2,241,739	 
100.000000	: iteration  3: start= 1726462, BFS took 	57.038958	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,249,483	, TEPS=	2,249,483	 
100.000000	: iteration  4: start= 2235138, BFS took 	57.045383	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,249,229	, TEPS=	2,249,229	 
100.000000	: iteration  5: start=     274, BFS took 	56.423738	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,274,010	, TEPS=	2,274,010	 
100.000000	: iteration  6: start=  307086, BFS took 	57.994552	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,212,417	, TEPS=	2,212,417	 
100.000000	: iteration  7: start=  724625, BFS took 	58.027986	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,211,143	, TEPS=	2,211,143	 
100.000000	: iteration  8: start= 2394484, BFS took 	57.720321	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,222,929	, TEPS=	2,222,929	 
100.000000	: iteration  9: start=  351742, BFS took 	56.911423	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,254,524	, TEPS=	2,254,524	 
100.000000	: iteration 10: start=  565854, BFS took 	58.236656	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,203,220	, TEPS=	2,203,220	 
100.000000	: iteration 11: start=  221315, BFS took 	57.387401	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,235,824	, TEPS=	2,235,824	 
100.000000	: iteration 12: start=  950518, BFS took 	56.877496	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,255,869	, TEPS=	2,255,869	 
100.000000	: iteration 13: start=  446425, BFS took 	56.109780	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,286,734	, TEPS=	2,286,734	 
100.000000	: iteration 14: start=  929738, BFS took 	58.297517	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,200,920	, TEPS=	2,200,920	 
100.000000	: iteration 15: start=  828234, BFS took 	57.974005	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,213,202	, TEPS=	2,213,202	 
100.000000	: iteration 16: start= 1605236, BFS took 	56.555304	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,268,720	, TEPS=	2,268,720	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	100.000000	: 	5.61097800731658936e+01
  firstquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	5.66358518600463867e+01
         median_PythonSR_SejitsFilter_OTFtime	100.000000	: 	5.71406835317611694e+01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	5.79894151687622070e+01
            max_PythonSR_SejitsFilter_OTFtime	100.000000	: 	5.82975168228149414e+01
           mean_PythonSR_SejitsFilter_OTFtime	100.000000	: 	5.72508578449487686e+01
         stddev_PythonSR_SejitsFilter_OTFtime	100.000000	: 	7.28052951544411187e-01
          total_PythonSR_SejitsFilter_OTFtime	100.000000	: 	9.160137e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.20092022769975243e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.21261391665079538e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.24548488006958365e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.26550773338075075e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.28673475163668441e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.24115740496839769e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.97792905834644671e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.20092022769975243e+06
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.21261391665079538e+06
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.24548488006958365e+06
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.26550773338075075e+06
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.28673475163668441e+06
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.24115740496839769e+06
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.97792905834644671e+03
Total runtime for pso on 100% is	1080.375390	s.
--Generating starting verts
Generated starting verts in 147.131347s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	132.306786	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	969,777	, TEPS=	969,777	 
100.000000	: iteration  2: start= 2390036, BFS took 	133.665145	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	959,922	, TEPS=	959,922	 
100.000000	: iteration  3: start= 1726462, BFS took 	132.960312	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	965,011	, TEPS=	965,011	 
100.000000	: iteration  4: start= 2235138, BFS took 	132.480501	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	968,506	, TEPS=	968,506	 
100.000000	: iteration  5: start=     274, BFS took 	133.168682	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	963,501	, TEPS=	963,501	 
100.000000	: iteration  6: start=  307086, BFS took 	137.840554	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	930,844	, TEPS=	930,844	 
100.000000	: iteration  7: start=  724625, BFS took 	137.404345	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	933,800	, TEPS=	933,800	 
100.000000	: iteration  8: start= 2394484, BFS took 	133.700604	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	959,667	, TEPS=	959,667	 
100.000000	: iteration  9: start=  351742, BFS took 	132.616909	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	967,509	, TEPS=	967,509	 
100.000000	: iteration 10: start=  565854, BFS took 	134.868896	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	951,354	, TEPS=	951,354	 
100.000000	: iteration 11: start=  221315, BFS took 	133.990655	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	957,590	, TEPS=	957,590	 
100.000000	: iteration 12: start=  950518, BFS took 	133.487798	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	961,197	, TEPS=	961,197	 
100.000000	: iteration 13: start=  446425, BFS took 	132.505928	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	968,320	, TEPS=	968,320	 
100.000000	: iteration 14: start=  929738, BFS took 	136.157763	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	942,349	, TEPS=	942,349	 
100.000000	: iteration 15: start=  828234, BFS took 	135.176058	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	949,193	, TEPS=	949,193	 
100.000000	: iteration 16: start= 1605236, BFS took 	132.694220	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	966,946	, TEPS=	966,946	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.32306786060333252e+02
  firstquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.32636236727237701e+02
         median_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.33576471447944641e+02
  thirdquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.35099267363548279e+02
            max_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.37840553998947144e+02
           mean_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.34064072221517563e+02
         stddev_PythonSR_PythonFilter_OTFtime	100.000000	: 	1.75746254268457824e+00
          total_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.145025e+03

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.30844952937290422e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.49733562635416514e+05
         median_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.60560188127284753e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.67369063968900125e+05
            max_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.69777800675243954e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.57066139151681564e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	8.36335966726115089e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.30844952937290422e+05
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.49733562635416514e+05
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.60560188127284753e+05
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.67369063968900125e+05
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.69777800675243954e+05
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	9.57066139151681564e+05
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	8.36335966726115089e+02
Total runtime for ppo on 100% is	2305.779690	s.
Total runtime for everything is		17779.300050
