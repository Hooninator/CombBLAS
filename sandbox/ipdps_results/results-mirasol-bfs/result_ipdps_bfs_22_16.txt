--Generating a plain RMAT graph of scale 22
graph_generation:               2.846494 s
Generated renamed edge lists
Generation took 2.84688 seconds
Warning: Using smaller indices for the matrix than DistEdgeList
Local matrices are 1048576-by-1048576
Duplicates removed (or summed): 2953347 and self-loops removed: 0
Created Sparse Matrix (with int32 local indices and values)
Calculated degrees in 0.102332 seconds
Converted to Boolean and removed 675 loops
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Reductions done
Intersection of colsums and rowsums found
Found (and permuted) non-isolated vertices
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Dropped isolated vertices from input
As a whole: 2396784 rows and 2396784 columns and 64154842 nonzeros
Symmetricized
As a whole: 2396784 rows and 2396784 columns and 128309684 nonzeros
Generated graph in 12.007906s: 	2396784	 vertices and 	128309684	 edges.
--Converting binary RMAT to twitter object
Converted in 90.259574s. G has 2396784 vertices and 128309684 edges.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--calculating degrees on original graph
Calculated in 10.314475s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	0.039088	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 35.009368s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.372102	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	279,243,396	, TEPS=	2,787,936	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.005799	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.005456	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.005602	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	357	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.005065	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	987	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.005594	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	357	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.004953	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,873	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.005766	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	173	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.005484	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,094	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.005707	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,752	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.005227	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	19,705	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.005181	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,720	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.005700	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	526	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.004867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,465	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.281571	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	369,025,317	, TEPS=	3,684,308	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.285413	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	364,057,955	, TEPS=	3,634,714	 
1.000000	: iteration 17: start=  950965, BFS took 	0.005037	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	595	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.005486	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	182	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004964	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	805	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.005236	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	572	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.287737	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	361,117,825	, TEPS=	3,605,363	 
1.000000	: iteration 22: start=  750848, BFS took 	0.004876	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,357	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.005258	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,472	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004739	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	211	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.005876	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.005100	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,490	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.005377	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,487	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.282050	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	368,398,631	, TEPS=	3,678,051	 
1.000000	: iteration 29: start=   65642, BFS took 	0.005150	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	388	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.290645	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	357,504,627	, TEPS=	3,569,290	 
1.000000	: iteration 31: start= 1606965, BFS took 	0.005232	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,924	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.005511	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	544	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.005286	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	378	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.284311	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	365,469,442	, TEPS=	3,648,809	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.005011	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	199	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.282507	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	367,802,936	, TEPS=	3,672,104	 
1.000000	: iteration 37: start=  336477, BFS took 	0.005520	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	362	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.010546	s, covered 	2	 edges, discovered 	3	 verts, TEPS incl. filtered edges=	48,928	, TEPS=	189	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.005737	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	174	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.005096	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,962	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.283376	s, covered 	1037397	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	366,675,332	, TEPS=	3,660,850	 
1.000000	: iteration 42: start= 1716026, BFS took 	0.005398	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.005753	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	695	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.005045	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.004896	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005363	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	372	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.005354	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	560	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.004666	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.005394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,668	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.005256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	570	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.005212	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	383	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.005032	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,589	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.005278	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	189	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.005210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	191	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.005202	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.004718	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	423	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.289679	s, covered 	1037398	 edges, discovered 	338943	 verts, TEPS incl. filtered edges=	358,697,803	, TEPS=	3,581,197	 
1.000000	: iteration 58: start=  141993, BFS took 	0.005238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	381	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.005389	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	927	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.005306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,450	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.005334	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	187	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.005092	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	196	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.005116	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,541	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.284314	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	365,465,035	, TEPS=	3,648,763	 
1.000000	: iteration 65: start= 2295854, BFS took 	0.005617	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	534	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.005121	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,733	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004933	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	608	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.005860	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,778	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.005337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	187	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004728	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,979	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004460	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	448	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.005379	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	743	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.005297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	566	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.005043	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.004938	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	810	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.005125	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	390	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.005170	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,160	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.004980	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004820	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,672	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.007618	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	16,671	, TEPS=	131	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.272295	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	381,596,877	, TEPS=	3,809,823	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.005170	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	773	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.004837	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,687	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.004831	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,656	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.004318	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,242	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.004613	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,951	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.279818	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	371,337,303	, TEPS=	3,707,391	 
1.000000	: iteration 88: start=  532384, BFS took 	0.005511	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	362	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.004996	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	400	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004821	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	207	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.005244	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	762	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.004764	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	839	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.005264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	189	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.005441	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	367	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.273778	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	379,529,755	, TEPS=	3,789,183	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.005276	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	758	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.004881	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.005379	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,487	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.005198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	384	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.277213	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	374,827,068	, TEPS=	3,742,232	 
1.000000	: iteration 101: start=   46418, BFS took 	0.004994	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	400	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.004995	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	800	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.005158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	193	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.273768	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	379,543,696	, TEPS=	3,789,325	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.72294998168945312e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.77864158153533936e-01
         median_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.82941460609436035e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.87155926227569580e-01
            max_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	3.72101783752441406e-01
           mean_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.87536039948463440e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.32041595785934425e-02
          total_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.600577e+00

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
         median_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739550000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739600000000000e+06
            max_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739800000000000e+06
           mean_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739568750000000e+06
         stddev_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	8.73212459828649035e-01
          total_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.659833e+07

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.78793611129307980e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.61270113045888534e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.66647730896807881e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.73352225801406382e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.80982392984078266e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.60788059600656899e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.27492757154578139e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.79243396664631665e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.61852857967351675e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.67239134053496957e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.73954627158761263e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.81596877279144883e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.61370095750753939e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.27697655350523023e+06
Total runtime for sso on 1% is	62.247652	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	13.065604	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 36.672926s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.324937	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	319,775,859	, TEPS=	3,192,607	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.005863	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.005397	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.005502	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	363	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.005383	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	928	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.005946	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	336	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.004940	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,894	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.005680	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	176	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006284	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	954	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.006615	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,511	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.005594	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,412	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.005192	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,704	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.006823	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	439	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.005070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,366	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.315442	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	329,401,073	, TEPS=	3,288,704	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.315811	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	329,016,119	, TEPS=	3,284,861	 
1.000000	: iteration 17: start=  950965, BFS took 	0.005129	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	584	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.005603	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004949	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	808	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.005198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	577	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.319142	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	325,581,989	, TEPS=	3,250,577	 
1.000000	: iteration 22: start=  750848, BFS took 	0.004845	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,398	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.005374	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,419	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004767	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	209	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.007056	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	141	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.005281	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,301	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.005450	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,467	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.316133	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	328,680,889	, TEPS=	3,281,514	 
1.000000	: iteration 29: start=   65642, BFS took 	0.005433	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	368	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.322846	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	321,846,675	, TEPS=	3,213,284	 
1.000000	: iteration 31: start= 1606965, BFS took 	0.005183	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,981	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.005563	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	539	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.005148	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	388	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.316368	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	328,436,764	, TEPS=	3,279,078	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.005031	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.310517	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	334,625,346	, TEPS=	3,340,863	 
1.000000	: iteration 37: start=  336477, BFS took 	0.006188	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	323	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.010594	s, covered 	2	 edges, discovered 	3	 verts, TEPS incl. filtered edges=	48,707	, TEPS=	188	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006282	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	159	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004874	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,051	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.314054	s, covered 	1037397	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	330,857,040	, TEPS=	3,303,243	 
1.000000	: iteration 42: start= 1716026, BFS took 	0.005324	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	187	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.005604	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	713	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.004896	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.004973	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	201	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005772	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	346	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.005467	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	548	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.004750	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	210	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.005449	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,651	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.005132	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	584	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.004999	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	400	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.004861	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,645	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.005647	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.004851	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	206	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.005272	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	189	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.005062	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	395	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.323113	s, covered 	1037398	 edges, discovered 	338943	 verts, TEPS incl. filtered edges=	321,581,769	, TEPS=	3,210,635	 
1.000000	: iteration 58: start=  141993, BFS took 	0.005650	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	353	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.005383	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	928	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.005251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,475	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.005805	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.005062	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	197	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.005142	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,528	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.315309	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	329,539,807	, TEPS=	3,290,089	 
1.000000	: iteration 65: start= 2295854, BFS took 	0.005669	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	529	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.005129	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,729	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004939	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	607	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.006402	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,373	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.005438	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004782	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,900	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004550	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	439	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.006163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	649	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.005390	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	556	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.005061	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	197	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.005022	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	796	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.005130	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	389	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.005294	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,133	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.005375	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004952	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,174	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.007827	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	16,225	, TEPS=	127	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.311903	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	333,138,575	, TEPS=	3,326,021	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.005361	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	746	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.005204	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,498	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.004815	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,661	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.004448	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,147	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.004743	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,897	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.318977	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	325,750,516	, TEPS=	3,252,257	 
1.000000	: iteration 88: start=  532384, BFS took 	0.006784	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	294	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.005749	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	347	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.005693	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	175	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.005238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	763	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.008983	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	445	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.005845	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.006512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	307	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.319460	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	325,257,968	, TEPS=	3,247,340	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.005677	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	704	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.005032	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.006786	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,178	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.006794	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	294	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.320655	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	324,045,619	, TEPS=	3,235,236	 
1.000000	: iteration 101: start=   46418, BFS took 	0.005773	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	346	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.006394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	625	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.005017	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	199	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.318133	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	326,614,777	, TEPS=	3,260,888	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.10517072677612305e-01
  firstquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.15342247486114502e-01
         median_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.17250490188598633e-01
  thirdquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.20356309413909912e-01
            max_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.24936866760253906e-01
           mean_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.17674979567527771e-01
         stddev_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.00813571570293042e-03
          total_C++SR_SejitsFilter_OTFtime	1.000000	: 	5.082800e+00

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
  firstquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
         median_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03739550000000000e+06
  thirdquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03739600000000000e+06
            max_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03739800000000000e+06
           mean_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03739568750000000e+06
         stddev_C++SR_SejitsFilter_OTFnedge	1.000000	: 	8.73212459828649035e-01
          total_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.659833e+07

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.19260787593368161e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.23826215371741354e+06
         median_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.26998399495257996e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.28974326389505714e+06
            max_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.34086300329467934e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.26558828186128195e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.90524450300928129e+03

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.19775859957020581e+08
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.24348706837456644e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.27525770840957165e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.29505124298441589e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.34625346374687433e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.27085643996703565e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.91321300984168774e+05
Total runtime for cso on 1% is	76.741969	s.
--Materializing the filter
Materialized 1.000000 in	54.780580	s.
1.000000	: 	1280895	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 1280895 elements.
1 filter(s) remove 127028789 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 0.488885s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.059701	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,376,466	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.001454	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.001420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.001293	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.001331	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.001305	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.001364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.001370	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.001318	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.001250	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.001281	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.001248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.001251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.001216	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.057748	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,964,221	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.058482	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,738,726	 
1.000000	: iteration 17: start=  950965, BFS took 	0.001409	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.001295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.001303	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.001203	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.058834	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,632,570	 
1.000000	: iteration 22: start=  750848, BFS took 	0.001386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.001384	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.001243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.001312	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.001312	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.001351	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.057386	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,077,517	 
1.000000	: iteration 29: start=   65642, BFS took 	0.001319	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.058416	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,758,725	 
1.000000	: iteration 31: start= 1606965, BFS took 	0.001426	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.001301	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.001338	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.057340	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,091,966	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.001387	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.057305	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,103,089	 
1.000000	: iteration 37: start=  336477, BFS took 	0.001345	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.002312	s, covered 	2	 edges, discovered 	3	 verts, TEPS incl. filtered edges=	0	, TEPS=	865	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.001279	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.001230	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.057591	s, covered 	1037397	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,013,191	 
1.000000	: iteration 42: start= 1716026, BFS took 	0.001428	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.001376	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.001176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.001348	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.001295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.001270	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.001235	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.001243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.001251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.001197	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.001215	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.001304	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.001171	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.001220	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.001226	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.058361	s, covered 	1037398	 edges, discovered 	338943	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,775,518	 
1.000000	: iteration 58: start=  141993, BFS took 	0.001372	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.001299	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.001368	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.001317	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.001233	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.001288	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.057159	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,149,302	 
1.000000	: iteration 65: start= 2295854, BFS took 	0.001347	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.001406	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.001253	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.001280	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.001269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.001213	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.001158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.001253	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.001304	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.001233	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.001168	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.001267	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.001273	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.001217	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.001189	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.002061	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	485	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.056875	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,239,932	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.001318	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.001246	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.001278	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.001337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.001231	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.058265	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	17,804,780	 
1.000000	: iteration 88: start=  532384, BFS took 	0.001310	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.001218	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.001196	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.001269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.001195	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.001280	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.001245	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.057043	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,186,244	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.001299	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.001308	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.001286	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.001235	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.057226	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,127,978	 
1.000000	: iteration 101: start=   46418, BFS took 	0.001383	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.001302	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.001297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.057150	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,152,121	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	1.000000	: 	5.68749904632568359e-02
  firstquartile_C++SR_PythonFilter_Mattime	1.000000	: 	5.71757555007934570e-02
         median_C++SR_PythonFilter_Mattime	1.000000	: 	5.74884414672851562e-02
  thirdquartile_C++SR_PythonFilter_Mattime	1.000000	: 	5.84023594856262207e-02
            max_C++SR_PythonFilter_Mattime	1.000000	: 	5.97012042999267578e-02
           mean_C++SR_PythonFilter_Mattime	1.000000	: 	5.78051358461380005e-02
         stddev_C++SR_PythonFilter_Mattime	1.000000	: 	7.88462397284655342e-04
          total_C++SR_PythonFilter_Mattime	1.000000	: 	9.248822e-01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03739500000000000e+06
  firstquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03739500000000000e+06
         median_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03739550000000000e+06
  thirdquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03739600000000000e+06
            max_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03739800000000000e+06
           mean_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03739568750000000e+06
         stddev_C++SR_PythonFilter_Matnedge	1.000000	: 	8.73212459828649035e-01
          total_C++SR_PythonFilter_Matnedge	1.000000	: 	1.659833e+07

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.73764668931690678e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.77629240076878816e+07
         median_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.80453543510381542e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.81439713340604305e+07
            max_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.82399327287833616e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.79464276877954751e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.92521433509471135e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.89166790612708755e+04
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.89171308244613938e+04
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.89174423654363272e+04
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.89175319974282647e+04
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.89176539894485832e+04
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.89173274177226340e+04
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.17710725603462232e-02
Total runtime for cpm on 1% is	75.536867	s.
--Generating starting verts
Generated starting verts in 35.063556s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	15.404398	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,745,279	, TEPS=	67,344	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.062903	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	15	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.005928	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	168	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.005686	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	351	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.005584	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	895	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.006382	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	313	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.005699	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,843	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.006011	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	166	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006590	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	910	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.006775	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,475	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.005492	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,754	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.005611	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,128	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.005839	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	513	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.005431	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,209	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	15.620271	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,652,053	, TEPS=	66,413	 
1.000000	: iteration 16: start= 1605236, BFS took 	15.807844	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,573,121	, TEPS=	65,625	 
1.000000	: iteration 17: start=  950965, BFS took 	0.005702	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	526	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.005977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004899	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	816	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.005256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	570	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	15.398908	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,747,681	, TEPS=	67,368	 
1.000000	: iteration 22: start=  750848, BFS took 	0.005173	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,992	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.005238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,481	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004587	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	218	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.005543	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	180	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.005703	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,909	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.005602	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,428	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	15.222503	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,825,873	, TEPS=	68,148	 
1.000000	: iteration 29: start=   65642, BFS took 	0.005077	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	15.388626	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,752,187	, TEPS=	67,413	 
1.000000	: iteration 31: start= 1606965, BFS took 	0.005188	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,975	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.005766	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	520	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.005567	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	359	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	15.708167	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,614,833	, TEPS=	66,041	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.010191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	98	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	21.757532	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	4,775,674	, TEPS=	47,679	 
1.000000	: iteration 37: start=  336477, BFS took 	0.005905	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	338	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.012003	s, covered 	2	 edges, discovered 	3	 verts, TEPS incl. filtered edges=	42,989	, TEPS=	166	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006130	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	163	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.005517	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,812	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	16.067969	s, covered 	1037397	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,466,715	, TEPS=	64,563	 
1.000000	: iteration 42: start= 1716026, BFS took 	0.005431	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.005721	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	699	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.004971	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	201	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.005132	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	194	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005534	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	361	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.005591	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	536	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.004899	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.005444	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,653	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.005153	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	582	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.005162	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	387	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.004909	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,629	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.005228	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	191	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.004958	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	201	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.005032	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.004867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	410	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	15.320180	s, covered 	1037398	 edges, discovered 	338943	 verts, TEPS incl. filtered edges=	6,782,377	, TEPS=	67,714	 
1.000000	: iteration 58: start=  141993, BFS took 	0.005085	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.005365	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	931	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.005420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,398	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.005451	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.005211	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	191	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.005404	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,405	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	15.382650	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,754,810	, TEPS=	67,439	 
1.000000	: iteration 65: start= 2295854, BFS took 	0.005643	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	531	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.005479	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,555	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.005179	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	579	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.005833	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,800	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.005621	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004929	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,694	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004866	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	411	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.005376	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	744	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.005649	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	531	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.005184	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.005172	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	773	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.005335	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	374	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.005058	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,186	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.004889	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004888	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,412	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.008378	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	15,158	, TEPS=	119	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	15.532112	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,689,812	, TEPS=	66,790	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.005461	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	732	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.005512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,358	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.004935	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,621	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.004614	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,034	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.005110	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,761	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	15.341850	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,772,774	, TEPS=	67,618	 
1.000000	: iteration 88: start=  532384, BFS took 	0.005674	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	352	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.005089	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	204	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.005566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	718	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.005364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	745	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.005632	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.005328	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	375	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	15.331033	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,777,552	, TEPS=	67,666	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.005486	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	729	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.004920	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	203	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.005426	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,474	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.005248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	381	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	15.682336	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,625,727	, TEPS=	66,150	 
1.000000	: iteration 101: start=   46418, BFS took 	0.005062	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	395	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.005045	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	792	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.005550	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	180	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	15.314250	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,784,981	, TEPS=	67,740	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	1.000000	: 	1.52225029468536377e+01
  firstquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	1.53337371945381165e+01
         median_C++SR_PythonFilter_OTFtime	1.000000	: 	1.54016529321670532e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	1.57017093300819397e+01
            max_C++SR_PythonFilter_OTFtime	1.000000	: 	2.17575318813323975e+01
           mean_C++SR_PythonFilter_OTFtime	1.000000	: 	1.58925392776727676e+01
         stddev_C++SR_PythonFilter_OTFtime	1.000000	: 	1.57995113227835304e+00
          total_C++SR_PythonFilter_OTFtime	1.000000	: 	2.542806e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
  firstquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
         median_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03739550000000000e+06
  thirdquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03739600000000000e+06
            max_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03739800000000000e+06
           mean_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03739568750000000e+06
         stddev_C++SR_PythonFilter_OTFnedge	1.000000	: 	8.73212459828649035e-01
          total_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.659833e+07

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	4.76798106356019052e+04
  firstquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.60690027269278071e+04
         median_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.73561492083165213e+04
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.76544200281000521e+04
            max_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.81487797126306832e+04
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.52756399554371601e+04
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.83467248299049487e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	4.77567416960332636e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.61755725609173253e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.74648021574789658e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.77635799892292637e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.82587373198549263e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	6.53809450853865687e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.83764290049549963e+04
Total runtime for cpo on 1% is	312.375590	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	5.054630	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 44.924767s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.399505	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	260,089,185	, TEPS=	2,596,702	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.005650	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	176	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.005566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	179	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.005302	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	377	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.005413	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	923	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.005851	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	341	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.005507	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,081	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.005546	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	180	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006065	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	989	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.006708	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,490	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.005585	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,442	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.005942	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,731	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.006394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	469	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.005751	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,086	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.387831	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	267,917,959	, TEPS=	2,674,863	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.390557	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	266,047,899	, TEPS=	2,656,193	 
1.000000	: iteration 17: start=  950965, BFS took 	0.006297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	476	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.005449	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	801	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.004988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	601	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.392261	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	264,892,287	, TEPS=	2,644,657	 
1.000000	: iteration 22: start=  750848, BFS took 	0.005542	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,593	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.005335	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,436	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004726	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	211	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.006553	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	152	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.006880	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,069	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.005198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,539	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.384028	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	270,571,141	, TEPS=	2,701,352	 
1.000000	: iteration 29: start=   65642, BFS took 	0.005358	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	373	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.395153	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	262,953,695	, TEPS=	2,625,303	 
1.000000	: iteration 31: start= 1606965, BFS took 	0.005295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,854	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.005333	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	562	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.006147	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	325	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.390647	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	265,986,769	, TEPS=	2,655,584	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.005241	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	190	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.385816	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	269,317,127	, TEPS=	2,688,832	 
1.000000	: iteration 37: start=  336477, BFS took 	0.006211	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	322	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.010830	s, covered 	2	 edges, discovered 	3	 verts, TEPS incl. filtered edges=	47,645	, TEPS=	184	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006483	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	154	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004882	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,048	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.385280	s, covered 	1037397	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	269,692,196	, TEPS=	2,692,580	 
1.000000	: iteration 42: start= 1716026, BFS took 	0.005463	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.005419	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	738	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.004751	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	210	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.005626	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005819	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	343	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.005417	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	553	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.004649	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	215	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.005284	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,703	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.004875	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	615	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.004832	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	413	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.004701	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,701	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.005734	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	174	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.005003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	199	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.005394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.005215	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	383	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.394649	s, covered 	1037398	 edges, discovered 	338943	 verts, TEPS incl. filtered edges=	263,290,243	, TEPS=	2,628,659	 
1.000000	: iteration 58: start=  141993, BFS took 	0.005604	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	356	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.005193	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	962	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.005310	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,448	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.005875	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.004993	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.006115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,125	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.385041	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	269,859,270	, TEPS=	2,694,245	 
1.000000	: iteration 65: start= 2295854, BFS took 	0.005463	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	549	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.006264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,235	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004984	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	601	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.006414	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,365	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.005202	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.005229	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,310	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.005337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	374	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.005998	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	666	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.005368	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	558	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.004943	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	202	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.004761	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	840	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.005943	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	336	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.005323	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,127	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.005300	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	188	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004824	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,657	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.008034	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	15,807	, TEPS=	124	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.383102	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	271,225,253	, TEPS=	2,707,885	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.005388	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	742	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.005338	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,435	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.005362	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,491	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.005134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,726	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.006179	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,456	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.391727	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	265,253,328	, TEPS=	2,648,260	 
1.000000	: iteration 88: start=  532384, BFS took 	0.006619	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	302	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.005526	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	361	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.005455	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.006563	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	609	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.006377	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	627	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.005279	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	189	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.005966	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	335	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.384518	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	270,226,381	, TEPS=	2,697,910	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.005343	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	748	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.005413	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.006009	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,331	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.005771	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	346	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.387641	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	268,049,127	, TEPS=	2,676,173	 
1.000000	: iteration 101: start=   46418, BFS took 	0.005297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	377	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.005651	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	707	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.005297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	188	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	0.378654	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	274,411,198	, TEPS=	2,739,693	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.78654003143310547e-01
  firstquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.84648680686950684e-01
         median_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.87736082077026367e-01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.92127513885498047e-01
            max_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.99505138397216797e-01
           mean_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.88525620102882385e-01
         stddev_PythonSR_SejitsFilter_OTFtime	1.000000	: 	5.34935264643041867e-03
          total_PythonSR_SejitsFilter_OTFtime	1.000000	: 	6.216410e+00

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
  firstquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
         median_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739550000000000e+06
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739600000000000e+06
            max_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739800000000000e+06
           mean_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03739568750000000e+06
         stddev_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	8.73212459828649035e-01
          total_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.659833e+07

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.59670252092864504e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.64555807500424050e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.67551850365658477e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.69699445641612168e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.73969373461865401e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.67008309632049361e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.52279723326737985e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.60089185377856672e+08
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.64982547701395333e+08
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.67983543514071167e+08
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.70134603920858026e+08
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.74411198977009058e+08
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.67439056599603415e+08
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.52999777181761630e+05
Total runtime for pso on 1% is	77.954131	s.
--Generating starting verts
Generated starting verts in 35.006897s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	15.262468	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,808,005	, TEPS=	67,970	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.005565	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	179	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.005592	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.005287	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	378	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.005414	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	923	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.005898	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	339	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.005803	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,720	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.005665	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	176	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006234	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	962	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.006369	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,570	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.005884	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	17,504	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.005961	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,710	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.006124	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	489	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.005728	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,094	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	15.289578	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,795,928	, TEPS=	67,849	 
1.000000	: iteration 16: start= 1605236, BFS took 	15.331100	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,777,523	, TEPS=	67,666	 
1.000000	: iteration 17: start=  950965, BFS took 	0.006183	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	485	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.005554	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	180	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.005141	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	778	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.005069	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	591	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	15.181066	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,844,507	, TEPS=	68,334	 
1.000000	: iteration 22: start=  750848, BFS took 	0.005471	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,666	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.005357	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,426	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004715	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	212	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.006153	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	162	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.006037	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,638	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.005242	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,526	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	14.987733	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,932,795	, TEPS=	69,216	 
1.000000	: iteration 29: start=   65642, BFS took 	0.005492	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	364	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	15.187464	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,841,622	, TEPS=	68,306	 
1.000000	: iteration 31: start= 1606965, BFS took 	0.005351	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,793	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.005301	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	565	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.005882	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	340	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	15.222190	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,826,016	, TEPS=	68,150	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.005121	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	195	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	15.187990	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,841,384	, TEPS=	68,303	 
1.000000	: iteration 37: start=  336477, BFS took 	0.006087	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	328	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.011317	s, covered 	2	 edges, discovered 	3	 verts, TEPS incl. filtered edges=	45,595	, TEPS=	176	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006298	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	158	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,012	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	15.210027	s, covered 	1037397	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,831,479	, TEPS=	68,204	 
1.000000	: iteration 42: start= 1716026, BFS took 	0.005368	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.005392	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	741	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.004670	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.005640	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005823	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	343	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.005407	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	554	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.004665	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.005181	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,737	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.004821	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	622	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.004871	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	410	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.004627	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,728	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.005658	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	176	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.005008	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	199	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.005396	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.005190	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	385	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	15.161941	s, covered 	1037398	 edges, discovered 	338943	 verts, TEPS incl. filtered edges=	6,853,162	, TEPS=	68,421	 
1.000000	: iteration 58: start=  141993, BFS took 	0.005598	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	357	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.005221	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	957	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.005661	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,296	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.005820	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.005037	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.006061	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,144	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	15.189881	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,840,533	, TEPS=	68,295	 
1.000000	: iteration 65: start= 2295854, BFS took 	0.005514	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	544	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.006295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,223	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.005019	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	597	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.006574	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,259	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.005180	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	193	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.005380	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,133	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.005276	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	379	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.005777	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	692	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.005337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	562	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.004904	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	203	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.004969	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	804	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.005874	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	340	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.005292	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,133	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.005306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	188	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004850	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,557	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.008166	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	15,552	, TEPS=	122	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	15.301093	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,790,816	, TEPS=	67,798	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.005466	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	731	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.005430	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,394	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.005410	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,478	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.005173	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,706	, TEPS=	0	 (result discarded)
1.000000	: iteration 86: start= 1069288, BFS took 	0.005918	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,520	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	15.118761	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,872,711	, TEPS=	68,616	 
1.000000	: iteration 88: start=  532384, BFS took 	0.006388	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	313	, TEPS=	0	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.005773	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	346	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.005420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.006302	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	634	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.006234	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	641	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.005369	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.005713	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	350	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	15.184903	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,842,775	, TEPS=	68,317	 
1.000000	: iteration 96: start= 2165183, BFS took 	0.005464	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	732	, TEPS=	0	 (result discarded)
1.000000	: iteration 97: start=  689735, BFS took 	0.005429	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	184	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.006126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,305	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.005848	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	342	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	15.405629	s, covered 	1037395	 edges, discovered 	338941	 verts, TEPS incl. filtered edges=	6,744,734	, TEPS=	67,338	 
1.000000	: iteration 101: start=   46418, BFS took 	0.005224	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	382	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.005441	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	735	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.005374	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	186	, TEPS=	0	 (result discarded)
1.000000	: iteration 104: start= 2197518, BFS took 	15.135323	s, covered 	1037396	 edges, discovered 	338942	 verts, TEPS incl. filtered edges=	6,865,192	, TEPS=	68,541	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.49877331256866455e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.51667222976684570e+01
         median_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.51889355182647705e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.52828006744384766e+01
            max_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.54056291580200195e+01
           mean_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.52098217308521271e+01
         stddev_PythonSR_PythonFilter_OTFtime	1.000000	: 	9.62445303397052865e-02
          total_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.433571e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
  firstquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03739500000000000e+06
         median_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03739550000000000e+06
  thirdquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03739600000000000e+06
            max_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03739800000000000e+06
           mean_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03739568750000000e+06
         stddev_PythonSR_PythonFilter_OTFnedge	1.000000	: 	8.73212459828649035e-01
          total_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.659833e+07

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.73386973916571442e+04
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.78799576757431641e+04
         median_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.82993882469894888e+04
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.83996046876107575e+04
            max_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.92162711532450630e+04
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.82056440498906013e+04
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.63913954817111716e+01

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.74473479363918677e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.79894787293436937e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.84095888600919675e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.85099842241223529e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.93279511508780159e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.83156756649954151e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	6.64996658434651090e+03
Total runtime for ppo on 1% is	300.200437	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	0.044228	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 38.269227s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.737735	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	168,105,851	, TEPS=	16,837,106	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.005620	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	0.729746	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	169,946,199	, TEPS=	17,021,432	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.005350	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	373	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.758838	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	163,430,911	, TEPS=	16,368,874	 
10.000000	: iteration  6: start=  307086, BFS took 	0.005156	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	387	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	0.744765	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	166,519,061	, TEPS=	16,678,176	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.005580	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	179	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005348	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,121	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.730706	s, covered 	12421327	 edges, discovered 	1157104	 verts, TEPS incl. filtered edges=	169,722,984	, TEPS=	16,999,076	 
10.000000	: iteration 11: start=  221315, BFS took 	0.730588	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	169,750,369	, TEPS=	17,001,817	 
10.000000	: iteration 12: start=  950518, BFS took 	0.726421	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	170,724,078	, TEPS=	17,099,341	 
10.000000	: iteration 13: start=  446425, BFS took 	0.005358	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	559	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.750643	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	165,215,120	, TEPS=	16,547,576	 
10.000000	: iteration 15: start=  828234, BFS took 	0.744456	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	166,588,176	, TEPS=	16,685,099	 
10.000000	: iteration 16: start= 1605236, BFS took 	0.756403	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	163,957,018	, TEPS=	16,421,568	 
10.000000	: iteration 17: start=  950965, BFS took 	0.755980	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	164,048,753	, TEPS=	16,430,757	 
10.000000	: iteration 18: start= 2242285, BFS took 	0.005401	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	0.004845	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	825	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.004983	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	602	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	0.740327	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	167,517,321	, TEPS=	16,778,160	 
10.000000	: iteration 22: start=  750848, BFS took 	0.762046	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	162,742,929	, TEPS=	16,299,967	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.005495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,365	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004634	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	215	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.005609	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.730278	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	169,822,414	, TEPS=	17,009,033	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.005158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,551	, TEPS=	0	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.753141	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	164,667,158	, TEPS=	16,492,694	 
10.000000	: iteration 29: start=   65642, BFS took 	0.005058	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	395	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.747924	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	165,815,779	, TEPS=	16,607,737	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.26421117782592773e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.30617463588714600e-01
         median_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.44610548019409180e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.55270242691040039e-01
            max_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.62045860290527344e-01
           mean_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.43749797344207764e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.18205622568991822e-02
          total_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.190000e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213270000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213233750000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.02469507659595993e+00
          total_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.987412e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.62999678198690210e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.64462413833061326e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.66816378948375769e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.70011321651557609e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.70993418224351779e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.67009435361470319e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.59410658542275669e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.62742929871331811e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.64203354554192990e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.66553618759249628e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.69743523165765524e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.70724078587589532e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.66746368344622344e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.59002222701193852e+05
Total runtime for sso on 10% is	56.463125	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	13.064849	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 37.143779s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.836355	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	148,283,420	, TEPS=	14,851,735	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.005617	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	0.819876	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	151,263,829	, TEPS=	15,150,247	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.005354	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	373	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.856926	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	144,723,793	, TEPS=	14,495,211	 
10.000000	: iteration  6: start=  307086, BFS took 	0.005458	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	366	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	0.835780	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	148,385,406	, TEPS=	14,861,950	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.005594	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	178	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005711	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,050	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.824609	s, covered 	12421327	 edges, discovered 	1157104	 verts, TEPS incl. filtered edges=	150,395,633	, TEPS=	15,063,292	 
10.000000	: iteration 11: start=  221315, BFS took 	0.825973	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	150,147,288	, TEPS=	15,038,416	 
10.000000	: iteration 12: start=  950518, BFS took 	0.820510	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	151,146,912	, TEPS=	15,138,536	 
10.000000	: iteration 13: start=  446425, BFS took 	0.005619	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	533	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.844587	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	146,838,115	, TEPS=	14,706,977	 
10.000000	: iteration 15: start=  828234, BFS took 	0.844474	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	146,857,765	, TEPS=	14,708,945	 
10.000000	: iteration 16: start= 1605236, BFS took 	0.857538	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	144,620,464	, TEPS=	14,484,862	 
10.000000	: iteration 17: start=  950965, BFS took 	0.856366	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	144,818,402	, TEPS=	14,504,688	 
10.000000	: iteration 18: start= 2242285, BFS took 	0.005583	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	179	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	0.005082	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	787	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.005364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	559	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	0.829159	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	149,570,314	, TEPS=	14,980,628	 
10.000000	: iteration 22: start=  750848, BFS took 	0.857526	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	144,622,555	, TEPS=	14,485,071	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.005270	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,466	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004655	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.005736	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	174	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	1.152991	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	107,561,611	, TEPS=	10,773,130	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.006168	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,297	, TEPS=	0	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.997571	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	124,319,549	, TEPS=	12,451,567	 
10.000000	: iteration 29: start=   65642, BFS took 	0.005650	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	353	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.964486	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	128,584,127	, TEPS=	12,878,698	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.19875955581665039e-01
  firstquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.26769351959228516e-01
         median_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.44530582427978516e-01
  thirdquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.57535123825073242e-01
            max_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.15299105644226074e+00
           mean_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.76545459032058716e-01
         stddev_C++SR_SejitsFilter_OTFtime	10.000000	: 	8.92550138805998650e-02
          total_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.402473e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
            max_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24213270000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24213233750000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.02469507659595993e+00
          total_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.987412e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.07731303990578987e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.44849145596287008e+07
         median_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.47079612201779634e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.50239694956900124e+07
            max_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.51502479313320406e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.41707691560276430e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	6.10769657851046213e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.07561611434069723e+08
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.44620987011790872e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.46847940306235760e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.50003045468942225e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.51263829797295511e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.41484479003425062e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	6.09807096169499680e+05
Total runtime for cso on 10% is	71.135747	s.
--Materializing the filter
Materialized 10.000000 in	54.979474	s.
10.000000	: 	12852021	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 12852021 elements.
1 filter(s) remove 115457663 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 1.399446s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.349749	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,514,978	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.002781	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	0.359859	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,517,197	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.002555	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.366225	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	33,917,189	 
10.000000	: iteration  6: start=  307086, BFS took 	0.002353	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	0.348841	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,607,386	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.002656	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.002365	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.358523	s, covered 	12421327	 edges, discovered 	1157104	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,645,840	 
10.000000	: iteration 11: start=  221315, BFS took 	0.349541	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,536,102	 
10.000000	: iteration 12: start=  950518, BFS took 	0.349641	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,525,949	 
10.000000	: iteration 13: start=  446425, BFS took 	0.002374	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.353608	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,127,368	 
10.000000	: iteration 15: start=  828234, BFS took 	0.363286	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,191,580	 
10.000000	: iteration 16: start= 1605236, BFS took 	0.355760	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,914,885	 
10.000000	: iteration 17: start=  950965, BFS took 	0.361833	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,328,877	 
10.000000	: iteration 18: start= 2242285, BFS took 	0.002621	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	0.002191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.002491	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	0.348166	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,676,439	 
10.000000	: iteration 22: start=  750848, BFS took 	0.359599	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,542,163	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.002334	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.001756	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.002451	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.350027	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,486,748	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.002552	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	0.352726	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,215,195	 
10.000000	: iteration 29: start=   65642, BFS took 	0.002230	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.363654	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,156,968	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	10.000000	: 	3.48165988922119141e-01
  firstquartile_C++SR_PythonFilter_Mattime	10.000000	: 	3.49667847156524658e-01
         median_C++SR_PythonFilter_Mattime	10.000000	: 	3.54684114456176758e-01
  thirdquartile_C++SR_PythonFilter_Mattime	10.000000	: 	3.61339569091796875e-01
            max_C++SR_PythonFilter_Mattime	10.000000	: 	3.66225004196166992e-01
           mean_C++SR_PythonFilter_Mattime	10.000000	: 	3.55689898133277893e-01
         stddev_C++SR_PythonFilter_Mattime	10.000000	: 	6.15870626185991820e-03
          total_C++SR_PythonFilter_Mattime	10.000000	: 	5.691038e+00

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24213230000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24213230000000000e+07
         median_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24213230000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24213230000000000e+07
            max_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24213270000000000e+07
           mean_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24213233750000000e+07
         stddev_C++SR_PythonFilter_Matnedge	10.000000	: 	1.02469507659595993e+00
          total_C++SR_PythonFilter_Matnedge	10.000000	: 	1.987412e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.39171898632747829e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.43759575988183394e+07
         median_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.50211267087503970e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.55232067322462648e+07
            max_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.56764399603044242e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.49217772109705508e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.92466259357326344e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.24431585620897560e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.24451416354102403e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.24478394770356186e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.24498746413348970e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.24504840388832003e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.24474321295887290e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.03432961281080660e+00
Total runtime for cpm on 10% is	71.648477	s.
--Generating starting verts
Generated starting verts in 35.537439s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	19.063251	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,505,583	, TEPS=	651,584	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.005625	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	177	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	18.759345	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	6,610,975	, TEPS=	662,140	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.005487	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	364	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	18.805556	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,594,730	, TEPS=	660,513	 
10.000000	: iteration  6: start=  307086, BFS took 	0.004859	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	411	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	18.775508	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,605,284	, TEPS=	661,570	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.005968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005056	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,186	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	18.743745	s, covered 	12421327	 edges, discovered 	1157104	 verts, TEPS incl. filtered edges=	6,616,479	, TEPS=	662,691	 
10.000000	: iteration 11: start=  221315, BFS took 	18.767791	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,608,000	, TEPS=	661,842	 
10.000000	: iteration 12: start=  950518, BFS took 	18.846425	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,580,429	, TEPS=	659,081	 
10.000000	: iteration 13: start=  446425, BFS took 	0.005134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	584	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	18.903478	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,560,569	, TEPS=	657,091	 
10.000000	: iteration 15: start=  828234, BFS took 	18.724234	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,623,372	, TEPS=	663,382	 
10.000000	: iteration 16: start= 1605236, BFS took 	18.798278	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,597,283	, TEPS=	660,769	 
10.000000	: iteration 17: start=  950965, BFS took 	18.738470	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	6,618,340	, TEPS=	662,878	 
10.000000	: iteration 18: start= 2242285, BFS took 	0.005782	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	0.004893	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	817	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.005397	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	555	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	18.928295	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,551,967	, TEPS=	656,230	 
10.000000	: iteration 22: start=  750848, BFS took 	18.925885	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,552,801	, TEPS=	656,313	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.005257	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,472	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004447	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.005326	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	187	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	18.756386	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,612,018	, TEPS=	662,245	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.005445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,469	, TEPS=	0	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	18.804989	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,594,929	, TEPS=	660,533	 
10.000000	: iteration 29: start=   65642, BFS took 	0.004753	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	420	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	18.885806	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,566,708	, TEPS=	657,706	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	10.000000	: 	1.87242338657379150e+01
  firstquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	1.87571255564689636e+01
         median_C++SR_PythonFilter_OTFtime	10.000000	: 	1.88016334772109985e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	1.88990599513053894e+01
            max_C++SR_PythonFilter_OTFtime	10.000000	: 	1.90632510185241699e+01
           mean_C++SR_PythonFilter_OTFtime	10.000000	: 	1.88267150521278381e+01
         stddev_C++SR_PythonFilter_OTFtime	10.000000	: 	9.25045588386838175e-02
          total_C++SR_PythonFilter_OTFtime	10.000000	: 	3.012274e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
         median_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
            max_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24213270000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24213233750000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.02469507659595993e+00
          total_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.987412e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.51584715950596961e+05
  firstquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.57245655038007069e+05
         median_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.60651289193368284e+05
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.62218913582003559e+05
            max_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.63382175690982840e+05
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.59771146426188177e+05
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	2.39424875043361595e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.50558374746728502e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.56210397027320042e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.59610666810906678e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.61175809988877364e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.62337251762970909e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.58731899519801605e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	2.39048463126542219e+03
Total runtime for cpo on 10% is	343.008083	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	12.068423	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 38.014018s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	1.873511	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	66,195,280	, TEPS=	6,629,971	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.006071	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	164	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	1.872007	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	66,248,461	, TEPS=	6,635,298	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.005758	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	347	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	1.910152	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	64,925,502	, TEPS=	6,502,793	 
10.000000	: iteration  6: start=  307086, BFS took 	0.005489	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	364	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	1.880111	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	65,962,901	, TEPS=	6,606,696	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.005895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	169	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005568	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,077	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	1.862852	s, covered 	12421327	 edges, discovered 	1157104	 verts, TEPS incl. filtered edges=	66,574,044	, TEPS=	6,667,908	 
10.000000	: iteration 11: start=  221315, BFS took 	1.863162	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	66,562,966	, TEPS=	6,666,797	 
10.000000	: iteration 12: start=  950518, BFS took 	1.850463	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	67,019,757	, TEPS=	6,712,549	 
10.000000	: iteration 13: start=  446425, BFS took 	0.005867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	511	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	1.881124	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	65,927,378	, TEPS=	6,603,138	 
10.000000	: iteration 15: start=  828234, BFS took 	1.869303	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	66,344,288	, TEPS=	6,644,895	 
10.000000	: iteration 16: start= 1605236, BFS took 	1.883201	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	65,854,663	, TEPS=	6,595,855	 
10.000000	: iteration 17: start=  950965, BFS took 	1.882759	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	65,870,134	, TEPS=	6,597,405	 
10.000000	: iteration 18: start= 2242285, BFS took 	0.005871	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	0.004999	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	800	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.005265	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	569	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	1.856430	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	66,804,335	, TEPS=	6,690,972	 
10.000000	: iteration 22: start=  750848, BFS took 	1.915999	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	64,727,372	, TEPS=	6,482,948	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.005450	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,385	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004753	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	210	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.005868	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	1.851548	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	66,980,482	, TEPS=	6,708,615	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.005609	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,426	, TEPS=	0	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	1.905547	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	65,082,397	, TEPS=	6,518,507	 
10.000000	: iteration 29: start=   65642, BFS took 	0.005284	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	378	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	1.898642	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	65,319,092	, TEPS=	6,542,214	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.85046291351318359e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.86292952299118042e+00
         median_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.87681090831756592e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.89478182792663574e+00
            max_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.91599893569946289e+00
           mean_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.87855066359043121e+00
         stddev_PythonSR_SejitsFilter_OTFtime	10.000000	: 	2.03736318426619503e-02
          total_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.005681e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213270000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24213233750000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.02469507659595993e+00
          total_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.987412e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.48294879948115349e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.55562456787910871e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.61833397748954967e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.66763069197806157e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.71254901100264862e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.61218438958278578e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.59093271354931312e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.47273720716998205e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.54529850060588866e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.60790913372667730e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.65712751678388789e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.70197576478564963e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.60176912336541787e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	6.58055807721845486e+04
Total runtime for pso on 10% is	86.396470	s.
--Generating starting verts
Generated starting verts in 35.317028s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	19.714691	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,290,617	, TEPS=	630,054	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.006187	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	161	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	19.616290	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	6,322,172	, TEPS=	633,214	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.005879	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	340	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	19.745328	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,280,856	, TEPS=	629,076	 
10.000000	: iteration  6: start=  307086, BFS took 	0.005574	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	358	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	19.633556	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,316,613	, TEPS=	632,657	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.005923	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	168	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005756	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,042	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	19.652159	s, covered 	12421327	 edges, discovered 	1157104	 verts, TEPS incl. filtered edges=	6,310,634	, TEPS=	632,059	 
10.000000	: iteration 11: start=  221315, BFS took 	19.666877	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,305,910	, TEPS=	631,585	 
10.000000	: iteration 12: start=  950518, BFS took 	19.700230	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,295,234	, TEPS=	630,516	 
10.000000	: iteration 13: start=  446425, BFS took 	0.005833	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	514	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	19.714010	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,290,834	, TEPS=	630,075	 
10.000000	: iteration 15: start=  828234, BFS took 	19.568027	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,337,765	, TEPS=	634,776	 
10.000000	: iteration 16: start= 1605236, BFS took 	19.651785	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,310,753	, TEPS=	632,070	 
10.000000	: iteration 17: start=  950965, BFS took 	19.617764	s, covered 	12421324	 edges, discovered 	1157103	 verts, TEPS incl. filtered edges=	6,321,697	, TEPS=	633,167	 
10.000000	: iteration 18: start= 2242285, BFS took 	0.005971	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
10.000000	: iteration 19: start= 1291427, BFS took 	0.005109	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	782	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.005518	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	543	, TEPS=	0	 (result discarded)
10.000000	: iteration 21: start= 1004718, BFS took 	19.728930	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,286,077	, TEPS=	629,599	 
10.000000	: iteration 22: start=  750848, BFS took 	19.777481	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,270,645	, TEPS=	628,053	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.005529	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,351	, TEPS=	0	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004721	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	211	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.005837	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	19.572829	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,336,211	, TEPS=	634,620	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.005654	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,414	, TEPS=	0	 (result discarded)
10.000000	: iteration 28: start=  550247, BFS took 	19.669846	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,304,959	, TEPS=	631,490	 
10.000000	: iteration 29: start=   65642, BFS took 	0.005406	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	369	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	19.720639	s, covered 	12421323	 edges, discovered 	1157102	 verts, TEPS incl. filtered edges=	6,288,719	, TEPS=	629,864	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.95680270195007324e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.96217119693756104e+01
         median_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.96683614253997803e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.97191520333290100e+01
            max_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.97774810791015625e+01
           mean_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.96719026416540146e+01
         stddev_PythonSR_PythonFilter_OTFtime	10.000000	: 	6.08252863295444673e-02
          total_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.147504e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24213230000000000e+07
            max_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24213270000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24213233750000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.02469507659595993e+00
          total_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.987412e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.28053843172442401e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.29911630628293031e+05
         median_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.31538276224151254e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.33039832482236670e+05
            max_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.34776464056462864e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.31424605980864610e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	2.22277267093728426e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.27064566533938888e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.28919427702896483e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.30543511094089225e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.32042675480266474e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.33776598307069577e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	6.30430009463166632e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	2.21927836208811141e+03
Total runtime for ppo on 10% is	356.359192	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	0.046758	s.
--Generating starting verts
Generated starting verts in 34.574951s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	1.422526	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	89,056,378	, TEPS=	22,270,136	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.005519	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	1.295527	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	97,786,482	, TEPS=	24,453,255	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.005242	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	381	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	1.317600	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	96,148,318	, TEPS=	24,043,602	 
25.000000	: iteration  6: start=  307086, BFS took 	1.295249	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	97,807,469	, TEPS=	24,458,502	 
25.000000	: iteration  7: start=  724625, BFS took 	1.397413	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	90,656,838	, TEPS=	22,670,360	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.005391	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	1.347571	s, covered 	31679853	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	94,009,919	, TEPS=	23,508,858	 
25.000000	: iteration 10: start=  565854, BFS took 	1.346078	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	94,114,184	, TEPS=	23,534,931	 
25.000000	: iteration 11: start=  221315, BFS took 	1.372509	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	92,301,780	, TEPS=	23,081,707	 
25.000000	: iteration 12: start=  950518, BFS took 	1.419890	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	89,221,707	, TEPS=	22,311,479	 
25.000000	: iteration 13: start=  446425, BFS took 	0.006126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	489	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	1.315102	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	96,330,942	, TEPS=	24,089,271	 
25.000000	: iteration 15: start=  828234, BFS took 	1.296949	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	97,679,271	, TEPS=	24,426,444	 
25.000000	: iteration 16: start= 1605236, BFS took 	1.329041	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	95,320,629	, TEPS=	23,836,624	 
25.000000	: iteration 17: start=  950965, BFS took 	1.340039	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	94,538,310	, TEPS=	23,640,991	 
25.000000	: iteration 18: start= 2242285, BFS took 	0.005143	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	194	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	0.005007	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	798	, TEPS=	0	 (result discarded)
25.000000	: iteration 20: start= 2028424, BFS took 	1.304119	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	97,142,221	, TEPS=	24,292,146	 
25.000000	: iteration 21: start= 1004718, BFS took 	1.408400	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	89,949,602	, TEPS=	22,493,503	 
25.000000	: iteration 22: start=  750848, BFS took 	1.393734	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	90,896,130	, TEPS=	22,730,199	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.29524898529052734e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.30686485767364502e+00
         median_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.34305846691131592e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.39649307727813721e+00
            max_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.42252612113952637e+00
           mean_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.35010918974876404e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	4.61405109560804258e-02
          total_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.160175e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798530000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798512500000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	5.77350269189625731e-01
          total_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	5.068776e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.22701365755045637e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.26853199567585699e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.35879612859588787e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.42414273723378554e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.44585028513989821e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.34646586258733645e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.35640309382775522e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	8.90563787317437083e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	9.07166616994176656e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	9.43262474691163301e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	9.69394020982285440e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	9.78074690184638500e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	9.38331703667282462e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.54187160564167454e+05
Total runtime for sso on 25% is	60.747401	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	13.068375	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 36.553262s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	1.558861	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	81,267,696	, TEPS=	20,322,437	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.005742	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	174	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	1.450810	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	87,320,207	, TEPS=	21,835,976	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.005610	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	356	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	1.479092	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	85,650,544	, TEPS=	21,418,446	 
25.000000	: iteration  6: start=  307086, BFS took 	1.444130	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	87,724,117	, TEPS=	21,936,980	 
25.000000	: iteration  7: start=  724625, BFS took 	1.550295	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	81,716,715	, TEPS=	20,434,722	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.005764	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	173	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	1.506410	s, covered 	31679853	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	84,097,317	, TEPS=	21,030,035	 
25.000000	: iteration 10: start=  565854, BFS took 	1.510174	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	83,887,699	, TEPS=	20,977,615	 
25.000000	: iteration 11: start=  221315, BFS took 	1.529539	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	82,825,632	, TEPS=	20,712,027	 
25.000000	: iteration 12: start=  950518, BFS took 	1.567242	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	80,833,102	, TEPS=	20,213,759	 
25.000000	: iteration 13: start=  446425, BFS took 	0.006776	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	442	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	1.468328	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	86,278,423	, TEPS=	21,575,459	 
25.000000	: iteration 15: start=  828234, BFS took 	1.440643	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	87,936,441	, TEPS=	21,990,076	 
25.000000	: iteration 16: start= 1605236, BFS took 	1.485120	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	85,302,884	, TEPS=	21,331,508	 
25.000000	: iteration 17: start=  950965, BFS took 	1.501537	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	84,370,240	, TEPS=	21,098,284	 
25.000000	: iteration 18: start= 2242285, BFS took 	0.005562	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	179	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	0.005029	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	795	, TEPS=	0	 (result discarded)
25.000000	: iteration 20: start= 2028424, BFS took 	1.464337	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	86,513,581	, TEPS=	21,634,265	 
25.000000	: iteration 21: start= 1004718, BFS took 	1.556067	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	81,413,606	, TEPS=	20,358,924	 
25.000000	: iteration 22: start=  750848, BFS took 	1.561830	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	81,113,195	, TEPS=	20,283,801	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.44064307212829590e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.46533465385437012e+00
         median_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.50397336483001709e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.55462402105331421e+00
            max_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.56724190711975098e+00
           mean_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.50465089082717896e+00
         stddev_C++SR_SejitsFilter_OTFtime	25.000000	: 	4.48355827806239324e-02
          total_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.407441e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
            max_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16798530000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16798512500000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	25.000000	: 	5.77350269189625731e-01
          total_C++SR_SejitsFilter_OTFnedge	25.000000	: 	5.068776e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.02137595071207993e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.03778743937625140e+07
         median_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.10641597023005076e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.16195636083084345e+07
            max_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.19900762464352883e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.10546190078810826e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	5.97108608907654707e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.08331020402711630e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.14893834892299324e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.42337793028988689e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.64547923536494672e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.79364413371628821e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.41956272983252704e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.38778660145157191e+05
Total runtime for cso on 25% is	78.255162	s.
--Materializing the filter
Materialized 25.000000 in	54.399789	s.
25.000000	: 	32085927	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 32085927 elements.
1 filter(s) remove 96223757 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 2.923626s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	0.924178	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,278,944	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.003616	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	0.825319	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	0	, TEPS=	38,384,976	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.003365	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.889599	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,611,389	 
25.000000	: iteration  6: start=  307086, BFS took 	0.824628	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	38,417,136	 
25.000000	: iteration  7: start=  724625, BFS took 	0.915888	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,589,225	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.003464	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	0.843272	s, covered 	31679853	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	0	, TEPS=	37,567,776	 
25.000000	: iteration 10: start=  565854, BFS took 	0.840867	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	37,675,220	 
25.000000	: iteration 11: start=  221315, BFS took 	0.916972	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,548,332	 
25.000000	: iteration 12: start=  950518, BFS took 	0.908467	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,871,766	 
25.000000	: iteration 13: start=  446425, BFS took 	0.003699	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	0.886465	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,737,290	 
25.000000	: iteration 15: start=  828234, BFS took 	0.867505	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	36,518,346	 
25.000000	: iteration 16: start= 1605236, BFS took 	0.894297	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,424,311	 
25.000000	: iteration 17: start=  950965, BFS took 	0.902729	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,093,422	 
25.000000	: iteration 18: start= 2242285, BFS took 	0.003358	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	0.003269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 20: start= 2028424, BFS took 	0.828237	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	0	, TEPS=	38,249,739	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.919067	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,469,580	 
25.000000	: iteration 22: start=  750848, BFS took 	0.891350	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,541,425	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	25.000000	: 	8.24628114700317383e-01
  firstquartile_C++SR_PythonFilter_Mattime	25.000000	: 	8.41468274593353271e-01
         median_C++SR_PythonFilter_Mattime	25.000000	: 	8.90474438667297363e-01
  thirdquartile_C++SR_PythonFilter_Mattime	25.000000	: 	9.14032638072967529e-01
            max_C++SR_PythonFilter_Mattime	25.000000	: 	9.24178123474121094e-01
           mean_C++SR_PythonFilter_Mattime	25.000000	: 	8.79927486181259155e-01
         stddev_C++SR_PythonFilter_Mattime	25.000000	: 	3.62387979368196944e-02
          total_C++SR_PythonFilter_Mattime	25.000000	: 	1.407884e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16798510000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16798510000000000e+07
         median_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16798510000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16798510000000000e+07
            max_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16798530000000000e+07
           mean_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16798512500000000e+07
         stddev_C++SR_PythonFilter_Matnedge	25.000000	: 	5.77350269189625731e-01
          total_C++SR_PythonFilter_Matnedge	25.000000	: 	5.068776e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.42789449299132898e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.46598609354450852e+07
         median_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.55764076476266980e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.76483593088809103e+07
            max_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.84171366889582053e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.60027976563476846e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.50840600760479603e+05

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.72624354196064523e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.72729385068284464e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.72973413098265883e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.73481723982664989e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.73656592513183015e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.73082736473808996e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.82187989212337484e+01
Total runtime for cpm on 25% is	79.648830	s.
--Generating starting verts
Generated starting verts in 35.996706s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	20.184452	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,276,366	, TEPS=	1,569,517	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.005752	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	173	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	19.837533	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	6,386,128	, TEPS=	1,596,965	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.005722	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	349	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	19.750600	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,414,236	, TEPS=	1,603,994	 
25.000000	: iteration  6: start=  307086, BFS took 	19.859258	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,379,141	, TEPS=	1,595,218	 
25.000000	: iteration  7: start=  724625, BFS took 	20.034197	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,323,439	, TEPS=	1,581,288	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.005817	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	171	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	19.820946	s, covered 	31679853	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	6,391,472	, TEPS=	1,598,301	 
25.000000	: iteration 10: start=  565854, BFS took 	19.740375	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,417,559	, TEPS=	1,604,825	 
25.000000	: iteration 11: start=  221315, BFS took 	19.894610	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,367,806	, TEPS=	1,592,383	 
25.000000	: iteration 12: start=  950518, BFS took 	19.889499	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,369,442	, TEPS=	1,592,792	 
25.000000	: iteration 13: start=  446425, BFS took 	0.007020	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	427	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	19.757540	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,411,983	, TEPS=	1,603,430	 
25.000000	: iteration 15: start=  828234, BFS took 	19.674718	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,438,975	, TEPS=	1,610,180	 
25.000000	: iteration 16: start= 1605236, BFS took 	19.782328	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,403,949	, TEPS=	1,601,421	 
25.000000	: iteration 17: start=  950965, BFS took 	19.789405	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,401,659	, TEPS=	1,600,849	 
25.000000	: iteration 18: start= 2242285, BFS took 	0.005714	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	175	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	0.005175	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	772	, TEPS=	0	 (result discarded)
25.000000	: iteration 20: start= 2028424, BFS took 	19.776130	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	6,405,956	, TEPS=	1,601,923	 
25.000000	: iteration 21: start= 1004718, BFS took 	19.946750	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,351,161	, TEPS=	1,588,221	 
25.000000	: iteration 22: start=  750848, BFS took 	19.856180	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	6,380,130	, TEPS=	1,595,465	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	25.000000	: 	1.96747179031372070e+01
  firstquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	1.97621874809265137e+01
         median_C++SR_PythonFilter_OTFtime	25.000000	: 	1.98292394876480103e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	1.98933324217796326e+01
            max_C++SR_PythonFilter_OTFtime	25.000000	: 	2.01844520568847656e+01
           mean_C++SR_PythonFilter_OTFtime	25.000000	: 	1.98496575653553009e+01
         stddev_C++SR_PythonFilter_OTFtime	25.000000	: 	1.25086039157227852e-01
          total_C++SR_PythonFilter_OTFtime	25.000000	: 	3.175945e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
         median_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
            max_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16798530000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16798512500000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	25.000000	: 	5.77350269189625731e-01
          total_C++SR_PythonFilter_OTFnedge	25.000000	: 	5.068776e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.56951751331759524e+06
  firstquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.59248590032352647e+06
         median_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.59763353817498661e+06
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.60305414236808335e+06
            max_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.61018069768352457e+06
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.59598981217903132e+06
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.37721202080144622e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	6.27636681159192976e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	6.36821543430344760e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	6.38880027350469865e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	6.41047692118905019e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	6.43897542133499123e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	6.38222726042564958e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.74986842714724617e+03
Total runtime for cpo on 25% is	358.153491	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a44#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
1cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	0.066077	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 50.527588s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	4.132028	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	30,659,284	, TEPS=	7,666,901	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.005742	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	174	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	4.018259	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	31,527,341	, TEPS=	7,883,974	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.005691	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	351	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	4.042758	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	31,336,287	, TEPS=	7,836,197	 
25.000000	: iteration  6: start=  307086, BFS took 	4.018583	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	31,524,801	, TEPS=	7,883,339	 
25.000000	: iteration  7: start=  724625, BFS took 	4.109718	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	30,825,723	, TEPS=	7,708,522	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.005875	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	4.079542	s, covered 	31679853	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	31,053,737	, TEPS=	7,765,541	 
25.000000	: iteration 10: start=  565854, BFS took 	4.087772	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	30,991,216	, TEPS=	7,749,906	 
25.000000	: iteration 11: start=  221315, BFS took 	4.088475	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	30,985,887	, TEPS=	7,748,574	 
25.000000	: iteration 12: start=  950518, BFS took 	4.122531	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	30,729,914	, TEPS=	7,684,563	 
25.000000	: iteration 13: start=  446425, BFS took 	0.005571	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	538	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	4.044081	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	31,326,035	, TEPS=	7,833,634	 
25.000000	: iteration 15: start=  828234, BFS took 	4.013351	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	31,565,897	, TEPS=	7,893,615	 
25.000000	: iteration 16: start= 1605236, BFS took 	4.045031	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	31,318,677	, TEPS=	7,831,794	 
25.000000	: iteration 17: start=  950965, BFS took 	4.063752	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	31,174,399	, TEPS=	7,795,714	 
25.000000	: iteration 18: start= 2242285, BFS took 	0.005503	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	0.005240	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	763	, TEPS=	0	 (result discarded)
25.000000	: iteration 20: start= 2028424, BFS took 	4.067972	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	31,142,060	, TEPS=	7,787,627	 
25.000000	: iteration 21: start= 1004718, BFS took 	4.379276	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	28,928,303	, TEPS=	7,234,038	 
25.000000	: iteration 22: start=  750848, BFS took 	4.364399	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	29,026,912	, TEPS=	7,258,697	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.01335096359252930e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.04308873414993286e+00
         median_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.07375705242156982e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.11932766437530518e+00
            max_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.37927603721618652e+00
           mean_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.10484547913074493e+00
         stddev_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.10283964395762255e-01
          total_PythonSR_SejitsFilter_OTFtime	25.000000	: 	6.567753e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798530000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16798512500000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	5.77350269189625731e-01
          total_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	5.068776e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.23403839602178056e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.69055320201420877e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.77658460709410720e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.83555685244487226e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.89361590535853710e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	7.71767205572334863e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.14681446203810956e+04

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.89283031997523941e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.07538670134843774e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.10978989048158750e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.13337242571279779e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.15658974630513228e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.08623129089168385e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.58601389743392501e+04
Total runtime for pso on 25% is	120.871534	s.
--Generating starting verts
Generated starting verts in 37.383554s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	23.221349	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,455,541	, TEPS=	1,364,255	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.005801	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	172	, TEPS=	0	 (result discarded)
25.000000	: iteration  3: start= 1726462, BFS took 	22.945203	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	5,521,198	, TEPS=	1,380,674	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.005577	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	358	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	22.848659	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,544,527	, TEPS=	1,386,508	 
25.000000	: iteration  6: start=  307086, BFS took 	22.910204	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,529,633	, TEPS=	1,382,783	 
25.000000	: iteration  7: start=  724625, BFS took 	23.086777	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,487,341	, TEPS=	1,372,207	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.005849	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	170	, TEPS=	0	 (result discarded)
25.000000	: iteration  9: start=  351742, BFS took 	22.856748	s, covered 	31679853	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	5,542,565	, TEPS=	1,386,017	 
25.000000	: iteration 10: start=  565854, BFS took 	22.838788	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,546,924	, TEPS=	1,387,107	 
25.000000	: iteration 11: start=  221315, BFS took 	22.962131	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,517,128	, TEPS=	1,379,656	 
25.000000	: iteration 12: start=  950518, BFS took 	22.989602	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,510,535	, TEPS=	1,378,007	 
25.000000	: iteration 13: start=  446425, BFS took 	0.005727	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	523	, TEPS=	0	 (result discarded)
25.000000	: iteration 14: start=  929738, BFS took 	22.950667	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,519,884	, TEPS=	1,380,345	 
25.000000	: iteration 15: start=  828234, BFS took 	22.785591	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,559,874	, TEPS=	1,390,345	 
25.000000	: iteration 16: start= 1605236, BFS took 	22.831756	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,548,632	, TEPS=	1,387,534	 
25.000000	: iteration 17: start=  950965, BFS took 	22.874593	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,538,241	, TEPS=	1,384,936	 
25.000000	: iteration 18: start= 2242285, BFS took 	0.005541	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	180	, TEPS=	0	 (result discarded)
25.000000	: iteration 19: start= 1291427, BFS took 	0.005352	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	747	, TEPS=	0	 (result discarded)
25.000000	: iteration 20: start= 2028424, BFS took 	22.738137	s, covered 	31679852	 edges, discovered 	1624796	 verts, TEPS incl. filtered edges=	5,571,477	, TEPS=	1,393,247	 
25.000000	: iteration 21: start= 1004718, BFS took 	22.979434	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,512,974	, TEPS=	1,378,617	 
25.000000	: iteration 22: start=  750848, BFS took 	22.853129	s, covered 	31679851	 edges, discovered 	1624795	 verts, TEPS incl. filtered edges=	5,543,443	, TEPS=	1,386,236	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.27381370067596436e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.28412555456161499e+01
         median_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.28923984766006470e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.29751082658767700e+01
            max_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.32213490009307861e+01
           mean_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.29170479476451874e+01
         stddev_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.18731088729763914e-01
          total_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.666728e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16798510000000000e+07
            max_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16798530000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16798512500000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	25.000000	: 	5.77350269189625731e-01
          total_PythonSR_PythonFilter_OTFnedge	25.000000	: 	5.068776e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.36425540991310077e+06
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.37887726158850081e+06
         median_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.38385980819368339e+06
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.38695756219877698e+06
            max_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.39324747628102265e+06
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.38237050957146380e+06
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.19470075913104665e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	5.45554114857504889e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	5.51401268763135187e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	5.53393746698846482e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	5.54632512132367957e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	5.57147790790154878e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	5.52798187236169074e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	2.87709772234679940e+03
Total runtime for ppo on 25% is	408.611695	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	0.052908	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 45.012789s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	3.583646	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	35,803,812	, TEPS=	35,803,812	 
100.000000	: iteration  2: start= 2390036, BFS took 	4.215896	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	30,434,381	, TEPS=	30,434,381	 
100.000000	: iteration  3: start= 1726462, BFS took 	4.251610	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	30,178,728	, TEPS=	30,178,728	 
100.000000	: iteration  4: start= 2235138, BFS took 	3.965848	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	32,353,278	, TEPS=	32,353,278	 
100.000000	: iteration  5: start=     274, BFS took 	3.900440	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	32,895,823	, TEPS=	32,895,823	 
100.000000	: iteration  6: start=  307086, BFS took 	4.230658	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	30,328,185	, TEPS=	30,328,185	 
100.000000	: iteration  7: start=  724625, BFS took 	3.553838	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	36,104,117	, TEPS=	36,104,117	 
100.000000	: iteration  8: start= 2394484, BFS took 	3.547467	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	36,168,957	, TEPS=	36,168,957	 
100.000000	: iteration  9: start=  351742, BFS took 	4.292312	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	29,892,558	, TEPS=	29,892,558	 
100.000000	: iteration 10: start=  565854, BFS took 	4.297835	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	29,854,144	, TEPS=	29,854,144	 
100.000000	: iteration 11: start=  221315, BFS took 	3.518417	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	36,467,587	, TEPS=	36,467,587	 
100.000000	: iteration 12: start=  950518, BFS took 	3.804298	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	33,727,165	, TEPS=	33,727,165	 
100.000000	: iteration 13: start=  446425, BFS took 	4.246434	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	30,215,513	, TEPS=	30,215,513	 
100.000000	: iteration 14: start=  929738, BFS took 	4.366605	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	29,383,968	, TEPS=	29,383,968	 
100.000000	: iteration 15: start=  828234, BFS took 	3.598581	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	35,655,215	, TEPS=	35,655,215	 
100.000000	: iteration 16: start= 1605236, BFS took 	3.624202	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	35,403,154	, TEPS=	35,403,154	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.51841711997985840e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.58737963438034058e+00
         median_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.93314397335052490e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	4.25031602382659912e+00
            max_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	4.36660504341125488e+00
           mean_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.93738041818141937e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.29699041714006436e-01
          total_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	6.299809e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.93839682601025440e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.01879246111351289e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.26245508831845745e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.57666634710292891e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.64675874476004466e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.25871951329667158e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.31166195151843393e+05

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.93839682601025440e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.01879246111351289e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.26245508831845745e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.57666634710292891e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.64675874476004466e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.25871951329667158e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.31166195151843393e+05
Total runtime for sso on 100% is	111.304787	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	14.073269	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 38.826736s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	3.751427	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	34,202,501	, TEPS=	34,202,501	 
100.000000	: iteration  2: start= 2390036, BFS took 	4.449096	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,839,158	, TEPS=	28,839,158	 
100.000000	: iteration  3: start= 1726462, BFS took 	4.435418	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,928,093	, TEPS=	28,928,093	 
100.000000	: iteration  4: start= 2235138, BFS took 	4.106325	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	31,246,476	, TEPS=	31,246,476	 
100.000000	: iteration  5: start=     274, BFS took 	4.056108	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	31,633,325	, TEPS=	31,633,325	 
100.000000	: iteration  6: start=  307086, BFS took 	4.459062	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,774,702	, TEPS=	28,774,702	 
100.000000	: iteration  7: start=  724625, BFS took 	3.731793	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	34,382,447	, TEPS=	34,382,447	 
100.000000	: iteration  8: start= 2394484, BFS took 	3.726164	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	34,434,388	, TEPS=	34,434,388	 
100.000000	: iteration  9: start=  351742, BFS took 	4.489293	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,580,934	, TEPS=	28,580,934	 
100.000000	: iteration 10: start=  565854, BFS took 	4.472181	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,690,294	, TEPS=	28,690,294	 
100.000000	: iteration 11: start=  221315, BFS took 	3.737106	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	34,333,569	, TEPS=	34,333,569	 
100.000000	: iteration 12: start=  950518, BFS took 	3.979320	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	32,243,745	, TEPS=	32,243,745	 
100.000000	: iteration 13: start=  446425, BFS took 	4.455246	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,799,349	, TEPS=	28,799,349	 
100.000000	: iteration 14: start=  929738, BFS took 	4.525592	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	28,351,691	, TEPS=	28,351,691	 
100.000000	: iteration 15: start=  828234, BFS took 	3.841316	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	33,402,142	, TEPS=	33,402,142	 
100.000000	: iteration 16: start= 1605236, BFS took 	3.873422	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	33,125,277	, TEPS=	33,125,277	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	100.000000	: 	3.72616410255432129e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	3.77389919757843018e+00
         median_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.08121645450592041e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.45810806751251221e+00
            max_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.52559185028076172e+00
           mean_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.13055428862571716e+00
         stddev_C++SR_SejitsFilter_OTFtime	100.000000	: 	3.27522757761822103e-01
          total_C++SR_SejitsFilter_OTFtime	100.000000	: 	6.608887e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	2.83516915013093650e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	2.87808639208312407e+07
         median_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.14399008290341832e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.40024114803691059e+07
            max_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.44343889502997249e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.10631879003071114e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	2.02743545736171538e+05

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	2.83516915013093650e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	2.87808639208312407e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.14399008290341832e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.40024114803691059e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.44343889502997249e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.10631879003071114e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	2.02743545736171538e+05
Total runtime for cso on 100% is	122.213328	s.
--Materializing the filter
Materialized 100.000000 in	55.838812	s.
100.000000	: 	128309684	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
1 filter(s) remove 0 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 10.466294s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	2.891816	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	44,369,416	 
100.000000	: iteration  2: start= 2390036, BFS took 	3.597649	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,664,454	 
100.000000	: iteration  3: start= 1726462, BFS took 	3.626701	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,378,758	 
100.000000	: iteration  4: start= 2235138, BFS took 	3.281768	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	39,097,276	 
100.000000	: iteration  5: start=     274, BFS took 	3.215434	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	39,903,845	 
100.000000	: iteration  6: start=  307086, BFS took 	3.624617	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,399,100	 
100.000000	: iteration  7: start=  724625, BFS took 	2.817864	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,533,842	 
100.000000	: iteration  8: start= 2394484, BFS took 	2.789458	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,997,535	 
100.000000	: iteration  9: start=  351742, BFS took 	3.594739	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,693,324	 
100.000000	: iteration 10: start=  565854, BFS took 	3.609152	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,550,785	 
100.000000	: iteration 11: start=  221315, BFS took 	2.757400	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	46,532,306	 
100.000000	: iteration 12: start=  950518, BFS took 	3.129591	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	40,998,384	 
100.000000	: iteration 13: start=  446425, BFS took 	3.607289	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	35,569,143	 
100.000000	: iteration 14: start=  929738, BFS took 	3.696277	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	34,712,814	 
100.000000	: iteration 15: start=  828234, BFS took 	2.842677	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,136,390	 
100.000000	: iteration 16: start= 1605236, BFS took 	2.831178	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,319,717	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	100.000000	: 	2.75740003585815430e+00
  firstquartile_C++SR_PythonFilter_Mattime	100.000000	: 	2.83405274152755737e+00
         median_C++SR_PythonFilter_Mattime	100.000000	: 	3.24860095977783203e+00
  thirdquartile_C++SR_PythonFilter_Mattime	100.000000	: 	3.60868614912033081e+00
            max_C++SR_PythonFilter_Mattime	100.000000	: 	3.69627714157104492e+00
           mean_C++SR_PythonFilter_Mattime	100.000000	: 	3.24460063874721527e+00
         stddev_C++SR_PythonFilter_Mattime	100.000000	: 	3.74620334188124127e-01
          total_C++SR_PythonFilter_Mattime	100.000000	: 	5.191361e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_Matnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_Matnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.47128148365694806e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.55553753110828772e+07
         median_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.95005607894595414e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	4.52738854819826782e+07
            max_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	4.65323066408346146e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.95451392284572646e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.95866195741843490e+05

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.15516908779240539e+06
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.15834455233573727e+06
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.17149842504703347e+06
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.18684029222951271e+06
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.18970099422920169e+06
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.17164476499577519e+06
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.19382252930646473e+03
Total runtime for cpm on 100% is	125.590571	s.
--Generating starting verts
Generated starting verts in 37.923910s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	22.432324	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,719,790	, TEPS=	5,719,790	 
100.000000	: iteration  2: start= 2390036, BFS took 	23.792607	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,392,775	, TEPS=	5,392,775	 
100.000000	: iteration  3: start= 1726462, BFS took 	23.771469	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,397,570	, TEPS=	5,397,570	 
100.000000	: iteration  4: start= 2235138, BFS took 	23.019101	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,573,987	, TEPS=	5,573,987	 
100.000000	: iteration  5: start=     274, BFS took 	22.927053	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,596,366	, TEPS=	5,596,366	 
100.000000	: iteration  6: start=  307086, BFS took 	23.634826	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,428,776	, TEPS=	5,428,776	 
100.000000	: iteration  7: start=  724625, BFS took 	22.455577	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,713,867	, TEPS=	5,713,867	 
100.000000	: iteration  8: start= 2394484, BFS took 	22.481988	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,707,154	, TEPS=	5,707,154	 
100.000000	: iteration  9: start=  351742, BFS took 	23.888781	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,371,064	, TEPS=	5,371,064	 
100.000000	: iteration 10: start=  565854, BFS took 	23.832299	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,383,793	, TEPS=	5,383,793	 
100.000000	: iteration 11: start=  221315, BFS took 	22.519176	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,697,729	, TEPS=	5,697,729	 
100.000000	: iteration 12: start=  950518, BFS took 	22.793881	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,629,062	, TEPS=	5,629,062	 
100.000000	: iteration 13: start=  446425, BFS took 	23.682355	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,417,881	, TEPS=	5,417,881	 
100.000000	: iteration 14: start=  929738, BFS took 	23.751800	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,402,040	, TEPS=	5,402,040	 
100.000000	: iteration 15: start=  828234, BFS took 	22.860453	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,612,670	, TEPS=	5,612,670	 
100.000000	: iteration 16: start= 1605236, BFS took 	22.906832	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,601,306	, TEPS=	5,601,306	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	100.000000	: 	2.24323239326477051e+01
  firstquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	2.25878522396087646e+01
         median_C++SR_PythonFilter_OTFtime	100.000000	: 	2.29730770587921143e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	2.37665516138076782e+01
            max_C++SR_PythonFilter_OTFtime	100.000000	: 	2.38887810707092285e+01
           mean_C++SR_PythonFilter_OTFtime	100.000000	: 	2.31719076037406921e+01
         stddev_C++SR_PythonFilter_OTFtime	100.000000	: 	5.69299501653558138e-01
          total_C++SR_PythonFilter_OTFtime	100.000000	: 	3.707505e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.37106450179338083e+06
  firstquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.39868814665320702e+06
         median_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.58517688548725005e+06
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.68056314067102224e+06
            max_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.71979008439968061e+06
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.53723008887222316e+06
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.17822121131812128e+04

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.37106450179338083e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.39868814665320702e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.58517688548725005e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.68056314067102224e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.71979008439968061e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	5.53723008887222316e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.17822121131812128e+04
Total runtime for cpo on 100% is	411.906930	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	13.071294	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 40.181234s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	14.421270	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,897,148	, TEPS=	8,897,148	 
100.000000	: iteration  2: start= 2390036, BFS took 	15.474048	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,291,830	, TEPS=	8,291,830	 
100.000000	: iteration  3: start= 1726462, BFS took 	15.498330	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,278,839	, TEPS=	8,278,839	 
100.000000	: iteration  4: start= 2235138, BFS took 	14.984425	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,562,770	, TEPS=	8,562,770	 
100.000000	: iteration  5: start=     274, BFS took 	14.939605	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,588,458	, TEPS=	8,588,458	 
100.000000	: iteration  6: start=  307086, BFS took 	15.488847	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,283,908	, TEPS=	8,283,908	 
100.000000	: iteration  7: start=  724625, BFS took 	14.404756	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,907,348	, TEPS=	8,907,348	 
100.000000	: iteration  8: start= 2394484, BFS took 	14.451728	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,878,397	, TEPS=	8,878,397	 
100.000000	: iteration  9: start=  351742, BFS took 	15.500769	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,277,536	, TEPS=	8,277,536	 
100.000000	: iteration 10: start=  565854, BFS took 	15.580090	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,235,394	, TEPS=	8,235,394	 
100.000000	: iteration 11: start=  221315, BFS took 	14.549235	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,818,895	, TEPS=	8,818,895	 
100.000000	: iteration 12: start=  950518, BFS took 	15.368404	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,348,829	, TEPS=	8,348,829	 
100.000000	: iteration 13: start=  446425, BFS took 	15.388713	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,337,811	, TEPS=	8,337,811	 
100.000000	: iteration 14: start=  929738, BFS took 	15.612686	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,218,200	, TEPS=	8,218,200	 
100.000000	: iteration 15: start=  828234, BFS took 	14.786439	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,677,422	, TEPS=	8,677,422	 
100.000000	: iteration 16: start= 1605236, BFS took 	14.803929	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,667,170	, TEPS=	8,667,170	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.44047558307647705e+01
  firstquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.46085360646247864e+01
         median_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.51764143705368042e+01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.54959591627120972e+01
            max_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.56126859188079834e+01
           mean_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.50783295780420303e+01
         stddev_PythonSR_SejitsFilter_OTFtime	100.000000	: 	4.57843618785233331e-01
          total_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.412533e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.21820054968454968e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.28010655325798877e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.45579977190510184e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.78352735193095915e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.90734876088405959e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.50944286208268628e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.53420525847535064e+04

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.21820054968454968e+06
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.28010655325798877e+06
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.45579977190510184e+06
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.78352735193095915e+06
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.90734876088405959e+06
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	8.50944286208268628e+06
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.53420525847535064e+04
Total runtime for pso on 100% is	297.838960	s.
--Generating starting verts
Generated starting verts in 38.033278s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	34.966626	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,669,447	, TEPS=	3,669,447	 
100.000000	: iteration  2: start= 2390036, BFS took 	36.144588	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,549,858	, TEPS=	3,549,858	 
100.000000	: iteration  3: start= 1726462, BFS took 	36.446803	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,520,423	, TEPS=	3,520,423	 
100.000000	: iteration  4: start= 2235138, BFS took 	35.692362	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,594,835	, TEPS=	3,594,835	 
100.000000	: iteration  5: start=     274, BFS took 	35.558167	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,608,402	, TEPS=	3,608,402	 
100.000000	: iteration  6: start=  307086, BFS took 	36.287774	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,535,851	, TEPS=	3,535,851	 
100.000000	: iteration  7: start=  724625, BFS took 	34.727834	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,694,678	, TEPS=	3,694,678	 
100.000000	: iteration  8: start= 2394484, BFS took 	34.919247	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,674,425	, TEPS=	3,674,425	 
100.000000	: iteration  9: start=  351742, BFS took 	36.710647	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,495,121	, TEPS=	3,495,121	 
100.000000	: iteration 10: start=  565854, BFS took 	36.637297	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,502,119	, TEPS=	3,502,119	 
100.000000	: iteration 11: start=  221315, BFS took 	34.812902	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,685,650	, TEPS=	3,685,650	 
100.000000	: iteration 12: start=  950518, BFS took 	35.255604	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,639,369	, TEPS=	3,639,369	 
100.000000	: iteration 13: start=  446425, BFS took 	36.358232	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,528,999	, TEPS=	3,528,999	 
100.000000	: iteration 14: start=  929738, BFS took 	36.724082	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,493,843	, TEPS=	3,493,843	 
100.000000	: iteration 15: start=  828234, BFS took 	35.192654	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,645,879	, TEPS=	3,645,879	 
100.000000	: iteration 16: start= 1605236, BFS took 	35.404892	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,624,024	, TEPS=	3,624,024	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	100.000000	: 	3.47278339862823486e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	3.50231330990791321e+01
         median_PythonSR_PythonFilter_OTFtime	100.000000	: 	3.56252644062042236e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	3.64246601462364197e+01
            max_PythonSR_PythonFilter_OTFtime	100.000000	: 	3.67240819931030273e+01
           mean_PythonSR_PythonFilter_OTFtime	100.000000	: 	3.57399819046258926e+01
         stddev_PythonSR_PythonFilter_OTFtime	100.000000	: 	7.25664487145512460e-01
          total_PythonSR_PythonFilter_OTFtime	100.000000	: 	5.718397e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.49384319597415486e+06
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.52256756565898377e+06
         median_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.60161928017513268e+06
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.66355524004723877e+06
            max_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.69467856966496399e+06
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.59004613775120163e+06
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	6.77795106290899730e+03

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.49384319597415486e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.52256756565898377e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.60161928017513268e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.66355524004723877e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.69467856966496399e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	3.59004613775120163e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	6.77795106290899730e+03
Total runtime for ppo on 100% is	613.104981	s.
Total runtime for everything is		4834.402519
