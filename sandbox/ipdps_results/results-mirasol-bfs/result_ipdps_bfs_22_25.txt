--Generating a plain RMAT graph of scale 22
graph_generation:               1.834827 s
Generated renamed edge lists
Generation took 1.8354 seconds
Warning: Using smaller indices for the matrix than DistEdgeList
Local matrices are 838860-by-838860
Duplicates removed (or summed): 2953347 and self-loops removed: 0
Created Sparse Matrix (with int32 local indices and values)
Calculated degrees in 0.088098 seconds
Converted to Boolean and removed 675 loops
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Reductions done
Intersection of colsums and rowsums found
Found (and permuted) non-isolated vertices
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Dropped isolated vertices from input
As a whole: 2396784 rows and 2396784 columns and 64154842 nonzeros
Symmetricized
As a whole: 2396784 rows and 2396784 columns and 128309684 nonzeros
Generated graph in 8.716971s: 	2396784	 vertices and 	128309684	 edges.
--Converting binary RMAT to twitter object
Converted in 63.169704s. G has 2396784 vertices and 128309684 edges.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--calculating degrees on original graph
Calculated in 7.237292s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	0.035595	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 43.952340s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.213510	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	486,335,615	, TEPS=	4,839,402	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.004568	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,064	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.004598	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	652	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.004323	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	925	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.004041	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,979	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.210887	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	492,385,225	, TEPS=	4,899,601	 
1.000000	: iteration  7: start=  724625, BFS took 	0.004029	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,240	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.004538	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	881	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.004369	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	686	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.004042	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.004058	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	246	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.004379	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	913	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.004261	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	22,295	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.004309	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.208494	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	498,036,206	, TEPS=	4,955,832	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.004420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,465	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.004468	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,566	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.004443	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,851	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,080	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.003937	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,064	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.003930	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	508	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.214329	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	484,477,289	, TEPS=	4,820,910	 
1.000000	: iteration 23: start= 1642323, BFS took 	0.004355	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	459	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004105	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.003814	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	262	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.003851	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,828	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.004110	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,785	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.003840	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	260	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.003958	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,768	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.004260	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,408	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.004230	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	709	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.004233	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,960	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.003880	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	515	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.003743	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	534	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.004396	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	909	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.003582	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,116	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.004206	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,895	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.004243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,592	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.004256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004560	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	877	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.003855	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	778	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.004266	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.004208	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	237	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.003734	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	535	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.004056	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	739	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.004048	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,976	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.004438	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	450	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.217383	s, covered 	1033263	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	477,671,028	, TEPS=	4,753,188	 
1.000000	: iteration 49: start= 2100515, BFS took 	0.004228	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.003890	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,028	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.003926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	23,942	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.003698	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	811	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.004017	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.213343	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	486,716,063	, TEPS=	4,843,188	 
1.000000	: iteration 55: start=   93605, BFS took 	0.004105	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.004020	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.213981	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	485,265,407	, TEPS=	4,828,753	 
1.000000	: iteration 58: start=  141993, BFS took 	0.066554	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	45	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.005580	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,075	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.240549	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	431,668,858	, TEPS=	4,295,430	 
1.000000	: iteration 61: start=  235716, BFS took 	0.005131	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	194	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.004560	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	219	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.004146	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,447	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.004375	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	228	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.004422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.004119	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004385	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,140	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.005472	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,827	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.004245	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	10,129	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004291	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,165	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004311	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,855	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.005055	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	395	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.004220	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	947	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.004547	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	219	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.004079	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.004115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,318	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.004391	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	22,317	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.004506	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	221	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004468	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,014	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.003913	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,811	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.004415	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.004035	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.004199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,620	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.004226	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.248093	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	418,542,568	, TEPS=	4,164,811	 
1.000000	: iteration 86: start= 1069288, BFS took 	0.004184	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	717	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.004558	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	438	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.007824	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,917	, TEPS=	127	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.004769	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	419	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004690	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,279	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.004165	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,400	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.004256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.004268	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,405	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.005003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	599	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.004187	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,194	, TEPS=	0	 (result discarded)
1.000000	: iteration 96: start= 2165183, BFS took 	0.233157	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	445,354,901	, TEPS=	4,431,616	 
1.000000	: iteration 97: start=  689735, BFS took 	0.004148	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	482	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.005068	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	789	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.005039	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.004364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	687	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.004399	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	17,050	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.004835	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	206	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.237675	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	436,888,861	, TEPS=	4,347,374	 
1.000000	: iteration 104: start= 2197518, BFS took 	0.004277	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	467	, TEPS=	0	 (result discarded)
1.000000	: iteration 105: start=  507226, BFS took 	0.003953	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,794	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.004195	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	953	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.004115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.004161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,124	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.004315	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,793	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.004505	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,325	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.004800	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	208	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.004529	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	220	, TEPS=	0	 (result discarded)
1.000000	: iteration 113: start= 1376035, BFS took 	0.004559	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	219	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.004040	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.005169	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	967	, TEPS=	0	 (result discarded)
1.000000	: iteration 116: start= 2292609, BFS took 	0.004358	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	688	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.004576	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	218	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.004191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 119: start= 1677169, BFS took 	0.004263	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	703	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.004040	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,663	, TEPS=	0	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.005020	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,792	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.004348	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.004070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,228	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.004386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	19,379	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.004322	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	462	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.240509	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	431,740,686	, TEPS=	4,296,142	 
1.000000	: iteration 127: start=  992698, BFS took 	0.004087	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	244	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.004426	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	225	, TEPS=	0	 (result discarded)
1.000000	: iteration 129: start=  119727, BFS took 	0.008949	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,229	, TEPS=	111	 (result discarded)
1.000000	: iteration 130: start= 1834702, BFS took 	0.004541	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	440	, TEPS=	0	 (result discarded)
1.000000	: iteration 131: start= 1284427, BFS took 	0.004420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	904	, TEPS=	0	 (result discarded)
1.000000	: iteration 132: start=  108683, BFS took 	0.004563	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	219	, TEPS=	0	 (result discarded)
1.000000	: iteration 133: start= 1590972, BFS took 	0.004188	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,626	, TEPS=	0	 (result discarded)
1.000000	: iteration 134: start=  335468, BFS took 	0.005252	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	190	, TEPS=	0	 (result discarded)
1.000000	: iteration 135: start= 1234077, BFS took 	0.236666	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	438,751,505	, TEPS=	4,365,908	 
1.000000	: iteration 136: start= 1899220, BFS took 	0.004593	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,088	, TEPS=	0	 (result discarded)
1.000000	: iteration 137: start= 2263989, BFS took 	0.237417	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	437,363,552	, TEPS=	4,352,093	 
1.000000	: iteration 138: start=   71427, BFS took 	0.004409	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	680	, TEPS=	0	 (result discarded)
1.000000	: iteration 139: start= 1405845, BFS took 	0.004532	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,103	, TEPS=	0	 (result discarded)
1.000000	: iteration 140: start= 2116661, BFS took 	0.004151	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
1.000000	: iteration 141: start= 2165259, BFS took 	0.003982	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 142: start= 1296152, BFS took 	0.004394	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	227	, TEPS=	0	 (result discarded)
1.000000	: iteration 143: start=  329497, BFS took 	0.005198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	384	, TEPS=	0	 (result discarded)
1.000000	: iteration 144: start= 1073711, BFS took 	0.244028	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	425,515,060	, TEPS=	4,234,192	 
1.000000	: iteration 145: start=  333815, BFS took 	0.005214	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,493	, TEPS=	0	 (result discarded)
1.000000	: iteration 146: start= 2138256, BFS took 	0.004159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	721	, TEPS=	0	 (result discarded)
1.000000	: iteration 147: start= 1935142, BFS took 	0.003703	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	270	, TEPS=	0	 (result discarded)
1.000000	: iteration 148: start=  904988, BFS took 	0.004450	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,696	, TEPS=	0	 (result discarded)
1.000000	: iteration 149: start=  953145, BFS took 	0.004432	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	451	, TEPS=	0	 (result discarded)
1.000000	: iteration 150: start= 1290487, BFS took 	0.004412	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,573	, TEPS=	0	 (result discarded)
1.000000	: iteration 151: start=  396318, BFS took 	0.236844	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	438,421,965	, TEPS=	4,362,625	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.08493947982788086e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.13627755641937256e-01
         median_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.34911441802978516e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.39800512790679932e-01
            max_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.48093128204345703e-01
           mean_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	2.27929070591926575e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	1.39784885127076826e-02
          total_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	3.646865e+00

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
         median_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326200000000000e+06
            max_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326300000000000e+06
           mean_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326150000000000e+06
         stddev_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	6.32455532033675882e-01
          total_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.653218e+07

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.16481104284734046e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.30895022819359507e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.39876250703671481e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.83674013763501681e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.95583209966986347e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.53325897059239727e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.57694152343503447e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.18542568073359251e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.33027729933162630e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.42053203566434503e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.86068063468553305e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.98036206828277588e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.55569605175086558e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.58970367790182121e+06
Total runtime for sso on 1% is	72.087074	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	9.059175	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 39.853178s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.254734	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	407,631,172	, TEPS=	4,056,234	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.004618	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,031	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.004261	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	704	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.004320	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	925	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.004162	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,922	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.249948	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	415,437,250	, TEPS=	4,133,911	 
1.000000	: iteration  7: start=  724625, BFS took 	0.004191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,192	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.004485	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	891	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.004692	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	639	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.004014	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.004272	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.004320	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	925	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.004499	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	21,114	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.004297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.247365	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	419,774,567	, TEPS=	4,177,070	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.004064	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,119	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.004367	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,602	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.004232	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,143	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004383	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,669	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.003918	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,083	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.003934	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	508	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.254161	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	408,550,037	, TEPS=	4,065,377	 
1.000000	: iteration 23: start= 1642323, BFS took 	0.004094	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	488	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	235	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.003968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.004037	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,421	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.004075	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,853	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.003968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.004250	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,647	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.004274	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,403	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.004062	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	738	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.004195	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,005	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.003922	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	509	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.003953	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	505	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.004177	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	957	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.003816	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,048	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.004657	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,227	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.004240	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,594	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.004576	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	218	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004304	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	929	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.003830	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	783	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.004079	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.004263	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.003734	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	535	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.004198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	714	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.004380	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,826	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.004310	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	464	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.257917	s, covered 	1033263	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	402,601,070	, TEPS=	4,006,185	 
1.000000	: iteration 49: start= 2100515, BFS took 	0.004074	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.003855	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,037	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.003824	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	24,581	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.003600	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	833	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.004374	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	228	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.253880	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	409,002,383	, TEPS=	4,069,879	 
1.000000	: iteration 55: start=   93605, BFS took 	0.004200	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.004074	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.251809	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	412,366,060	, TEPS=	4,103,350	 
1.000000	: iteration 58: start=  141993, BFS took 	0.004295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	698	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.004106	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,461	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.248366	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	418,082,992	, TEPS=	4,160,241	 
1.000000	: iteration 61: start=  235716, BFS took 	0.004391	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	227	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.004408	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.003852	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,557	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.004070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.004292	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.003936	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	254	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,202	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.004712	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,122	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.004159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	10,339	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004183	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,195	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004093	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,954	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.004604	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	434	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.004124	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	969	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.004108	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.003977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.003947	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,587	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.004103	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	23,885	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.003999	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004307	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,089	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.003746	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,936	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.004327	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	231	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.003971	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.003991	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,018	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.004181	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.260651	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	398,377,852	, TEPS=	3,964,157	 
1.000000	: iteration 86: start= 1069288, BFS took 	0.004080	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	735	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.004418	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	452	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.007804	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,922	, TEPS=	128	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.004524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	442	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004118	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,457	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.003998	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,501	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.003921	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	255	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.004063	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,476	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.004346	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	690	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.004196	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,191	, TEPS=	0	 (result discarded)
1.000000	: iteration 96: start= 2165183, BFS took 	0.246143	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	421,858,977	, TEPS=	4,197,814	 
1.000000	: iteration 97: start=  689735, BFS took 	0.004072	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	491	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.004616	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	866	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.004442	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	225	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.004272	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	702	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.004011	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,698	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.004207	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	237	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.252609	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	411,060,306	, TEPS=	4,090,360	 
1.000000	: iteration 104: start= 2197518, BFS took 	0.004183	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	478	, TEPS=	0	 (result discarded)
1.000000	: iteration 105: start=  507226, BFS took 	0.004032	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,720	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.004101	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	975	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.003977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.003968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,276	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.004384	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,702	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.004341	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,602	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.004302	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.004183	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
1.000000	: iteration 113: start= 1376035, BFS took 	0.004161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.003906	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	256	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.004524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,105	, TEPS=	0	 (result discarded)
1.000000	: iteration 116: start= 2292609, BFS took 	0.004310	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	696	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.004373	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	228	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.004028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 119: start= 1677169, BFS took 	0.004087	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	734	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.003864	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,058	, TEPS=	0	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.004500	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,999	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.004229	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.003788	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,319	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.004379	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	19,410	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.004076	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	490	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.253275	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	409,979,543	, TEPS=	4,079,602	 
1.000000	: iteration 127: start=  992698, BFS took 	0.004028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.004118	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
1.000000	: iteration 129: start=  119727, BFS took 	0.007334	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,499	, TEPS=	136	 (result discarded)
1.000000	: iteration 130: start= 1834702, BFS took 	0.004234	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	472	, TEPS=	0	 (result discarded)
1.000000	: iteration 131: start= 1284427, BFS took 	0.004414	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	906	, TEPS=	0	 (result discarded)
1.000000	: iteration 132: start=  108683, BFS took 	0.004148	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
1.000000	: iteration 133: start= 1590972, BFS took 	0.003992	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,755	, TEPS=	0	 (result discarded)
1.000000	: iteration 134: start=  335468, BFS took 	0.004456	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
1.000000	: iteration 135: start= 1234077, BFS took 	0.247841	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	418,968,200	, TEPS=	4,169,049	 
1.000000	: iteration 136: start= 1899220, BFS took 	0.004404	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,135	, TEPS=	0	 (result discarded)
1.000000	: iteration 137: start= 2263989, BFS took 	0.252386	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	411,423,750	, TEPS=	4,093,973	 
1.000000	: iteration 138: start=   71427, BFS took 	0.004246	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	706	, TEPS=	0	 (result discarded)
1.000000	: iteration 139: start= 1405845, BFS took 	0.004439	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,126	, TEPS=	0	 (result discarded)
1.000000	: iteration 140: start= 2116661, BFS took 	0.004166	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
1.000000	: iteration 141: start= 2165259, BFS took 	0.003987	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 142: start= 1296152, BFS took 	0.004230	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 143: start=  329497, BFS took 	0.004577	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	436	, TEPS=	0	 (result discarded)
1.000000	: iteration 144: start= 1073711, BFS took 	0.253956	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	408,880,260	, TEPS=	4,068,664	 
1.000000	: iteration 145: start=  333815, BFS took 	0.004568	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,845	, TEPS=	0	 (result discarded)
1.000000	: iteration 146: start= 2138256, BFS took 	0.004264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	703	, TEPS=	0	 (result discarded)
1.000000	: iteration 147: start= 1935142, BFS took 	0.003714	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
1.000000	: iteration 148: start=  904988, BFS took 	0.004453	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,694	, TEPS=	0	 (result discarded)
1.000000	: iteration 149: start=  953145, BFS took 	0.004226	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	473	, TEPS=	0	 (result discarded)
1.000000	: iteration 150: start= 1290487, BFS took 	0.004378	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,623	, TEPS=	0	 (result discarded)
1.000000	: iteration 151: start=  396318, BFS took 	0.250324	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	414,812,524	, TEPS=	4,127,694	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	1.000000	: 	2.46142864227294922e-01
  firstquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	2.48761355876922607e-01
         median_C++SR_SejitsFilter_OTFtime	1.000000	: 	2.52497434616088867e-01
  thirdquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	2.54109859466552734e-01
            max_C++SR_SejitsFilter_OTFtime	1.000000	: 	2.60650873184204102e-01
           mean_C++SR_SejitsFilter_OTFtime	1.000000	: 	2.52210289239883423e-01
         stddev_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.86558140005261461e-03
          total_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.035365e+00

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  firstquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
         median_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  thirdquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03326200000000000e+06
            max_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03326300000000000e+06
           mean_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03326150000000000e+06
         stddev_C++SR_SejitsFilter_OTFnedge	1.000000	: 	6.32455532033675882e-01
          total_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.653218e+07

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.96415706334421504e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.06619947179242829e+06
         median_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.09216712686807942e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.15365885921126511e+06
            max_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.19781415660239570e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.09682532133725239e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	6.57061988377719717e+03

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	3.98377852072711706e+08
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.08632593648269296e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.11242028792901039e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.17421557023504019e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.21858977411238670e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	4.11710232608238220e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	6.60306296220219578e+05
Total runtime for cso on 1% is	76.401137	s.
--Materializing the filter
Materialized 1.000000 in	36.155039	s.
1.000000	: 	1276791	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 1276791 elements.
1 filter(s) remove 127032893 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 0.486513s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.045254	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	22,832,482	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.001408	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.001359	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.001256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.001261	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.043796	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,592,705	 
1.000000	: iteration  7: start=  724625, BFS took 	0.001308	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.001306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.001230	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.001294	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.001110	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.001221	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.001143	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.001161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.042399	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,369,978	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.001359	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.001216	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.001208	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.001248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.001172	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.001137	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.044096	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,432,083	 
1.000000	: iteration 23: start= 1642323, BFS took 	0.001251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.001211	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.001174	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.001152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.001264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.001170	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.001163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.001199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.001235	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.001176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.001149	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.001136	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.001200	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.001137	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.001148	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.001176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.001226	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.001422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.001215	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.001267	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.001159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.001104	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.001209	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.001143	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.001183	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.044410	s, covered 	1033263	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,266,454	 
1.000000	: iteration 49: start= 2100515, BFS took 	0.001257	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.001130	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.001129	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.001267	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.001184	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.042884	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,094,395	 
1.000000	: iteration 55: start=   93605, BFS took 	0.001195	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.001176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.043788	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,596,922	 
1.000000	: iteration 58: start=  141993, BFS took 	0.001210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.001280	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.042988	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,036,155	 
1.000000	: iteration 61: start=  235716, BFS took 	0.001224	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.001317	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.001121	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.001169	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.001307	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.001147	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.001190	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.001139	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.001179	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.001207	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.001139	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.001207	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.001154	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.001147	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.001163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.001185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.001122	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.001080	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.001185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.001114	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.001192	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.001211	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.001134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.001205	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.044872	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,026,953	 
1.000000	: iteration 86: start= 1069288, BFS took 	0.001306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.001222	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.002071	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	482	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.001279	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.001144	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.001172	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.001131	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.001280	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.001124	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.001169	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 96: start= 2165183, BFS took 	0.043123	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,960,805	 
1.000000	: iteration 97: start=  689735, BFS took 	0.001305	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.001152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.001131	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.001200	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.001197	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.001123	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.043007	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,025,495	 
1.000000	: iteration 104: start= 2197518, BFS took 	0.001240	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 105: start=  507226, BFS took 	0.001180	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.001175	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.001227	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.001158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.001218	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.001244	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.001123	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.001157	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 113: start= 1376035, BFS took 	0.001152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.001189	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.001129	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 116: start= 2292609, BFS took 	0.001273	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.001179	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.001164	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 119: start= 1677169, BFS took 	0.001194	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.001222	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.001109	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.001173	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.001122	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.001185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.001176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.042883	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,094,931	 
1.000000	: iteration 127: start=  992698, BFS took 	0.001391	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.001451	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 129: start=  119727, BFS took 	0.001903	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	525	 (result discarded)
1.000000	: iteration 130: start= 1834702, BFS took 	0.001219	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 131: start= 1284427, BFS took 	0.001181	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 132: start=  108683, BFS took 	0.001076	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 133: start= 1590972, BFS took 	0.001146	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 134: start=  335468, BFS took 	0.001098	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 135: start= 1234077, BFS took 	0.042472	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,328,003	 
1.000000	: iteration 136: start= 1899220, BFS took 	0.001285	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 137: start= 2263989, BFS took 	0.042374	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,384,375	 
1.000000	: iteration 138: start=   71427, BFS took 	0.001199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 139: start= 1405845, BFS took 	0.001199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 140: start= 2116661, BFS took 	0.001163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 141: start= 2165259, BFS took 	0.001142	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 142: start= 1296152, BFS took 	0.001176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 143: start=  329497, BFS took 	0.001103	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 144: start= 1073711, BFS took 	0.043431	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,790,862	 
1.000000	: iteration 145: start=  333815, BFS took 	0.001199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 146: start= 2138256, BFS took 	0.001184	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 147: start= 1935142, BFS took 	0.001103	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 148: start=  904988, BFS took 	0.001223	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 149: start=  953145, BFS took 	0.001167	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 150: start= 1290487, BFS took 	0.001200	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 151: start=  396318, BFS took 	0.041967	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,620,707	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	1.000000	: 	4.19671535491943359e-02
  firstquartile_C++SR_PythonFilter_Mattime	1.000000	: 	4.25748229026794434e-02
         median_C++SR_PythonFilter_Mattime	1.000000	: 	4.30649518966674805e-02
  thirdquartile_C++SR_PythonFilter_Mattime	1.000000	: 	4.40209507942199707e-02
            max_C++SR_PythonFilter_Mattime	1.000000	: 	4.52539920806884766e-02
           mean_C++SR_PythonFilter_Mattime	1.000000	: 	4.33589518070220947e-02
         stddev_C++SR_PythonFilter_Mattime	1.000000	: 	9.41386199040530045e-04
          total_C++SR_PythonFilter_Mattime	1.000000	: 	6.937432e-01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03326100000000000e+06
  firstquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03326100000000000e+06
         median_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03326100000000000e+06
  thirdquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03326200000000000e+06
            max_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03326300000000000e+06
           mean_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03326150000000000e+06
         stddev_C++SR_PythonFilter_Matnedge	1.000000	: 	6.32455532033675882e-01
          total_C++SR_PythonFilter_Matnedge	1.000000	: 	1.653218e+07

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.28324828925077319e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.34722392735807896e+07
         median_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.39931506308220327e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.42697357675203122e+07
            max_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.46207072106713317e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.38304077483517714e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	5.09954439819813342e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.85428904724584172e+04
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.85438642745638281e+04
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.85446441979250376e+04
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.85450237970391136e+04
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.85454822854835184e+04
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	2.85443985482548778e+04
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	7.22464056168754393e-02
Total runtime for cpm on 1% is	59.821867	s.
--Generating starting verts
Generated starting verts in 25.038732s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	11.093265	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,360,412	, TEPS=	93,143	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.004569	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,064	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.004970	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	603	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.004269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	936	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.004255	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,880	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	11.122395	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,335,904	, TEPS=	92,899	 
1.000000	: iteration  7: start=  724625, BFS took 	0.004331	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,154	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.004586	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	872	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.004863	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	616	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.004106	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.004590	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	217	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.004556	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	877	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.004869	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	19,510	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.004393	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	227	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	11.175159	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,291,817	, TEPS=	92,460	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.004201	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,854	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.004683	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,494	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.004342	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,988	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004572	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,311	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.004024	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,976	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.004003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	499	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	11.179726	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,288,021	, TEPS=	92,422	 
1.000000	: iteration 23: start= 1642323, BFS took 	0.004072	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	491	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004228	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.003934	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	254	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.004081	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,331	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.004129	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,750	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.003945	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	253	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.004362	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,604	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.004269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,405	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.004130	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	726	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.004189	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,013	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.003926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	509	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.003961	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	504	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.004148	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	964	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.003801	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,052	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.004674	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,204	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.004235	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,597	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.004662	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004367	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	915	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.003939	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	761	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.004072	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.005521	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.003724	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	537	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.004676	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	641	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.004360	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,834	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.004344	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	460	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	11.149544	s, covered 	1033263	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,313,172	, TEPS=	92,673	 
1.000000	: iteration 49: start= 2100515, BFS took 	0.004115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.003701	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,080	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.003888	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	24,176	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.003662	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	819	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.004295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	11.185990	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,282,820	, TEPS=	92,370	 
1.000000	: iteration 55: start=   93605, BFS took 	0.004248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	235	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.004499	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	222	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	11.149035	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,313,589	, TEPS=	92,677	 
1.000000	: iteration 58: start=  141993, BFS took 	0.004319	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	694	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.004325	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,387	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	11.110712	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,345,715	, TEPS=	92,996	 
1.000000	: iteration 61: start=  235716, BFS took 	0.004438	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	225	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.004693	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	213	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.004082	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,469	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.004178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.004513	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	221	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.004072	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,124	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.004614	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,167	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.004319	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,955	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004610	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,084	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004623	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,730	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.004410	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	453	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.004182	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	956	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.004410	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.004050	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	246	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.004069	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,390	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.004316	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	22,706	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.003905	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	256	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004340	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,073	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.003961	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,777	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.004361	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.004169	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.004287	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,464	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.004575	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	218	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	11.235731	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,241,724	, TEPS=	91,962	 
1.000000	: iteration 86: start= 1069288, BFS took 	0.004175	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	718	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.004420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	452	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.008149	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,840	, TEPS=	122	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.004275	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	467	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004005	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,498	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.004185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,389	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.004178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.004152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,445	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.004312	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	695	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.004519	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,106	, TEPS=	0	 (result discarded)
1.000000	: iteration 96: start= 2165183, BFS took 	11.129434	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,329,996	, TEPS=	92,840	 
1.000000	: iteration 97: start=  689735, BFS took 	0.004512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	443	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.004552	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	878	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.004444	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	225	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.004520	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	663	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.004219	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	17,776	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.004102	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	11.120345	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,337,618	, TEPS=	92,916	 
1.000000	: iteration 104: start= 2197518, BFS took 	0.004156	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	481	, TEPS=	0	 (result discarded)
1.000000	: iteration 105: start=  507226, BFS took 	0.004251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,528	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.003905	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,024	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.004336	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	230	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.004424	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,938	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.004317	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,791	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.004386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,524	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.004238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	235	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.004403	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	227	, TEPS=	0	 (result discarded)
1.000000	: iteration 113: start= 1376035, BFS took 	0.004263	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.004031	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.004369	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,144	, TEPS=	0	 (result discarded)
1.000000	: iteration 116: start= 2292609, BFS took 	0.004238	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	707	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.004445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.004328	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	231	, TEPS=	0	 (result discarded)
1.000000	: iteration 119: start= 1677169, BFS took 	0.004146	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	723	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.004187	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,358	, TEPS=	0	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.004251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,117	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.004297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.003951	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,265	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.004239	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	20,052	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.004097	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	488	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	11.140128	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,321,036	, TEPS=	92,751	 
1.000000	: iteration 127: start=  992698, BFS took 	0.004065	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	246	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.004297	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
1.000000	: iteration 129: start=  119727, BFS took 	0.006599	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,666	, TEPS=	151	 (result discarded)
1.000000	: iteration 130: start= 1834702, BFS took 	0.004389	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	455	, TEPS=	0	 (result discarded)
1.000000	: iteration 131: start= 1284427, BFS took 	0.004389	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	911	, TEPS=	0	 (result discarded)
1.000000	: iteration 132: start=  108683, BFS took 	0.004187	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 133: start= 1590972, BFS took 	0.004086	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,692	, TEPS=	0	 (result discarded)
1.000000	: iteration 134: start=  335468, BFS took 	0.004407	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 135: start= 1234077, BFS took 	11.129435	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,329,992	, TEPS=	92,840	 
1.000000	: iteration 136: start= 1899220, BFS took 	0.004496	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,112	, TEPS=	0	 (result discarded)
1.000000	: iteration 137: start= 2263989, BFS took 	11.155544	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,308,155	, TEPS=	92,623	 
1.000000	: iteration 138: start=   71427, BFS took 	0.004046	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	741	, TEPS=	0	 (result discarded)
1.000000	: iteration 139: start= 1405845, BFS took 	0.004387	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,139	, TEPS=	0	 (result discarded)
1.000000	: iteration 140: start= 2116661, BFS took 	0.004122	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
1.000000	: iteration 141: start= 2165259, BFS took 	0.003955	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
1.000000	: iteration 142: start= 1296152, BFS took 	0.004195	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 143: start=  329497, BFS took 	0.004460	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	448	, TEPS=	0	 (result discarded)
1.000000	: iteration 144: start= 1073711, BFS took 	11.114992	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,342,123	, TEPS=	92,961	 
1.000000	: iteration 145: start=  333815, BFS took 	0.004477	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,903	, TEPS=	0	 (result discarded)
1.000000	: iteration 146: start= 2138256, BFS took 	0.004200	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	714	, TEPS=	0	 (result discarded)
1.000000	: iteration 147: start= 1935142, BFS took 	0.003861	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	259	, TEPS=	0	 (result discarded)
1.000000	: iteration 148: start=  904988, BFS took 	0.004480	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,678	, TEPS=	0	 (result discarded)
1.000000	: iteration 149: start=  953145, BFS took 	0.004512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	443	, TEPS=	0	 (result discarded)
1.000000	: iteration 150: start= 1290487, BFS took 	0.004447	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,521	, TEPS=	0	 (result discarded)
1.000000	: iteration 151: start=  396318, BFS took 	11.174925	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,292,011	, TEPS=	92,462	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	1.000000	: 	1.10932650566101074e+01
  firstquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	1.11208575963973999e+01
         median_C++SR_PythonFilter_OTFtime	1.000000	: 	1.11445814371109009e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	1.11751005053520203e+01
            max_C++SR_PythonFilter_OTFtime	1.000000	: 	1.12357311248779297e+01
           mean_C++SR_PythonFilter_OTFtime	1.000000	: 	1.11478974968194962e+01
         stddev_C++SR_PythonFilter_OTFtime	1.000000	: 	3.58858046349731369e-02
          total_C++SR_PythonFilter_OTFtime	1.000000	: 	1.783664e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  firstquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
         median_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  thirdquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03326200000000000e+06
            max_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03326300000000000e+06
           mean_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03326150000000000e+06
         stddev_C++SR_PythonFilter_OTFnedge	1.000000	: 	6.32455532033675882e-01
          total_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.653218e+07

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.19620617933953909e+04
  firstquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.24610028867312940e+04
         median_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.27142190879268164e+04
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.29120796328614233e+04
            max_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.31430913015383267e+04
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.26866702367380058e+04
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.02789669322109027e+01

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.24172480152048357e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.29186587259759195e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.31731282758206129e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.33718998364663497e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.36041232857107930e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	9.31454176037301123e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.04305200850170104e+03
Total runtime for cpo on 1% is	226.969744	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	14.066187	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 34.867867s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.294734	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	352,309,318	, TEPS=	3,505,740	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.004672	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,996	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.004369	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	686	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.004470	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	894	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.004265	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,875	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.287260	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	361,476,017	, TEPS=	3,596,956	 
1.000000	: iteration  7: start=  724625, BFS took 	0.004041	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,237	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.004532	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	882	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.004687	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	640	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.004075	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.004326	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	231	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.004375	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	914	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.004998	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	19,007	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.004411	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.285705	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	363,443,070	, TEPS=	3,616,529	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.004053	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,141	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.004363	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,604	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.004499	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,778	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004623	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,219	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.003996	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,004	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.003829	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	522	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.293714	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	353,533,038	, TEPS=	3,517,917	 
1.000000	: iteration 23: start= 1642323, BFS took 	0.004255	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	470	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004329	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	231	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.003884	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	257	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.004005	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,488	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.004165	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,683	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.064198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	15	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.005838	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,199	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.005461	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,098	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.004866	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	616	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.004833	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,345	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.004915	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	406	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.005079	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.005748	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	695	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.005159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	775	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.005294	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,478	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.004771	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,305	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.005502	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.005262	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	760	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.004484	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	669	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.005173	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	193	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.004953	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	201	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.004245	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	471	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.005524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	543	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005015	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,595	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.004964	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	402	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.451283	s, covered 	1033263	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	230,094,277	, TEPS=	2,289,612	 
1.000000	: iteration 49: start= 2100515, BFS took 	0.004662	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.004356	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	918	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.004320	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	21,759	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.004119	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	728	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.005965	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.443327	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	234,223,376	, TEPS=	2,330,697	 
1.000000	: iteration 55: start=   93605, BFS took 	0.004817	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	207	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.005203	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.442389	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	234,719,968	, TEPS=	2,335,638	 
1.000000	: iteration 58: start=  141993, BFS took 	0.004895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	612	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.004624	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,297	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.438332	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	236,892,425	, TEPS=	2,357,258	 
1.000000	: iteration 61: start=  235716, BFS took 	0.005111	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	195	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.005968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	167	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.005117	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,172	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.004804	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	208	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.004926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	202	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.004983	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.005664	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	882	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.005678	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,761	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.004902	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,772	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.005110	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	978	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.005466	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,463	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.005352	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	373	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.004816	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	830	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.005068	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	197	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.004535	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	220	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.004809	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,406	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.004713	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	20,793	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.005112	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	195	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004983	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,806	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.004665	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,358	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.004877	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	205	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.004750	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	210	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.004966	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,443	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.005382	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	185	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	0.451546	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	229,960,060	, TEPS=	2,288,274	 
1.000000	: iteration 86: start= 1069288, BFS took 	0.005102	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	587	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.005336	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	374	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.008995	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,667	, TEPS=	111	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.005030	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	397	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004989	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,202	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.004929	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,028	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.005111	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	195	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.004613	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,300	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.005117	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	586	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.005359	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	933	, TEPS=	0	 (result discarded)
1.000000	: iteration 96: start= 2165183, BFS took 	0.433266	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	239,662,327	, TEPS=	2,384,820	 
1.000000	: iteration 97: start=  689735, BFS took 	0.005178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	386	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.005320	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	751	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.005470	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	182	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.005341	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	561	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.004725	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	15,873	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.004991	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	0.439894	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	236,051,294	, TEPS=	2,348,888	 
1.000000	: iteration 104: start= 2197518, BFS took 	0.004744	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	421	, TEPS=	0	 (result discarded)
1.000000	: iteration 105: start=  507226, BFS took 	0.004793	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,129	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.004568	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	875	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.005134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	194	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.005337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,435	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.005164	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,841	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.005505	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,994	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.004992	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.005447	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	183	, TEPS=	0	 (result discarded)
1.000000	: iteration 113: start= 1376035, BFS took 	0.006136	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	162	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.004822	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	207	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.005751	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	869	, TEPS=	0	 (result discarded)
1.000000	: iteration 116: start= 2292609, BFS took 	0.005510	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	544	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.005164	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	193	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.006445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	155	, TEPS=	0	 (result discarded)
1.000000	: iteration 119: start= 1677169, BFS took 	0.005132	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	584	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.006386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,480	, TEPS=	0	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.005720	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,573	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.005034	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	198	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.004788	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,044	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.006099	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	13,936	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.005085	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	393	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	0.441663	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	235,105,790	, TEPS=	2,339,478	 
1.000000	: iteration 127: start=  992698, BFS took 	0.004681	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	213	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.005208	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 129: start=  119727, BFS took 	0.009710	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,132	, TEPS=	102	 (result discarded)
1.000000	: iteration 130: start= 1834702, BFS took 	0.005210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	383	, TEPS=	0	 (result discarded)
1.000000	: iteration 131: start= 1284427, BFS took 	0.004918	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	813	, TEPS=	0	 (result discarded)
1.000000	: iteration 132: start=  108683, BFS took 	0.004863	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	205	, TEPS=	0	 (result discarded)
1.000000	: iteration 133: start= 1590972, BFS took 	0.004789	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,296	, TEPS=	0	 (result discarded)
1.000000	: iteration 134: start=  335468, BFS took 	0.005193	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 135: start= 1234077, BFS took 	0.342833	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	302,880,805	, TEPS=	3,013,892	 
1.000000	: iteration 136: start= 1899220, BFS took 	0.004637	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,078	, TEPS=	0	 (result discarded)
1.000000	: iteration 137: start= 2263989, BFS took 	0.324312	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	320,177,927	, TEPS=	3,186,009	 
1.000000	: iteration 138: start=   71427, BFS took 	0.004098	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	732	, TEPS=	0	 (result discarded)
1.000000	: iteration 139: start= 1405845, BFS took 	0.004460	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,121	, TEPS=	0	 (result discarded)
1.000000	: iteration 140: start= 2116661, BFS took 	0.004188	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 141: start= 2165259, BFS took 	0.003978	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 142: start= 1296152, BFS took 	0.004376	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	228	, TEPS=	0	 (result discarded)
1.000000	: iteration 143: start=  329497, BFS took 	0.004284	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	466	, TEPS=	0	 (result discarded)
1.000000	: iteration 144: start= 1073711, BFS took 	0.309362	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	335,650,952	, TEPS=	3,339,977	 
1.000000	: iteration 145: start=  333815, BFS took 	0.004330	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,002	, TEPS=	0	 (result discarded)
1.000000	: iteration 146: start= 2138256, BFS took 	0.004194	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	715	, TEPS=	0	 (result discarded)
1.000000	: iteration 147: start= 1935142, BFS took 	0.003850	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	259	, TEPS=	0	 (result discarded)
1.000000	: iteration 148: start=  904988, BFS took 	0.004395	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,730	, TEPS=	0	 (result discarded)
1.000000	: iteration 149: start=  953145, BFS took 	0.004196	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	476	, TEPS=	0	 (result discarded)
1.000000	: iteration 150: start= 1290487, BFS took 	0.004312	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,725	, TEPS=	0	 (result discarded)
1.000000	: iteration 151: start=  396318, BFS took 	0.305023	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	340,425,313	, TEPS=	3,387,486	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	1.000000	: 	2.85705089569091797e-01
  firstquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	2.97306239604949951e-01
         median_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.88049602508544922e-01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	4.42207515239715576e-01
            max_PythonSR_SejitsFilter_OTFtime	1.000000	: 	4.51545953750610352e-01
           mean_PythonSR_SejitsFilter_OTFtime	1.000000	: 	3.74040186405181885e-01
         stddev_PythonSR_SejitsFilter_OTFtime	1.000000	: 	7.23259550822868968e-02
          total_PythonSR_SejitsFilter_OTFtime	1.000000	: 	5.984643e+00

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  firstquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
         median_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326200000000000e+06
            max_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326300000000000e+06
           mean_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03326150000000000e+06
         stddev_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	6.32455532033675882e-01
          total_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.653218e+07

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.28827429726160690e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.33659873926263209e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.69935656420816761e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.47617707545967121e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.61652990346931666e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.76243453107080329e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.34925672309633446e+04

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.29960060847648859e+08
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.34816424281124949e+08
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.71271566538764596e+08
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.49338316978228331e+08
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	3.63443070463359952e+08
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.77610695659182370e+08
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.37078728709629085e+06
Total runtime for pso on 1% is	96.018221	s.
--Generating starting verts
Generated starting verts in 24.804080s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	10.750400	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,658,946	, TEPS=	96,113	 
1.000000	: iteration  2: start= 2390036, BFS took 	0.004821	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,903	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.004520	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	663	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.004747	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	842	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.004141	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,931	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	10.814688	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,601,536	, TEPS=	95,542	 
1.000000	: iteration  7: start=  724625, BFS took 	0.004257	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,174	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.004470	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	894	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.004497	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	667	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.004139	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
1.000000	: iteration 11: start=  221315, BFS took 	0.004280	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	233	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.004439	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	901	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.004596	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	20,670	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.004364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	10.669335	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,732,334	, TEPS=	96,843	 
1.000000	: iteration 16: start= 1605236, BFS took 	0.004316	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,646	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.004738	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,477	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.004367	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,953	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.004684	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,112	, TEPS=	0	 (result discarded)
1.000000	: iteration 20: start= 2028424, BFS took 	0.004181	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,826	, TEPS=	0	 (result discarded)
1.000000	: iteration 21: start= 1004718, BFS took 	0.004180	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	478	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	10.672694	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,729,271	, TEPS=	96,813	 
1.000000	: iteration 23: start= 1642323, BFS took 	0.004286	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	466	, TEPS=	0	 (result discarded)
1.000000	: iteration 24: start= 1257228, BFS took 	0.004340	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	230	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.003996	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.004153	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,186	, TEPS=	0	 (result discarded)
1.000000	: iteration 27: start= 2104657, BFS took 	0.004190	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,636	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.004118	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.004187	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,671	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.004447	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,349	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.004167	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	719	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.004256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,934	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.004028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	496	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.004088	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	489	, TEPS=	0	 (result discarded)
1.000000	: iteration 35: start= 1339058, BFS took 	0.004319	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	926	, TEPS=	0	 (result discarded)
1.000000	: iteration 36: start= 1032291, BFS took 	0.003988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,003	, TEPS=	0	 (result discarded)
1.000000	: iteration 37: start=  336477, BFS took 	0.004439	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,533	, TEPS=	0	 (result discarded)
1.000000	: iteration 38: start= 2250886, BFS took 	0.004243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,592	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.004573	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	218	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.004470	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	894	, TEPS=	0	 (result discarded)
1.000000	: iteration 41: start= 1919211, BFS took 	0.003886	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	772	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.004188	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.004337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	230	, TEPS=	0	 (result discarded)
1.000000	: iteration 44: start= 1924036, BFS took 	0.003757	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	532	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.004325	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	693	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.004434	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,804	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.004212	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	474	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	10.698215	s, covered 	1033263	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,706,070	, TEPS=	96,582	 
1.000000	: iteration 49: start= 2100515, BFS took 	0.004101	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.003908	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,023	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.004025	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	23,354	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.003894	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	770	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.004220	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	10.706807	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,698,272	, TEPS=	96,505	 
1.000000	: iteration 55: start=   93605, BFS took 	0.004286	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	233	, TEPS=	0	 (result discarded)
1.000000	: iteration 56: start=  654441, BFS took 	0.004208	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	237	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	10.718876	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,687,352	, TEPS=	96,396	 
1.000000	: iteration 58: start=  141993, BFS took 	0.004296	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	698	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.004092	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,466	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	10.853777	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,566,950	, TEPS=	95,198	 
1.000000	: iteration 61: start=  235716, BFS took 	0.004258	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.004473	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	223	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.003895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,540	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.004128	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.004265	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.004042	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.004237	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,180	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.004525	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,209	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.004290	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	10,023	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.004251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,176	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.004126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,938	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.004299	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	465	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.004278	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	934	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.004269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 75: start= 2000417, BFS took 	0.003987	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.003967	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,553	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.004047	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	24,215	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.003982	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.004573	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,968	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.003935	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,795	, TEPS=	0	 (result discarded)
1.000000	: iteration 81: start= 2370086, BFS took 	0.004364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
1.000000	: iteration 82: start= 1583401, BFS took 	0.003996	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 83: start= 1793191, BFS took 	0.004273	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,488	, TEPS=	0	 (result discarded)
1.000000	: iteration 84: start=  715428, BFS took 	0.005206	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	192	, TEPS=	0	 (result discarded)
1.000000	: iteration 85: start=  672163, BFS took 	10.923169	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,506,172	, TEPS=	94,593	 
1.000000	: iteration 86: start= 1069288, BFS took 	0.004363	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	687	, TEPS=	0	 (result discarded)
1.000000	: iteration 87: start= 1891732, BFS took 	0.004538	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	440	, TEPS=	0	 (result discarded)
1.000000	: iteration 88: start=  532384, BFS took 	0.007871	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,905	, TEPS=	127	 (result discarded)
1.000000	: iteration 89: start=  247410, BFS took 	0.004275	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	467	, TEPS=	0	 (result discarded)
1.000000	: iteration 90: start=  175838, BFS took 	0.004025	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,490	, TEPS=	0	 (result discarded)
1.000000	: iteration 91: start= 1073504, BFS took 	0.004282	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,335	, TEPS=	0	 (result discarded)
1.000000	: iteration 92: start= 1124663, BFS took 	0.004256	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
1.000000	: iteration 93: start= 2177707, BFS took 	0.004280	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,401	, TEPS=	0	 (result discarded)
1.000000	: iteration 94: start=  230504, BFS took 	0.004478	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	669	, TEPS=	0	 (result discarded)
1.000000	: iteration 95: start=  703729, BFS took 	0.004211	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,187	, TEPS=	0	 (result discarded)
1.000000	: iteration 96: start= 2165183, BFS took 	10.669841	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,731,876	, TEPS=	96,839	 
1.000000	: iteration 97: start=  689735, BFS took 	0.004068	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	491	, TEPS=	0	 (result discarded)
1.000000	: iteration 98: start=  286392, BFS took 	0.004304	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	929	, TEPS=	0	 (result discarded)
1.000000	: iteration 99: start=  311650, BFS took 	0.004158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
1.000000	: iteration 100: start= 1257830, BFS took 	0.004482	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	669	, TEPS=	0	 (result discarded)
1.000000	: iteration 101: start=   46418, BFS took 	0.004042	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	18,555	, TEPS=	0	 (result discarded)
1.000000	: iteration 102: start=  200426, BFS took 	0.004015	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
1.000000	: iteration 103: start= 1627022, BFS took 	10.630673	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,767,729	, TEPS=	97,196	 
1.000000	: iteration 104: start= 2197518, BFS took 	0.004327	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	462	, TEPS=	0	 (result discarded)
1.000000	: iteration 105: start=  507226, BFS took 	0.004092	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,665	, TEPS=	0	 (result discarded)
1.000000	: iteration 106: start= 2182148, BFS took 	0.004218	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	948	, TEPS=	0	 (result discarded)
1.000000	: iteration 107: start=  636457, BFS took 	0.004140	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
1.000000	: iteration 108: start=  716470, BFS took 	0.004158	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,126	, TEPS=	0	 (result discarded)
1.000000	: iteration 109: start= 1178194, BFS took 	0.004448	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,620	, TEPS=	0	 (result discarded)
1.000000	: iteration 110: start= 1400654, BFS took 	0.004604	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,167	, TEPS=	0	 (result discarded)
1.000000	: iteration 111: start=  127898, BFS took 	0.004152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
1.000000	: iteration 112: start= 1356368, BFS took 	0.004564	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	219	, TEPS=	0	 (result discarded)
1.000000	: iteration 113: start= 1376035, BFS took 	0.004393	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	227	, TEPS=	0	 (result discarded)
1.000000	: iteration 114: start= 1471477, BFS took 	0.003998	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 115: start=  351676, BFS took 	0.004423	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,130	, TEPS=	0	 (result discarded)
1.000000	: iteration 116: start= 2292609, BFS took 	0.004309	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	696	, TEPS=	0	 (result discarded)
1.000000	: iteration 117: start= 1412438, BFS took 	0.004636	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	215	, TEPS=	0	 (result discarded)
1.000000	: iteration 118: start=  625510, BFS took 	0.004119	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
1.000000	: iteration 119: start= 1677169, BFS took 	0.004406	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	680	, TEPS=	0	 (result discarded)
1.000000	: iteration 120: start=  553694, BFS took 	0.003972	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,812	, TEPS=	0	 (result discarded)
1.000000	: iteration 121: start=  245273, BFS took 	0.004291	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,097	, TEPS=	0	 (result discarded)
1.000000	: iteration 122: start= 1278560, BFS took 	0.004414	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	226	, TEPS=	0	 (result discarded)
1.000000	: iteration 123: start=  992402, BFS took 	0.003971	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,259	, TEPS=	0	 (result discarded)
1.000000	: iteration 124: start= 2276796, BFS took 	0.004356	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	19,513	, TEPS=	0	 (result discarded)
1.000000	: iteration 125: start= 1664327, BFS took 	0.004214	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	474	, TEPS=	0	 (result discarded)
1.000000	: iteration 126: start= 1181757, BFS took 	10.712121	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,693,461	, TEPS=	96,457	 
1.000000	: iteration 127: start=  992698, BFS took 	0.004101	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
1.000000	: iteration 128: start= 1295702, BFS took 	0.004343	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	230	, TEPS=	0	 (result discarded)
1.000000	: iteration 129: start=  119727, BFS took 	0.006757	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	1,627	, TEPS=	147	 (result discarded)
1.000000	: iteration 130: start= 1834702, BFS took 	0.004356	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	459	, TEPS=	0	 (result discarded)
1.000000	: iteration 131: start= 1284427, BFS took 	0.004456	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	897	, TEPS=	0	 (result discarded)
1.000000	: iteration 132: start=  108683, BFS took 	0.004030	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	248	, TEPS=	0	 (result discarded)
1.000000	: iteration 133: start= 1590972, BFS took 	0.004036	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,725	, TEPS=	0	 (result discarded)
1.000000	: iteration 134: start=  335468, BFS took 	0.004196	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	238	, TEPS=	0	 (result discarded)
1.000000	: iteration 135: start= 1234077, BFS took 	10.696247	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,707,848	, TEPS=	96,600	 
1.000000	: iteration 136: start= 1899220, BFS took 	0.004383	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,140	, TEPS=	0	 (result discarded)
1.000000	: iteration 137: start= 2263989, BFS took 	10.690203	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,713,336	, TEPS=	96,654	 
1.000000	: iteration 138: start=   71427, BFS took 	0.004229	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	709	, TEPS=	0	 (result discarded)
1.000000	: iteration 139: start= 1405845, BFS took 	0.004760	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,050	, TEPS=	0	 (result discarded)
1.000000	: iteration 140: start= 2116661, BFS took 	0.004156	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	240	, TEPS=	0	 (result discarded)
1.000000	: iteration 141: start= 2165259, BFS took 	0.003998	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 142: start= 1296152, BFS took 	0.004711	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	212	, TEPS=	0	 (result discarded)
1.000000	: iteration 143: start=  329497, BFS took 	0.004439	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	450	, TEPS=	0	 (result discarded)
1.000000	: iteration 144: start= 1073711, BFS took 	10.669982	s, covered 	1033262	 edges, discovered 	337092	 verts, TEPS incl. filtered edges=	9,731,752	, TEPS=	96,838	 
1.000000	: iteration 145: start=  333815, BFS took 	0.004529	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,870	, TEPS=	0	 (result discarded)
1.000000	: iteration 146: start= 2138256, BFS took 	0.004092	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	733	, TEPS=	0	 (result discarded)
1.000000	: iteration 147: start= 1935142, BFS took 	0.003710	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
1.000000	: iteration 148: start=  904988, BFS took 	0.004388	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,734	, TEPS=	0	 (result discarded)
1.000000	: iteration 149: start=  953145, BFS took 	0.004239	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	471	, TEPS=	0	 (result discarded)
1.000000	: iteration 150: start= 1290487, BFS took 	0.004585	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,325	, TEPS=	0	 (result discarded)
1.000000	: iteration 151: start=  396318, BFS took 	10.664254	s, covered 	1033261	 edges, discovered 	337091	 verts, TEPS incl. filtered edges=	9,736,971	, TEPS=	96,890	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.06306729316711426e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.06698763370513916e+01
         median_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.06972310543060303e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.07425190806388855e+01
            max_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.09231691360473633e+01
           mean_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.07213301658630371e+01
         stddev_PythonSR_PythonFilter_OTFtime	1.000000	: 	7.83620659393554353e-02
          total_PythonSR_PythonFilter_OTFtime	1.000000	: 	1.715413e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  firstquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
         median_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03326100000000000e+06
  thirdquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03326200000000000e+06
            max_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03326300000000000e+06
           mean_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03326150000000000e+06
         stddev_PythonSR_PythonFilter_OTFnedge	1.000000	: 	6.32455532033675882e-01
          total_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.653218e+07

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.45935183398518566e+04
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.61843924149290833e+04
         median_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.65915855655196356e+04
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.68391729570355819e+04
            max_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.71962929008644714e+04
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.63743755473736237e+04
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	5.43311336472619004e+01

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.50617295280428603e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.66604779802870005e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.70695966531667486e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.73184566279385611e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.76772963173806667e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	9.68513749759327061e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	5.45958447234159121e+03
Total runtime for ppo on 1% is	220.167447	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	0.061758	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 47.388818s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.539404	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	229,912,152	, TEPS=	22,993,087	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.539636	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	229,813,316	, TEPS=	22,983,203	 
10.000000	: iteration  3: start= 1726462, BFS took 	0.537939	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	230,538,325	, TEPS=	23,055,711	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.004499	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	889	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.003867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,068	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.536645	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	231,094,167	, TEPS=	23,111,298	 
10.000000	: iteration  7: start=  724625, BFS took 	0.004251	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,176	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.004326	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	924	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.004180	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	717	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.004047	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	0.004009	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.004400	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	909	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.530417	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	233,807,698	, TEPS=	23,382,674	 
10.000000	: iteration 14: start=  929738, BFS took 	0.004445	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.525154	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	236,150,918	, TEPS=	23,617,015	 
10.000000	: iteration 16: start= 1605236, BFS took 	0.518478	s, covered 	12402569	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	239,191,568	, TEPS=	23,921,102	 
10.000000	: iteration 17: start=  950965, BFS took 	0.004745	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,475	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.529084	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	234,396,764	, TEPS=	23,441,585	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.004083	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	9,307	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.530798	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	233,639,877	, TEPS=	23,365,890	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.003858	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	518	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	0.527626	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	235,044,446	, TEPS=	23,506,358	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.007939	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	629	, TEPS=	125	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004103	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	243	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.003948	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	253	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.520216	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	238,392,461	, TEPS=	23,841,187	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.519510	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	238,716,410	, TEPS=	23,873,585	 
10.000000	: iteration 28: start=  550247, BFS took 	0.004004	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.003849	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,818	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.004185	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,433	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.004178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	718	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	0.521623	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	237,749,475	, TEPS=	23,776,883	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.534503	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	232,020,355	, TEPS=	23,203,926	 
10.000000	: iteration 34: start= 1095821, BFS took 	0.535926	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	231,404,238	, TEPS=	23,142,309	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.004207	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	950	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.003700	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,081	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.524871	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	236,278,247	, TEPS=	23,629,749	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	5.18478155136108398e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	5.22434890270233154e-01
         median_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	5.29750466346740723e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	5.36465406417846680e-01
            max_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	5.39636135101318359e-01
           mean_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	5.29489398002624512e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	7.32792803740491428e-03
          total_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	8.471830e+00

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025677500000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025690000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025673125000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	6.02079728939614811e-01
          total_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.984411e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.29832032980359606e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.31190516344900541e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.34121297102785036e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.37401001261725426e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.39211023205869421e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.34236367319822311e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.24746830308349818e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.29813316665155679e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.31171685670459241e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.34102231492409885e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.37381668569446951e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.39191568191419780e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.34217291093311787e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.24722067163053900e+05
Total runtime for sso on 10% is	61.710605	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
}
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	9.063011	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 39.433382s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.623404	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	198,932,898	, TEPS=	19,894,910	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.622436	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	199,242,268	, TEPS=	19,925,849	 
10.000000	: iteration  3: start= 1726462, BFS took 	0.622639	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	199,177,271	, TEPS=	19,919,350	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.004379	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	913	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.003815	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,097	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.619285	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	200,256,095	, TEPS=	20,027,240	 
10.000000	: iteration  7: start=  724625, BFS took 	0.004155	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,203	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.004413	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	906	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.004161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	721	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.003977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	0.003968	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.004398	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	909	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.606448	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	204,494,918	, TEPS=	20,451,157	 
10.000000	: iteration 14: start=  929738, BFS took 	0.004509	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	221	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.605126	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	204,941,763	, TEPS=	20,495,845	 
10.000000	: iteration 16: start= 1605236, BFS took 	0.598329	s, covered 	12402569	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	207,269,895	, TEPS=	20,728,675	 
10.000000	: iteration 17: start=  950965, BFS took 	0.004432	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,579	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.605057	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	204,965,102	, TEPS=	20,498,179	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.004289	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,859	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.611868	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	202,683,567	, TEPS=	20,270,007	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.004064	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	492	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	0.608389	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	203,842,511	, TEPS=	20,385,911	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.007757	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	644	, TEPS=	128	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004267	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	234	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.003958	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	252	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.599653	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	206,812,221	, TEPS=	20,682,906	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.601287	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	206,250,248	, TEPS=	20,626,704	 
10.000000	: iteration 28: start=  550247, BFS took 	0.003977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.003824	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,830	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.004275	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,403	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.004003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	749	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	0.600929	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	206,373,074	, TEPS=	20,638,988	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.617282	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	200,905,889	, TEPS=	20,092,226	 
10.000000	: iteration 34: start= 1095821, BFS took 	0.621621	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	199,503,545	, TEPS=	19,951,980	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.004451	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	898	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.003842	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,041	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.605204	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	204,915,362	, TEPS=	20,493,205	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	10.000000	: 	5.98329067230224609e-01
  firstquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	6.02229416370391846e-01
         median_C++SR_SejitsFilter_OTFtime	10.000000	: 	6.07418656349182129e-01
  thirdquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	6.21036887168884277e-01
            max_C++SR_SejitsFilter_OTFtime	10.000000	: 	6.23404026031494141e-01
           mean_C++SR_SejitsFilter_OTFtime	10.000000	: 	6.10559806227684021e-01
         stddev_C++SR_SejitsFilter_OTFtime	10.000000	: 	9.14586385540108043e-03
          total_C++SR_SejitsFilter_OTFtime	10.000000	: 	9.768957e+00

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24025677500000000e+07
            max_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24025690000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24025673125000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	10.000000	: 	6.02079728939614811e-01
          total_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.984411e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.98949100135799050e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.99707955685871281e+07
         median_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.04185342851245366e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.05945732917659357e+07
            max_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.07286753715873696e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.03134356152291670e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.71281076558883542e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.98932898764652461e+08
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.99691682866306514e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.04168715067958266e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.05928961777439177e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.07269895099850416e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.03117812867929101e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	2.71260445674585470e+05
Total runtime for cso on 10% is	64.132770	s.
--Materializing the filter
Materialized 10.000000 in	38.527323	s.
10.000000	: 	12833749	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 12833749 elements.
1 filter(s) remove 115475935 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 1.139174s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.273056	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,421,326	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.270527	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,845,927	 
10.000000	: iteration  3: start= 1726462, BFS took 	0.270973	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,770,499	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.002128	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.001665	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.265298	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	46,749,587	 
10.000000	: iteration  7: start=  724625, BFS took 	0.002213	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.001933	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.001795	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.001874	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	0.001628	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.001925	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.262010	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,336,217	 
10.000000	: iteration 14: start=  929738, BFS took 	0.002165	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.274467	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,187,827	 
10.000000	: iteration 16: start= 1605236, BFS took 	0.269286	s, covered 	12402569	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	0	, TEPS=	46,057,250	 
10.000000	: iteration 17: start=  950965, BFS took 	0.002084	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.261756	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,382,179	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.002177	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	0.276178	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	44,907,893	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.002041	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	0.259959	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,709,707	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.003495	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	286	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.002127	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.001925	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	0.270533	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	45,844,917	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.264220	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	46,940,303	 
10.000000	: iteration 28: start=  550247, BFS took 	0.002030	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.001680	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.002264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.001950	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	0.261839	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,367,165	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.261744	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,384,340	 
10.000000	: iteration 34: start= 1095821, BFS took 	0.269163	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	0	, TEPS=	46,078,257	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.002210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.001780	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	0.261615	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,407,699	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	10.000000	: 	2.59958982467651367e-01
  firstquartile_C++SR_PythonFilter_Mattime	10.000000	: 	2.61776685714721680e-01
         median_C++SR_PythonFilter_Mattime	10.000000	: 	2.67230510711669922e-01
  thirdquartile_C++SR_PythonFilter_Mattime	10.000000	: 	2.70862996578216553e-01
            max_C++SR_PythonFilter_Mattime	10.000000	: 	2.76177883148193359e-01
           mean_C++SR_PythonFilter_Mattime	10.000000	: 	2.67039000988006592e-01
         stddev_C++SR_PythonFilter_Mattime	10.000000	: 	5.31108081243043210e-03
          total_C++SR_PythonFilter_Mattime	10.000000	: 	4.272624e+00

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24025670000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24025670000000000e+07
         median_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24025670000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24025677500000000e+07
            max_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24025690000000000e+07
           mean_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24025673125000000e+07
         stddev_C++SR_PythonFilter_Matnedge	10.000000	: 	6.02079728939614811e-01
          total_C++SR_PythonFilter_Matnedge	10.000000	: 	1.984411e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.49078936322534829e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.57891038811258674e+07
         median_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.64139225003273338e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.73784256214781627e+07
            max_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.77097074402625933e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	4.64447787321050614e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	8.20927747053353232e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.19624949174684996e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.19668753301156743e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.19698679478441423e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.19743616069373558e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.19758600336604984e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.19700252056422294e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	3.88917553467194654e+00
Total runtime for cpm on 10% is	50.533951	s.
--Generating starting verts
Generated starting verts in 24.994946s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	13.159880	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,423,761	, TEPS=	942,452	 
10.000000	: iteration  2: start= 2390036, BFS took 	13.131192	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,444,349	, TEPS=	944,511	 
10.000000	: iteration  3: start= 1726462, BFS took 	13.268577	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	9,346,561	, TEPS=	934,732	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.004438	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	901	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.003909	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,046	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	13.251728	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,358,445	, TEPS=	935,920	 
10.000000	: iteration  7: start=  724625, BFS took 	0.056738	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	88	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.005669	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	705	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.004243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	707	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.004176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	239	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	0.003977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	251	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.004589	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	871	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	13.258496	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,353,667	, TEPS=	935,442	 
10.000000	: iteration 14: start=  929738, BFS took 	0.004355	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	13.156888	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,425,904	, TEPS=	942,667	 
10.000000	: iteration 16: start= 1605236, BFS took 	12.946133	s, covered 	12402569	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	9,579,354	, TEPS=	958,013	 
10.000000	: iteration 17: start=  950965, BFS took 	0.004409	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,587	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	12.978051	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,555,793	, TEPS=	955,657	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.004555	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	8,342	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	12.981087	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,553,558	, TEPS=	955,433	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.004178	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	478	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	12.947550	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,578,303	, TEPS=	957,908	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.007850	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	636	, TEPS=	127	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004494	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	222	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.004078	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	245	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	12.982094	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,552,817	, TEPS=	955,359	 
10.000000	: iteration 27: start= 2104657, BFS took 	12.997758	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,541,304	, TEPS=	954,208	 
10.000000	: iteration 28: start=  550247, BFS took 	0.003944	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	253	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.003929	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,781	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.004566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,314	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.004102	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	731	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	13.036534	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,512,925	, TEPS=	951,369	 
10.000000	: iteration 33: start= 1000189, BFS took 	13.138548	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	9,439,062	, TEPS=	943,983	 
10.000000	: iteration 34: start= 1095821, BFS took 	13.004030	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	9,536,703	, TEPS=	953,748	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.004580	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	873	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.004083	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	979	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	13.067016	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,490,733	, TEPS=	949,150	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	10.000000	: 	1.29461331367492676e+01
  firstquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	1.29813387393951416e+01
         median_C++SR_PythonFilter_OTFtime	10.000000	: 	1.30517749786376953e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	1.31591319441795349e+01
            max_C++SR_PythonFilter_OTFtime	10.000000	: 	1.32685770988464355e+01
           mean_C++SR_PythonFilter_OTFtime	10.000000	: 	1.30815976113080978e+01
         stddev_C++SR_PythonFilter_OTFtime	10.000000	: 	1.14026955089469334e-01
          total_C++SR_PythonFilter_OTFtime	10.000000	: 	2.093056e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
         median_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24025677500000000e+07
            max_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24025690000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24025673125000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	10.000000	: 	6.02079728939614811e-01
          total_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.984411e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.34732330950413249e+05
  firstquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.42506479366519256e+05
         median_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.50260323428629199e+05
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.55415097239291528e+05
            max_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.58013398208744591e+05
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.48092708590826718e+05
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.54530406953047077e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.34656158502345160e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.42429726582667418e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.50182939212388918e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.55337293245310895e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.57935483051427267e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	9.48015496011909842e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	6.54483981443321409e+03
Total runtime for cpo on 10% is	240.274051	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	13.068896	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 35.425211s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	1.315946	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	94,240,632	, TEPS=	9,424,830	 
10.000000	: iteration  2: start= 2390036, BFS took 	1.318459	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	94,060,996	, TEPS=	9,406,865	 
10.000000	: iteration  3: start= 1726462, BFS took 	1.314054	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	94,376,313	, TEPS=	9,438,400	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.004597	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	870	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.004538	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,762	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	1.316235	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	94,219,925	, TEPS=	9,422,759	 
10.000000	: iteration  7: start=  724625, BFS took 	0.004945	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,011	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.004514	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	886	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005830	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	514	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.004427	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	225	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	0.005056	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	197	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.005040	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	793	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	1.301476	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,288,403	, TEPS=	9,529,616	 
10.000000	: iteration 14: start=  929738, BFS took 	0.005115	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	195	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	1.296037	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,688,279	, TEPS=	9,569,607	 
10.000000	: iteration 16: start= 1605236, BFS took 	1.285852	s, covered 	12402569	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	96,446,252	, TEPS=	9,645,409	 
10.000000	: iteration 17: start=  950965, BFS took 	0.005486	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,275	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	1.302159	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,238,435	, TEPS=	9,524,619	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.005205	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,300	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	1.304790	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,046,381	, TEPS=	9,505,412	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.004355	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	459	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	1.301650	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,275,662	, TEPS=	9,528,342	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.009507	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	525	, TEPS=	105	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004982	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.004343	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	230	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	1.298322	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,519,889	, TEPS=	9,552,766	 
10.000000	: iteration 27: start= 2104657, BFS took 	1.293358	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,886,509	, TEPS=	9,589,431	 
10.000000	: iteration 28: start=  550247, BFS took 	0.004315	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	231	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.004652	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,504	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.005227	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,147	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.003936	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	762	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	1.292664	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,937,973	, TEPS=	9,594,578	 
10.000000	: iteration 33: start= 1000189, BFS took 	1.306862	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	94,895,682	, TEPS=	9,490,341	 
10.000000	: iteration 34: start= 1095821, BFS took 	1.315200	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	94,294,071	, TEPS=	9,430,175	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.005385	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	742	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.004271	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	936	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	1.302574	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	95,208,086	, TEPS=	9,521,584	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.28585195541381836e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.29660838842391968e+00
         median_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.30236637592315674e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.31491357088088989e+00
            max_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.31845903396606445e+00
           mean_PythonSR_SejitsFilter_OTFtime	10.000000	: 	1.30410237610340118e+00
         stddev_PythonSR_SejitsFilter_OTFtime	10.000000	: 	9.73211491084094958e-03
          total_PythonSR_SejitsFilter_OTFtime	10.000000	: 	2.086564e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025677500000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025690000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24025673125000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	6.02079728939614811e-01
          total_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.984411e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.40686565186008438e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.43223192920356616e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.52310159740893543e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.56539717393643782e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.64540975948397815e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.51042459484662674e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	8.87307200501399166e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.40609960606421232e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.43146322839305401e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.52232608596736193e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.56461821816496849e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.64462529903675914e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.50965006631209254e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	8.87241816751427687e+04
Total runtime for pso on 10% is	75.071154	s.
--Generating starting verts
Generated starting verts in 25.036123s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	14.083213	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,805,914	, TEPS=	880,663	 
10.000000	: iteration  2: start= 2390036, BFS took 	14.120428	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,782,706	, TEPS=	878,342	 
10.000000	: iteration  3: start= 1726462, BFS took 	14.052796	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	8,824,974	, TEPS=	882,569	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.004566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	876	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.004682	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,708	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	14.363780	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,633,909	, TEPS=	863,461	 
10.000000	: iteration  7: start=  724625, BFS took 	0.005040	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	992	, TEPS=	0	 (result discarded)
10.000000	: iteration  8: start= 2394484, BFS took 	0.004573	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	874	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.005041	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	595	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.004456	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
10.000000	: iteration 11: start=  221315, BFS took 	0.004527	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	220	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.005236	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	763	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	14.105510	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,791,994	, TEPS=	879,271	 
10.000000	: iteration 14: start=  929738, BFS took 	0.004965	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	201	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	14.015551	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,848,426	, TEPS=	884,914	 
10.000000	: iteration 16: start= 1605236, BFS took 	13.995486	s, covered 	12402569	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	8,861,114	, TEPS=	886,183	 
10.000000	: iteration 17: start=  950965, BFS took 	0.005525	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,266	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	14.066658	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,816,278	, TEPS=	881,699	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.005277	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,200	, TEPS=	0	 (result discarded)
10.000000	: iteration 20: start= 2028424, BFS took 	14.072915	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,812,358	, TEPS=	881,307	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.004420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	452	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	13.793523	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	8,990,855	, TEPS=	899,158	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.008945	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	558	, TEPS=	111	 (result discarded)
10.000000	: iteration 24: start= 1257228, BFS took 	0.004977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	200	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.004237	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	236	, TEPS=	0	 (result discarded)
10.000000	: iteration 26: start= 1062860, BFS took 	13.695008	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,055,531	, TEPS=	905,626	 
10.000000	: iteration 27: start= 2104657, BFS took 	13.573194	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,136,800	, TEPS=	913,754	 
10.000000	: iteration 28: start=  550247, BFS took 	0.004385	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	228	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.004496	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,556	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.005243	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,144	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.004073	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	736	, TEPS=	0	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	13.559860	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,145,785	, TEPS=	914,653	 
10.000000	: iteration 33: start= 1000189, BFS took 	13.588283	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	9,126,655	, TEPS=	912,739	 
10.000000	: iteration 34: start= 1095821, BFS took 	13.616666	s, covered 	12402568	 edges, discovered 	1156359	 verts, TEPS incl. filtered edges=	9,107,631	, TEPS=	910,837	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.005378	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	743	, TEPS=	0	 (result discarded)
10.000000	: iteration 36: start= 1032291, BFS took 	0.004319	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	926	, TEPS=	0	 (result discarded)
10.000000	: iteration 37: start=  336477, BFS took 	13.732079	s, covered 	12402567	 edges, discovered 	1156358	 verts, TEPS incl. filtered edges=	9,031,084	, TEPS=	903,182	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.35598599910736084e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.36362515687942505e+01
         median_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.40055185556411743e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.40806384086608887e+01
            max_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.43637800216674805e+01
           mean_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.39021844118833542e+01
         stddev_PythonSR_PythonFilter_OTFtime	10.000000	: 	2.48246603655983833e-01
          total_PythonSR_PythonFilter_OTFtime	10.000000	: 	2.224350e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24025670000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24025677500000000e+07
            max_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24025690000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24025673125000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	10.000000	: 	6.02079728939614811e-01
          total_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.984411e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.63461218515667249e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.80824283978422638e+05
         median_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.85549100914111594e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	9.09534722575132269e+05
            max_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	9.14653027993250056e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.92130829506165464e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.46450781543312291e+03

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.63390902763234638e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.80752554269014858e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.85477032889761031e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	9.09460610779039189e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	9.14578543448375352e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	8.92058174717325717e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.46438882828184833e+04
Total runtime for ppo on 10% is	253.354993	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	0.060818	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 45.899254s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	0.936082	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	135,330,868	, TEPS=	33,822,285	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.987933	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	128,228,113	, TEPS=	32,047,144	 
25.000000	: iteration  3: start= 1726462, BFS took 	0.929556	s, covered 	31660430	 edges, discovered 	1623882	 verts, TEPS incl. filtered edges=	136,280,934	, TEPS=	34,059,729	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.004224	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	946	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.925621	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	136,860,338	, TEPS=	34,204,535	 
25.000000	: iteration  6: start=  307086, BFS took 	0.966812	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	131,029,392	, TEPS=	32,747,248	 
25.000000	: iteration  7: start=  724625, BFS took 	0.920671	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	137,596,141	, TEPS=	34,388,429	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.965095	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	131,262,486	, TEPS=	32,805,503	 
25.000000	: iteration  9: start=  351742, BFS took 	0.923488	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	137,176,431	, TEPS=	34,283,534	 
25.000000	: iteration 10: start=  565854, BFS took 	0.004287	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	233	, TEPS=	0	 (result discarded)
25.000000	: iteration 11: start=  221315, BFS took 	0.004034	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.004972	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	804	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	0.990699	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	127,870,118	, TEPS=	31,957,673	 
25.000000	: iteration 14: start=  929738, BFS took 	0.005000	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	199	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.909506	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	139,285,242	, TEPS=	34,810,574	 
25.000000	: iteration 16: start= 1605236, BFS took 	1.008720	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	125,585,677	, TEPS=	31,386,739	 
25.000000	: iteration 17: start=  950965, BFS took 	0.005220	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,341	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	1.169018	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	108,365,138	, TEPS=	27,082,931	 
25.000000	: iteration 19: start= 1291427, BFS took 	1.034593	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	122,445,049	, TEPS=	30,601,824	 
25.000000	: iteration 20: start= 2028424, BFS took 	1.023400	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	123,784,215	, TEPS=	30,936,512	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.003884	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	514	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	1.031215	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	122,846,138	, TEPS=	30,702,065	 
25.000000	: iteration 23: start= 1642323, BFS took 	1.034892	s, covered 	31660431	 edges, discovered 	1623883	 verts, TEPS incl. filtered edges=	122,409,652	, TEPS=	30,592,978	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	9.09506082534790039e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	9.26604628562927246e-01
         median_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	9.77372407913208008e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.02926123142242432e+00
            max_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.16901779174804688e+00
           mean_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	9.84831258654594421e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	6.65161962404597074e-02
          total_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	1.575730e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604310000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604291875000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	5.43905629069357355e-01
          total_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	5.065669e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.70829316914482266e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.07606772376809865e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.23971962686374485e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.41683336376016960e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.48105742314141542e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.21480750251553468e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.63923800218884571e+05

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.08365138575498208e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.23080657940367341e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.29628753013362527e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.36715487245751321e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.39285242212939531e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.28631960442059278e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	6.55897445921314647e+05
Total runtime for sso on 25% is	65.270707	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	15.071898	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 34.167130s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	1.019702	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	124,233,109	, TEPS=	31,048,701	 
25.000000	: iteration  2: start= 2390036, BFS took 	1.058205	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	119,712,871	, TEPS=	29,918,990	 
25.000000	: iteration  3: start= 1726462, BFS took 	1.012205	s, covered 	31660430	 edges, discovered 	1623882	 verts, TEPS incl. filtered edges=	125,153,296	, TEPS=	31,278,677	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.004311	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	927	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	1.009852	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	125,444,900	, TEPS=	31,351,555	 
25.000000	: iteration  6: start=  307086, BFS took 	1.482199	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	85,468,131	, TEPS=	21,360,444	 
25.000000	: iteration  7: start=  724625, BFS took 	1.078158	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	117,497,396	, TEPS=	29,365,292	 
25.000000	: iteration  8: start= 2394484, BFS took 	1.155151	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	109,665,975	, TEPS=	27,408,040	 
25.000000	: iteration  9: start=  351742, BFS took 	1.093677	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	115,830,174	, TEPS=	28,948,615	 
25.000000	: iteration 10: start=  565854, BFS took 	0.003986	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
25.000000	: iteration 11: start=  221315, BFS took 	0.004092	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	244	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.004353	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	918	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	1.122431	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	112,862,857	, TEPS=	28,207,014	 
25.000000	: iteration 14: start=  929738, BFS took 	0.004357	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	1.048532	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	120,817,270	, TEPS=	30,195,004	 
25.000000	: iteration 16: start= 1605236, BFS took 	1.118228	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	113,287,075	, TEPS=	28,313,036	 
25.000000	: iteration 17: start=  950965, BFS took 	0.004311	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,623	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	1.108300	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	114,301,884	, TEPS=	28,566,660	 
25.000000	: iteration 19: start= 1291427, BFS took 	1.093129	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	115,888,204	, TEPS=	28,963,118	 
25.000000	: iteration 20: start= 2028424, BFS took 	1.094762	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	115,715,372	, TEPS=	28,919,923	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.003976	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	503	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	1.099432	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	115,223,839	, TEPS=	28,797,078	 
25.000000	: iteration 23: start= 1642323, BFS took 	1.095709	s, covered 	31660431	 edges, discovered 	1623883	 verts, TEPS incl. filtered edges=	115,615,366	, TEPS=	28,894,930	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.00985193252563477e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.05095028877258301e+00
         median_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.09421932697296143e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.11574596166610718e+00
            max_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.48219895362854004e+00
           mean_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.10560449957847595e+00
         stddev_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.08568875819126248e-01
          total_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.768967e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
            max_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16604310000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16604291875000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	25.000000	: 	5.43905629069357355e-01
          total_C++SR_SejitsFilter_OTFnedge	25.000000	: 	5.065669e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.13604448461475223e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.83764424952584729e+07
         median_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.89342693941398151e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	3.01260011517729908e+07
            max_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	3.13515555897560343e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	2.86363063764412962e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.65339394698229065e+05

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	8.54681314474520832e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.13540777575764284e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.15772773354031682e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.20541170606295183e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.25444900306495428e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.14580553470668539e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	6.61561567670940887e+05
Total runtime for cso on 25% is	70.449015	s.
--Materializing the filter
Materialized 25.000000 in	36.793551	s.
25.000000	: 	32068606	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 32068606 elements.
1 filter(s) remove 96241078 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 2.208829s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	0.621965	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	50,903,881	 
25.000000	: iteration  2: start= 2390036, BFS took 	0.609460	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	51,948,319	 
25.000000	: iteration  3: start= 1726462, BFS took 	0.612207	s, covered 	31660430	 edges, discovered 	1623882	 verts, TEPS incl. filtered edges=	0	, TEPS=	51,715,242	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.002687	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.573275	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	55,227,288	 
25.000000	: iteration  6: start=  307086, BFS took 	0.643720	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	49,183,547	 
25.000000	: iteration  7: start=  724625, BFS took 	0.602863	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	52,516,803	 
25.000000	: iteration  8: start= 2394484, BFS took 	0.595986	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	53,122,782	 
25.000000	: iteration  9: start=  351742, BFS took 	0.570398	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	55,505,846	 
25.000000	: iteration 10: start=  565854, BFS took 	0.002386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 11: start=  221315, BFS took 	0.002436	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.002607	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	0.651438	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	48,600,832	 
25.000000	: iteration 14: start=  929738, BFS took 	0.002706	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	0.576177	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	54,949,125	 
25.000000	: iteration 16: start= 1605236, BFS took 	0.638866	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	49,557,233	 
25.000000	: iteration 17: start=  950965, BFS took 	0.002571	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	0.636576	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	49,735,491	 
25.000000	: iteration 19: start= 1291427, BFS took 	0.637675	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	49,649,803	 
25.000000	: iteration 20: start= 2028424, BFS took 	0.629055	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	50,330,161	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.002535	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	0.655119	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	0	, TEPS=	48,327,756	 
25.000000	: iteration 23: start= 1642323, BFS took 	0.639514	s, covered 	31660431	 edges, discovered 	1623883	 verts, TEPS incl. filtered edges=	0	, TEPS=	49,507,020	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	25.000000	: 	5.70398092269897461e-01
  firstquartile_C++SR_PythonFilter_Mattime	25.000000	: 	5.97705125808715820e-01
         median_C++SR_PythonFilter_Mattime	25.000000	: 	6.25509858131408691e-01
  thirdquartile_C++SR_PythonFilter_Mattime	25.000000	: 	6.39351963996887207e-01
            max_C++SR_PythonFilter_Mattime	25.000000	: 	6.55118942260742188e-01
           mean_C++SR_PythonFilter_Mattime	25.000000	: 	6.18393346667289734e-01
         stddev_C++SR_PythonFilter_Mattime	25.000000	: 	2.79987505181194286e-02
          total_C++SR_PythonFilter_Mattime	25.000000	: 	9.894294e+00

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16604290000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16604290000000000e+07
         median_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16604290000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16604290000000000e+07
            max_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16604310000000000e+07
           mean_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16604291875000000e+07
         stddev_C++SR_PythonFilter_Matnedge	25.000000	: 	5.43905629069357355e-01
          total_C++SR_PythonFilter_Matnedge	25.000000	: 	5.065669e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	4.83277569272282049e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	4.95195735431962982e+07
         median_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.06170214351259619e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.29712880136021376e+07
            max_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.55058465816521570e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	5.11978813513626903e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.64907460275921156e+05

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	8.45435340580182848e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	8.45791483474982204e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	8.46104327180086169e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	8.46733501576116425e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	8.47352322121678619e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	8.46265270821644925e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	7.23771162481465780e+01
Total runtime for cpm on 25% is	56.338840	s.
--Generating starting verts
Generated starting verts in 25.605930s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	14.222542	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	8,907,041	, TEPS=	2,226,073	 
25.000000	: iteration  2: start= 2390036, BFS took 	14.339367	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	8,834,474	, TEPS=	2,207,937	 
25.000000	: iteration  3: start= 1726462, BFS took 	14.266795	s, covered 	31660430	 edges, discovered 	1623882	 verts, TEPS incl. filtered edges=	8,879,413	, TEPS=	2,219,169	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.004180	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	956	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	15.050204	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	8,417,213	, TEPS=	2,103,654	 
25.000000	: iteration  6: start=  307086, BFS took 	24.503177	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	5,169,973	, TEPS=	1,292,094	 
25.000000	: iteration  7: start=  724625, BFS took 	14.057797	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,011,424	, TEPS=	2,252,161	 
25.000000	: iteration  8: start= 2394484, BFS took 	14.043793	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,020,410	, TEPS=	2,254,407	 
25.000000	: iteration  9: start=  351742, BFS took 	13.999918	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,048,679	, TEPS=	2,261,472	 
25.000000	: iteration 10: start=  565854, BFS took 	0.004012	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
25.000000	: iteration 11: start=  221315, BFS took 	0.004303	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	232	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.004275	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	935	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	14.021883	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,034,505	, TEPS=	2,257,929	 
25.000000	: iteration 14: start=  929738, BFS took 	0.004348	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	229	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	13.991598	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,054,060	, TEPS=	2,262,817	 
25.000000	: iteration 16: start= 1605236, BFS took 	14.020786	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,035,212	, TEPS=	2,258,106	 
25.000000	: iteration 17: start=  950965, BFS took 	0.004513	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,551	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	14.045553	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,019,280	, TEPS=	2,254,124	 
25.000000	: iteration 19: start= 1291427, BFS took 	13.996810	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	9,050,689	, TEPS=	2,261,974	 
25.000000	: iteration 20: start= 2028424, BFS took 	17.215646	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,358,467	, TEPS=	1,839,049	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.004332	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	461	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	14.353633	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	8,825,694	, TEPS=	2,205,743	 
25.000000	: iteration 23: start= 1642323, BFS took 	14.084507	s, covered 	31660431	 edges, discovered 	1623883	 verts, TEPS incl. filtered edges=	8,994,335	, TEPS=	2,247,890	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	25.000000	: 	1.39915978908538818e+01
  firstquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	1.40210602879524231e+01
         median_C++SR_PythonFilter_OTFtime	25.000000	: 	1.40711520910263062e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	1.43500664234161377e+01
            max_C++SR_PythonFilter_OTFtime	25.000000	: 	2.45031769275665283e+01
           mean_C++SR_PythonFilter_OTFtime	25.000000	: 	1.50133755654096603e+01
         stddev_C++SR_PythonFilter_OTFtime	25.000000	: 	2.65462552411817132e+00
          total_C++SR_PythonFilter_OTFtime	25.000000	: 	2.402140e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
         median_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
            max_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16604310000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16604291875000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	25.000000	: 	5.43905629069357355e-01
          total_C++SR_PythonFilter_OTFnedge	25.000000	: 	5.065669e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	1.29209486155982618e+06
  firstquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.20629186902219802e+06
         median_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.25002603294660477e+06
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.25806239942774409e+06
            max_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.26281724553390685e+06
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.10881483905611187e+06
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.56808923836585927e+03

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	5.16997348443751317e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	8.82788934552752227e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.00287984882461652e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.03503533568247408e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.05406058608999290e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	8.43786095401558653e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.82841618661678440e+04
Total runtime for cpo on 25% is	269.652568	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a44#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
1cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	15.073007	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 34.026168s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	2.844271	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	44,538,926	, TEPS=	11,131,298	 
25.000000	: iteration  2: start= 2390036, BFS took 	2.886984	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,879,973	, TEPS=	10,966,610	 
25.000000	: iteration  3: start= 1726462, BFS took 	2.809234	s, covered 	31660430	 edges, discovered 	1623882	 verts, TEPS incl. filtered edges=	45,094,417	, TEPS=	11,270,128	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.004426	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	903	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	2.810192	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	45,079,044	, TEPS=	11,266,286	 
25.000000	: iteration  6: start=  307086, BFS took 	2.880637	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,976,654	, TEPS=	10,990,773	 
25.000000	: iteration  7: start=  724625, BFS took 	2.804931	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	45,163,598	, TEPS=	11,287,418	 
25.000000	: iteration  8: start= 2394484, BFS took 	2.848814	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	44,467,899	, TEPS=	11,113,547	 
25.000000	: iteration  9: start=  351742, BFS took 	2.797601	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	45,281,931	, TEPS=	11,316,992	 
25.000000	: iteration 10: start=  565854, BFS took 	0.004036	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
25.000000	: iteration 11: start=  221315, BFS took 	0.004117	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	242	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.004396	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	909	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	2.884405	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,919,203	, TEPS=	10,976,415	 
25.000000	: iteration 14: start=  929738, BFS took 	0.004457	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	224	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	2.778647	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	45,590,813	, TEPS=	11,394,189	 
25.000000	: iteration 16: start= 1605236, BFS took 	2.911384	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,512,216	, TEPS=	10,874,700	 
25.000000	: iteration 17: start=  950965, BFS took 	0.004384	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,596	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	2.954622	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	42,875,458	, TEPS=	10,715,559	 
25.000000	: iteration 19: start= 1291427, BFS took 	2.929057	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,249,677	, TEPS=	10,809,085	 
25.000000	: iteration 20: start= 2028424, BFS took 	2.898944	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,698,936	, TEPS=	10,921,365	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.004170	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	479	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	2.932301	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	43,201,831	, TEPS=	10,797,127	 
25.000000	: iteration 23: start= 1642323, BFS took 	2.897153	s, covered 	31660431	 edges, discovered 	1623883	 verts, TEPS incl. filtered edges=	43,725,955	, TEPS=	10,928,118	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.77864694595336914e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.80947363376617432e+00
         median_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.88252103328704834e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.90827411413192749e+00
            max_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.95462203025817871e+00
           mean_PythonSR_SejitsFilter_OTFtime	25.000000	: 	2.86682358384132385e+00
         stddev_PythonSR_SejitsFilter_OTFtime	25.000000	: 	5.44467296720819033e-02
          total_PythonSR_SejitsFilter_OTFtime	25.000000	: 	4.586918e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604310000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16604291875000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	5.43905629069357355e-01
          total_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	5.065669e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.07155597825260479e+07
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.08863664856478944e+07
         median_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.09835946245515384e+07
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.12691680247925725e+07
            max_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.13941891920123491e+07
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.10437312452775184e+07
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	2.26452466913251410e+04

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.28754587567095608e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.35588962908841744e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.39479287954065055e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.50905744367177784e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.55908136096560210e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.41885493804250732e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	9.06089293460233457e+04
Total runtime for pso on 25% is	98.489392	s.
--Generating starting verts
Generated starting verts in 25.586874s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	16.114642	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,861,221	, TEPS=	1,964,699	 
25.000000	: iteration  2: start= 2390036, BFS took 	16.231995	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,804,387	, TEPS=	1,950,495	 
25.000000	: iteration  3: start= 1726462, BFS took 	16.157848	s, covered 	31660430	 edges, discovered 	1623882	 verts, TEPS incl. filtered edges=	7,840,201	, TEPS=	1,959,445	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.004453	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	898	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	16.173575	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,832,577	, TEPS=	1,957,540	 
25.000000	: iteration  6: start=  307086, BFS took 	16.211887	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,814,067	, TEPS=	1,952,914	 
25.000000	: iteration  7: start=  724625, BFS took 	16.104650	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,866,099	, TEPS=	1,965,918	 
25.000000	: iteration  8: start= 2394484, BFS took 	16.157250	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,840,491	, TEPS=	1,959,518	 
25.000000	: iteration  9: start=  351742, BFS took 	16.188522	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,825,345	, TEPS=	1,955,733	 
25.000000	: iteration 10: start=  565854, BFS took 	0.004203	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	237	, TEPS=	0	 (result discarded)
25.000000	: iteration 11: start=  221315, BFS took 	0.004137	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	241	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.004487	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	891	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	16.174885	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,831,942	, TEPS=	1,957,382	 
25.000000	: iteration 14: start=  929738, BFS took 	0.004663	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	214	, TEPS=	0	 (result discarded)
25.000000	: iteration 15: start=  828234, BFS took 	16.084857	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,875,778	, TEPS=	1,968,337	 
25.000000	: iteration 16: start= 1605236, BFS took 	16.403017	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,723,016	, TEPS=	1,930,158	 
25.000000	: iteration 17: start=  950965, BFS took 	0.004548	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,539	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	16.242722	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,799,233	, TEPS=	1,949,207	 
25.000000	: iteration 19: start= 1291427, BFS took 	16.321039	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,761,808	, TEPS=	1,939,853	 
25.000000	: iteration 20: start= 2028424, BFS took 	16.342168	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,751,772	, TEPS=	1,937,345	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.004314	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	463	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	16.327575	s, covered 	31660429	 edges, discovered 	1623881	 verts, TEPS incl. filtered edges=	7,758,701	, TEPS=	1,939,077	 
25.000000	: iteration 23: start= 1642323, BFS took 	16.199447	s, covered 	31660431	 edges, discovered 	1623883	 verts, TEPS incl. filtered edges=	7,820,068	, TEPS=	1,954,414	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.60848569869995117e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.61573995947837830e+01
         median_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.61939845085144043e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.63014597296714783e+01
            max_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.64030168056488037e+01
           mean_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.62147549390792847e+01
         stddev_PythonSR_PythonFilter_OTFtime	25.000000	: 	9.18553454834505484e-02
          total_PythonSR_PythonFilter_OTFtime	25.000000	: 	2.594361e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16604290000000000e+07
            max_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16604310000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16604291875000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	25.000000	: 	5.43905629069357355e-01
          total_PythonSR_PythonFilter_OTFnedge	25.000000	: 	5.065669e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.93015890766489436e+06
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.94219210261861351e+06
         median_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.95507372415345581e+06
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.95950029411527235e+06
            max_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.96833761255007423e+06
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.95256908328954340e+06
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.04281374383297748e+03

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.72301683897404745e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.77116446396242827e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.82270674929463491e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.84041856731583737e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.87577875901470333e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.81268517316488922e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	4.17254248985794948e+03
Total runtime for ppo on 25% is	288.526542	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	0.041500	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 37.566240s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	2.707795	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	47,384,745	, TEPS=	47,384,745	 
100.000000	: iteration  2: start= 2390036, BFS took 	2.680095	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	47,874,491	, TEPS=	47,874,491	 
100.000000	: iteration  3: start= 1726462, BFS took 	2.776341	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	46,214,851	, TEPS=	46,214,851	 
100.000000	: iteration  4: start= 2235138, BFS took 	2.922229	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	43,907,644	, TEPS=	43,907,644	 
100.000000	: iteration  5: start=     274, BFS took 	2.914933	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	44,017,541	, TEPS=	44,017,541	 
100.000000	: iteration  6: start=  307086, BFS took 	2.543981	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	50,435,982	, TEPS=	50,435,982	 
100.000000	: iteration  7: start=  724625, BFS took 	3.169460	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,482,663	, TEPS=	40,482,663	 
100.000000	: iteration  8: start= 2394484, BFS took 	2.847607	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	45,058,246	, TEPS=	45,058,246	 
100.000000	: iteration  9: start=  351742, BFS took 	2.994965	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	42,841,298	, TEPS=	42,841,298	 
100.000000	: iteration 10: start=  565854, BFS took 	2.981167	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	43,039,585	, TEPS=	43,039,585	 
100.000000	: iteration 11: start=  221315, BFS took 	3.166138	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,525,140	, TEPS=	40,525,140	 
100.000000	: iteration 12: start=  950518, BFS took 	3.139824	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,864,767	, TEPS=	40,864,767	 
100.000000	: iteration 13: start=  446425, BFS took 	2.521381	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	50,888,060	, TEPS=	50,888,060	 
100.000000	: iteration 14: start=  929738, BFS took 	3.167096	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,512,882	, TEPS=	40,512,882	 
100.000000	: iteration 15: start=  828234, BFS took 	2.969351	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	43,210,853	, TEPS=	43,210,853	 
100.000000	: iteration 16: start= 1605236, BFS took 	2.598646	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	49,375,015	, TEPS=	49,375,015	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	2.52138090133666992e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	2.68702000379562378e+00
         median_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	2.91858088970184326e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.10360932350158691e+00
            max_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	3.16946005821228027e+00
           mean_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	2.88131302595138550e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	2.23918649410522225e-01
          total_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	4.610101e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.04826631802931279e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.13589003740064204e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.39625932251264155e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.77520552340551913e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	5.08880605591878071e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.45311505013009533e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.70853877314689802e+05

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.04826631802931279e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.13589003740064204e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.39625932251264155e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.77520552340551913e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	5.08880605591878071e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.45311505013009533e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	3.70853877314689802e+05
Total runtime for sso on 100% is	86.114703	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	21.084158	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 29.451830s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	2.774493	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	46,245,632	, TEPS=	46,245,632	 
100.000000	: iteration  2: start= 2390036, BFS took 	2.709767	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	47,350,262	, TEPS=	47,350,262	 
100.000000	: iteration  3: start= 1726462, BFS took 	2.816311	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	45,558,952	, TEPS=	45,558,952	 
100.000000	: iteration  4: start= 2235138, BFS took 	2.961090	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	43,331,405	, TEPS=	43,331,405	 
100.000000	: iteration  5: start=     274, BFS took 	2.936056	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	43,700,865	, TEPS=	43,700,865	 
100.000000	: iteration  6: start=  307086, BFS took 	2.592623	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	49,489,719	, TEPS=	49,489,719	 
100.000000	: iteration  7: start=  724625, BFS took 	3.150068	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,731,876	, TEPS=	40,731,876	 
100.000000	: iteration  8: start= 2394484, BFS took 	2.859174	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	44,875,961	, TEPS=	44,875,961	 
100.000000	: iteration  9: start=  351742, BFS took 	2.996828	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	42,814,662	, TEPS=	42,814,662	 
100.000000	: iteration 10: start=  565854, BFS took 	2.997653	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	42,802,880	, TEPS=	42,802,880	 
100.000000	: iteration 11: start=  221315, BFS took 	3.145455	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,791,614	, TEPS=	40,791,614	 
100.000000	: iteration 12: start=  950518, BFS took 	3.153506	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	40,687,470	, TEPS=	40,687,470	 
100.000000	: iteration 13: start=  446425, BFS took 	2.561847	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	50,084,249	, TEPS=	50,084,249	 
100.000000	: iteration 14: start=  929738, BFS took 	3.353479	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	38,261,216	, TEPS=	38,261,216	 
100.000000	: iteration 15: start=  828234, BFS took 	3.114995	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	41,190,494	, TEPS=	41,190,494	 
100.000000	: iteration 16: start= 1605236, BFS took 	2.706998	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	47,398,701	, TEPS=	47,398,701	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	100.000000	: 	2.56184697151184082e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	2.72594857215881348e+00
         median_C++SR_SejitsFilter_OTFtime	100.000000	: 	2.94857287406921387e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	3.13783991336822510e+00
            max_C++SR_SejitsFilter_OTFtime	100.000000	: 	3.35347890853881836e+00
           mean_C++SR_SejitsFilter_OTFtime	100.000000	: 	2.92689642310142517e+00
         stddev_C++SR_SejitsFilter_OTFtime	100.000000	: 	2.24791990747431919e-01
          total_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.683034e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.82612169330465794e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.08913346870015487e+07
         median_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.35161353451760411e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.70741052155021578e+07
            max_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	5.00842499285898358e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.38376236983613148e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.64502147821598744e+05

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.82612169330465794e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.08913346870015487e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.35161353451760411e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.70741052155021578e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	5.00842499285898358e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	4.38376236983613148e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	3.64502147821598744e+05
Total runtime for cso on 100% is	99.778085	s.
--Materializing the filter
Materialized 100.000000 in	38.163190	s.
100.000000	: 	128309684	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
1 filter(s) remove 0 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 7.574799s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	2.206651	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	58,146,116	 
100.000000	: iteration  2: start= 2390036, BFS took 	2.244040	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	57,177,315	 
100.000000	: iteration  3: start= 1726462, BFS took 	2.300350	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	55,777,680	 
100.000000	: iteration  4: start= 2235138, BFS took 	2.485250	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	51,627,878	 
100.000000	: iteration  5: start=     274, BFS took 	2.479011	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	51,757,815	 
100.000000	: iteration  6: start=  307086, BFS took 	2.057139	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	62,372,153	 
100.000000	: iteration  7: start=  724625, BFS took 	2.653719	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	48,350,324	 
100.000000	: iteration  8: start= 2394484, BFS took 	2.412088	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	53,193,820	 
100.000000	: iteration  9: start=  351742, BFS took 	2.533376	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	50,647,114	 
100.000000	: iteration 10: start=  565854, BFS took 	2.470492	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	51,936,290	 
100.000000	: iteration 11: start=  221315, BFS took 	2.677552	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,919,955	 
100.000000	: iteration 12: start=  950518, BFS took 	2.673366	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,994,992	 
100.000000	: iteration 13: start=  446425, BFS took 	2.049501	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	62,604,598	 
100.000000	: iteration 14: start=  929738, BFS took 	2.680765	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	47,862,527	 
100.000000	: iteration 15: start=  828234, BFS took 	2.463237	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	52,089,255	 
100.000000	: iteration 16: start= 1605236, BFS took 	2.165184	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	59,259,713	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	100.000000	: 	2.04950094223022461e+00
  firstquartile_C++SR_PythonFilter_Mattime	100.000000	: 	2.21599823236465454e+00
         median_C++SR_PythonFilter_Mattime	100.000000	: 	2.46686446666717529e+00
  thirdquartile_C++SR_PythonFilter_Mattime	100.000000	: 	2.62363338470458984e+00
            max_C++SR_PythonFilter_Mattime	100.000000	: 	2.68076491355895996e+00
           mean_C++SR_PythonFilter_Mattime	100.000000	: 	2.40948256850242615e+00
         stddev_C++SR_PythonFilter_Mattime	100.000000	: 	2.16197568390405798e-01
          total_C++SR_PythonFilter_Mattime	100.000000	: 	3.855172e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_Matnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_Matnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	4.78625273521873951e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	4.89245221266042665e+07
         median_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.20127729626466036e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.79039160996469557e+07
            max_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	6.26045986884873956e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.32513435362795740e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	5.30390646189902909e+05

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.14142408281499846e+06
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.14582952787435055e+06
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.15796240757573396e+06
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.17758255755568203e+06
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.19073856014654832e+06
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	3.16242868604661664e+06
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.87057962212318671e+03
Total runtime for cpm on 100% is	90.595259	s.
--Generating starting verts
Generated starting verts in 27.234927s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	16.936828	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,575,691	, TEPS=	7,575,691	 
100.000000	: iteration  2: start= 2390036, BFS took 	16.520856	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,766,436	, TEPS=	7,766,436	 
100.000000	: iteration  3: start= 1726462, BFS took 	16.988613	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,552,599	, TEPS=	7,552,599	 
100.000000	: iteration  4: start= 2235138, BFS took 	16.557812	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,749,102	, TEPS=	7,749,102	 
100.000000	: iteration  5: start=     274, BFS took 	16.204007	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,918,299	, TEPS=	7,918,299	 
100.000000	: iteration  6: start=  307086, BFS took 	16.080296	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,979,217	, TEPS=	7,979,217	 
100.000000	: iteration  7: start=  724625, BFS took 	16.599073	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,729,840	, TEPS=	7,729,840	 
100.000000	: iteration  8: start= 2394484, BFS took 	16.339466	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,852,654	, TEPS=	7,852,654	 
100.000000	: iteration  9: start=  351742, BFS took 	16.293432	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,874,840	, TEPS=	7,874,840	 
100.000000	: iteration 10: start=  565854, BFS took 	16.499964	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,776,270	, TEPS=	7,776,270	 
100.000000	: iteration 11: start=  221315, BFS took 	16.785412	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,644,029	, TEPS=	7,644,029	 
100.000000	: iteration 12: start=  950518, BFS took 	16.493511	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,779,312	, TEPS=	7,779,312	 
100.000000	: iteration 13: start=  446425, BFS took 	15.906268	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	8,066,517	, TEPS=	8,066,517	 
100.000000	: iteration 14: start=  929738, BFS took 	16.775046	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,648,753	, TEPS=	7,648,753	 
100.000000	: iteration 15: start=  828234, BFS took 	16.884381	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,599,223	, TEPS=	7,599,223	 
100.000000	: iteration 16: start= 1605236, BFS took 	16.322659	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	7,860,740	, TEPS=	7,860,740	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	100.000000	: 	1.59062681198120117e+01
  firstquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	1.63007387518882751e+01
         median_C++SR_PythonFilter_OTFtime	100.000000	: 	1.65104100704193115e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	1.67828205227851868e+01
            max_C++SR_PythonFilter_OTFtime	100.000000	: 	1.69886131286621094e+01
           mean_C++SR_PythonFilter_OTFtime	100.000000	: 	1.65117265284061432e+01
         stddev_C++SR_PythonFilter_OTFtime	100.000000	: 	3.12199441353768370e-01
          total_C++SR_PythonFilter_OTFtime	100.000000	: 	2.641876e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.55259908670982532e+06
  firstquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.64521035108473152e+06
         median_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.77135363780110423e+06
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.87131572530494444e+06
            max_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	8.06651711347591784e+06
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.77073092745713145e+06
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.89960122092920283e+04

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.55259908670982532e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.64521035108473152e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.77135363780110423e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.87131572530494444e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	8.06651711347591784e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	7.77073092745713145e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	1.89960122092920283e+04
Total runtime for cpo on 100% is	293.845210	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	8.066044	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 42.559202s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	10.589193	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,116,899	, TEPS=	12,116,899	 
100.000000	: iteration  2: start= 2390036, BFS took 	10.740760	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,945,912	, TEPS=	11,945,912	 
100.000000	: iteration  3: start= 1726462, BFS took 	10.566102	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,143,379	, TEPS=	12,143,379	 
100.000000	: iteration  4: start= 2235138, BFS took 	10.565395	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,144,191	, TEPS=	12,144,191	 
100.000000	: iteration  5: start=     274, BFS took 	11.194014	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,462,214	, TEPS=	11,462,214	 
100.000000	: iteration  6: start=  307086, BFS took 	10.475988	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,247,836	, TEPS=	12,247,836	 
100.000000	: iteration  7: start=  724625, BFS took 	11.202928	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,453,093	, TEPS=	11,453,093	 
100.000000	: iteration  8: start= 2394484, BFS took 	10.676135	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,018,224	, TEPS=	12,018,224	 
100.000000	: iteration  9: start=  351742, BFS took 	10.938242	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,730,238	, TEPS=	11,730,238	 
100.000000	: iteration 10: start=  565854, BFS took 	11.032152	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,630,385	, TEPS=	11,630,385	 
100.000000	: iteration 11: start=  221315, BFS took 	13.385483	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,585,622	, TEPS=	9,585,622	 
100.000000	: iteration 12: start=  950518, BFS took 	11.356023	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,298,690	, TEPS=	11,298,690	 
100.000000	: iteration 13: start=  446425, BFS took 	10.760300	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	11,924,220	, TEPS=	11,924,220	 
100.000000	: iteration 14: start=  929738, BFS took 	13.566613	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	9,457,643	, TEPS=	9,457,643	 
100.000000	: iteration 15: start=  828234, BFS took 	10.617353	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,084,762	, TEPS=	12,084,762	 
100.000000	: iteration 16: start= 1605236, BFS took 	10.064130	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	12,749,058	, TEPS=	12,749,058	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.00641298294067383e+01
  firstquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.05718745589256287e+01
         median_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.07505300045013428e+01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.12006993293762207e+01
            max_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.35666129589080811e+01
           mean_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.11081756055355072e+01
         stddev_PythonSR_SejitsFilter_OTFtime	100.000000	: 	9.78895403719844848e-01
          total_PythonSR_SejitsFilter_OTFtime	100.000000	: 	1.777308e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.45764314119026624e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.14553739432074390e+07
         median_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.19350664492586236e+07
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.21367594680403657e+07
            max_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.27490589027470369e+07
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.15507882262916807e+07
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	7.23764314793399681e+04

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	9.45764314119026624e+06
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.14553739432074390e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.19350664492586236e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.21367594680403657e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.27490589027470369e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.15507882262916807e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	7.23764314793399681e+04
Total runtime for pso on 100% is	230.824483	s.
--Generating starting verts
Generated starting verts in 27.082610s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	25.516929	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,028,355	, TEPS=	5,028,355	 
100.000000	: iteration  2: start= 2390036, BFS took 	25.244449	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,082,629	, TEPS=	5,082,629	 
100.000000	: iteration  3: start= 1726462, BFS took 	25.626580	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,006,839	, TEPS=	5,006,839	 
100.000000	: iteration  4: start= 2235138, BFS took 	25.603549	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,011,343	, TEPS=	5,011,343	 
100.000000	: iteration  5: start=     274, BFS took 	25.583104	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,015,348	, TEPS=	5,015,348	 
100.000000	: iteration  6: start=  307086, BFS took 	25.202607	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,091,067	, TEPS=	5,091,067	 
100.000000	: iteration  7: start=  724625, BFS took 	26.143316	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,907,877	, TEPS=	4,907,877	 
100.000000	: iteration  8: start= 2394484, BFS took 	25.782065	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,976,644	, TEPS=	4,976,644	 
100.000000	: iteration  9: start=  351742, BFS took 	26.041797	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,927,009	, TEPS=	4,927,009	 
100.000000	: iteration 10: start=  565854, BFS took 	26.296328	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,879,319	, TEPS=	4,879,319	 
100.000000	: iteration 11: start=  221315, BFS took 	26.574319	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,828,277	, TEPS=	4,828,277	 
100.000000	: iteration 12: start=  950518, BFS took 	26.373707	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,865,003	, TEPS=	4,865,003	 
100.000000	: iteration 13: start=  446425, BFS took 	25.332151	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,065,033	, TEPS=	5,065,033	 
100.000000	: iteration 14: start=  929738, BFS took 	26.476326	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,846,147	, TEPS=	4,846,147	 
100.000000	: iteration 15: start=  828234, BFS took 	26.197710	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,897,687	, TEPS=	4,897,687	 
100.000000	: iteration 16: start= 1605236, BFS took 	25.428808	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,045,780	, TEPS=	5,045,780	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.52026069164276123e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.54508383870124817e+01
         median_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.57043225765228271e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.62716733217239380e+01
            max_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.65743191242218018e+01
           mean_PythonSR_PythonFilter_OTFtime	100.000000	: 	2.58389840573072433e+01
         stddev_PythonSR_PythonFilter_OTFtime	100.000000	: 	4.59057031528117720e-01
          total_PythonSR_PythonFilter_OTFtime	100.000000	: 	4.134237e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.82827738314658962e+06
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.88391135432079528e+06
         median_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.99174243305929657e+06
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	5.04142417468255199e+06
            max_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	5.09106793695877213e+06
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.96568223098208662e+06
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	8.15317571738533479e+03

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.82827738314658962e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.88391135432079528e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.99174243305929657e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	5.04142417468255199e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	5.09106793695877213e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	4.96568223098208662e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	8.15317571738533479e+03
Total runtime for ppo on 100% is	442.954249	s.
Total runtime for everything is		3683.330673
