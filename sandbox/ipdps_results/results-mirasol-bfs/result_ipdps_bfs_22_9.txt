--Generating a plain RMAT graph of scale 22
graph_generation:               4.895772 s
Generated renamed edge lists
Generation took 4.89607 seconds
Warning: Using smaller indices for the matrix than DistEdgeList
Local matrices are 1398101-by-1398101
Duplicates removed (or summed): 2953347 and self-loops removed: 0
Created Sparse Matrix (with int32 local indices and values)
Calculated degrees in 0.137932 seconds
Converted to Boolean and removed 675 loops
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Reductions done
Intersection of colsums and rowsums found
Found (and permuted) non-isolated vertices
As a whole: 4194304 rows and 4194304 columns and 64154842 nonzeros
Dropped isolated vertices from input
As a whole: 2396784 rows and 2396784 columns and 64154842 nonzeros
Symmetricized
As a whole: 2396784 rows and 2396784 columns and 128309684 nonzeros
Generated graph in 20.043232s: 	2396784	 vertices and 	128309684	 edges.
--Converting binary RMAT to twitter object
Converted in 158.013289s. G has 2396784 vertices and 128309684 edges.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--calculating degrees on original graph
Calculated in 20.037091s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	0.043871	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 64.004541s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.006722	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,785	, TEPS=	0	 (result discarded)
1.000000	: iteration  2: start= 2390036, BFS took 	0.008604	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	581	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.006131	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	163	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.006603	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	151	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.007152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.006921	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	722	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.007239	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,315	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.007494	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	133	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.007038	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	284	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.411083	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	252,657,899	, TEPS=	2,517,391	 
1.000000	: iteration 11: start=  221315, BFS took 	0.006811	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	146	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.005602	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	357	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.007005	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,142	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.005517	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	181	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.005478	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	365	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.006548	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	458	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.005629	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	532	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.007098	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,408	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.430769	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	241,111,742	, TEPS=	2,402,352	 
1.000000	: iteration 20: start= 2028424, BFS took 	0.428168	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	242,576,247	, TEPS=	2,416,945	 
1.000000	: iteration 21: start= 1004718, BFS took 	0.007819	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	127	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.007426	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,481	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.427747	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	242,814,935	, TEPS=	2,419,320	 
1.000000	: iteration 24: start= 1257228, BFS took 	0.008267	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	120	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.007022	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	996	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.420330	s, covered 	1034862	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	247,100,385	, TEPS=	2,462,022	 
1.000000	: iteration 27: start= 2104657, BFS took 	0.007159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.007047	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	425	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.005822	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	515	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.008121	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,108	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.006495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,539	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.007100	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,506	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.007423	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	134	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.405643	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	256,046,103	, TEPS=	2,551,153	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.415440	s, covered 	1034860	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	250,009,057	, TEPS=	2,490,998	 
1.000000	: iteration 36: start= 1032291, BFS took 	0.417622	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	248,701,799	, TEPS=	2,477,977	 
1.000000	: iteration 37: start=  336477, BFS took 	0.412316	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	251,902,365	, TEPS=	2,509,865	 
1.000000	: iteration 38: start= 2250886, BFS took 	0.007353	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	816	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006930	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,751	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.417697	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	248,657,219	, TEPS=	2,477,530	 
1.000000	: iteration 41: start= 1919211, BFS took 	0.006909	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.006538	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,141	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.411480	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	252,414,152	, TEPS=	2,514,963	 
1.000000	: iteration 44: start= 1924036, BFS took 	0.006950	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,884	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.007317	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	273	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.006005	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	333	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.006578	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,216	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.008079	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,609	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.007165	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.006922	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.006932	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	288	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.006775	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	295	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.006580	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,407	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.006892	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	290	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.421312	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	246,523,573	, TEPS=	2,456,271	 
1.000000	: iteration 56: start=  654441, BFS took 	0.007084	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	423	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.006051	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	661	, TEPS=	0	 (result discarded)
1.000000	: iteration 58: start=  141993, BFS took 	0.005793	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	863	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.007166	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	976	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.006328	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	158	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.006523	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	306	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.008214	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	121	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.007499	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	133	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.006497	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	769	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.007148	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	559	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.007450	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,610	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.008295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	120	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.006939	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,035	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.006536	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,283	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.007228	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.006592	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,516	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.006104	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,372	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.006469	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,700	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.412714	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	251,659,410	, TEPS=	2,507,443	 
1.000000	: iteration 75: start= 2000417, BFS took 	0.007011	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,848	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.007615	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	787	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.006485	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,158	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.005932	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	168	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.006787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	442	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.423836	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	245,055,551	, TEPS=	2,441,644	 
1.000000	: iteration 81: start= 2370086, BFS took 	0.411915	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	252,147,522	, TEPS=	2,512,306	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.416183	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	249,561,765	, TEPS=	2,486,543	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.05643224716186523e-01
  firstquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.12015318870544434e-01
         median_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.16902542114257812e-01
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.23205018043518066e-01
            max_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.30768966674804688e-01
           mean_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	4.17765960097312927e-01
         stddev_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	7.12476143528564723e-03
          total_SejitsSR_SejitsFilter_OTFtime	1.000000	: 	6.684255e+00

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
         median_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485875000000000e+06
            max_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03486200000000000e+06
           mean_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485793750000000e+06
         stddev_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.43614066163450715e+00
          total_SejitsSR_SejitsFilter_OTFnedge	1.000000	: 	1.655773e+07

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.40235272282562964e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.44530163337930152e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.48226018625363056e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.51169649803966843e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.55115317339282995e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.47712365670877276e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.79208824687212837e+03

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.41111742105620176e+08
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.45422557118681431e+08
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.49131782374169618e+08
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.52086233634202540e+08
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.56046103254083276e+08
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.48616279234129518e+08
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	1.000000	: 	4.80948594733411795e+05
Total runtime for sso on 1% is	103.844715	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	6.056369	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 65.125018s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.007775	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,543	, TEPS=	0	 (result discarded)
1.000000	: iteration  2: start= 2390036, BFS took 	0.008726	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	573	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.006828	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	146	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.007369	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.006537	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	152	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.006264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	798	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.006613	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,629	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.007701	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	129	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006220	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	321	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.475596	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	218,385,717	, TEPS=	2,175,916	 
1.000000	: iteration 11: start=  221315, BFS took 	0.006624	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	150	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.007174	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	278	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.007079	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,130	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.007041	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	142	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.006841	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	292	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.006761	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	443	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.007050	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	425	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.007471	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,338	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.471674	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	220,201,688	, TEPS=	2,194,012	 
1.000000	: iteration 20: start= 2028424, BFS took 	0.468102	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	221,881,995	, TEPS=	2,210,755	 
1.000000	: iteration 21: start= 1004718, BFS took 	0.007166	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.007420	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,482	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.470729	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	220,643,705	, TEPS=	2,198,414	 
1.000000	: iteration 24: start= 1257228, BFS took 	0.007536	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	132	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.007103	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	985	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.467979	s, covered 	1034862	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	221,940,999	, TEPS=	2,211,343	 
1.000000	: iteration 27: start= 2104657, BFS took 	0.007345	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	272	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.006897	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	434	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.005738	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	522	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.007525	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,196	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.006755	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,480	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.007289	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,390	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.007126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.460668	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	225,462,474	, TEPS=	2,246,428	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.469499	s, covered 	1034860	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	221,222,408	, TEPS=	2,204,178	 
1.000000	: iteration 36: start= 1032291, BFS took 	0.470138	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	220,920,982	, TEPS=	2,201,178	 
1.000000	: iteration 37: start=  336477, BFS took 	0.468070	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	221,897,244	, TEPS=	2,210,905	 
1.000000	: iteration 38: start= 2250886, BFS took 	0.007499	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	800	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006836	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,803	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.472317	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	219,901,818	, TEPS=	2,191,022	 
1.000000	: iteration 41: start= 1919211, BFS took 	0.007132	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.006786	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,063	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.465546	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	223,100,159	, TEPS=	2,222,889	 
1.000000	: iteration 44: start= 1924036, BFS took 	0.007146	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,778	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.007160	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.005948	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	336	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.006756	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,184	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.007494	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,734	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.007347	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	136	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.007152	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.007172	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	278	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.006948	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	287	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.006657	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,356	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.007131	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	280	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.474995	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	218,661,950	, TEPS=	2,178,668	 
1.000000	: iteration 56: start=  654441, BFS took 	0.007170	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	418	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.006321	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	632	, TEPS=	0	 (result discarded)
1.000000	: iteration 58: start=  141993, BFS took 	0.005787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	864	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.007337	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	954	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.006674	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	149	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.006078	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	329	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.007741	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	129	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.007054	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	141	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.006764	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	739	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.007403	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	540	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.007134	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,682	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.007406	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.007095	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,946	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.006831	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,099	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.006748	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	148	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.006632	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,507	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.006003	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,496	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.006742	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,631	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.470633	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	220,688,639	, TEPS=	2,198,861	 
1.000000	: iteration 75: start= 2000417, BFS took 	0.007294	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,620	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.007126	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	841	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.006542	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,140	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.006046	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	165	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.006943	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	432	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.472889	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	219,635,844	, TEPS=	2,188,372	 
1.000000	: iteration 81: start= 2370086, BFS took 	0.466325	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	222,727,396	, TEPS=	2,219,175	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.470578	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	220,714,467	, TEPS=	2,199,119	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.60668087005615234e-01
  firstquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.68001663684844971e-01
         median_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.70358014106750488e-01
  thirdquartile_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.72156286239624023e-01
            max_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.75595951080322266e-01
           mean_C++SR_SejitsFilter_OTFtime	1.000000	: 	4.69733625650405884e-01
         stddev_C++SR_SejitsFilter_OTFtime	1.000000	: 	3.69707897134620694e-03
          total_C++SR_SejitsFilter_OTFtime	1.000000	: 	7.515738e+00

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  firstquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
         median_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  thirdquartile_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03485875000000000e+06
            max_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03486200000000000e+06
           mean_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.03485793750000000e+06
         stddev_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.43614066163450715e+00
          total_C++SR_SejitsFilter_OTFnedge	1.000000	: 	1.655773e+07

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.17591633749048784e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.19176973922458617e+06
         median_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.20014902578845341e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.21123360824578535e+06
            max_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.24642867433399148e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.20307399435741082e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.83453076970153279e+03

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.18385717464736700e+08
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.19976786113869011e+08
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.20817725212517411e+08
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.21930060947785020e+08
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.25462474891893208e+08
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.21111312056199074e+08
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	1.000000	: 	2.84479364480147662e+05
Total runtime for cso on 1% is	111.653583	s.
--Materializing the filter
Materialized 1.000000 in	95.637613	s.
1.000000	: 	1278732	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 1278732 elements.
1 filter(s) remove 127030952 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 0.656563s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.002290	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  2: start= 2390036, BFS took 	0.002223	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.001974	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.001983	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.001911	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.001858	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.001933	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.002122	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.001821	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.100412	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,306,119	 
1.000000	: iteration 11: start=  221315, BFS took 	0.001956	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.002070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.001911	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.001975	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.001902	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.002023	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.001949	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.002108	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.098936	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,459,899	 
1.000000	: iteration 20: start= 2028424, BFS took 	0.098851	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,468,881	 
1.000000	: iteration 21: start= 1004718, BFS took 	0.002046	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.001919	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.098197	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,538,582	 
1.000000	: iteration 24: start= 1257228, BFS took 	0.002241	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.001915	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.098816	s, covered 	1034862	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,472,624	 
1.000000	: iteration 27: start= 2104657, BFS took 	0.002064	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.001933	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.001740	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.002066	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.001951	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.001956	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.001952	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.097770	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,584,619	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.098479	s, covered 	1034860	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,508,429	 
1.000000	: iteration 36: start= 1032291, BFS took 	0.099049	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,447,955	 
1.000000	: iteration 37: start=  336477, BFS took 	0.098045	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,554,942	 
1.000000	: iteration 38: start= 2250886, BFS took 	0.002067	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.001906	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.098121	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,546,725	 
1.000000	: iteration 41: start= 1919211, BFS took 	0.002025	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.001912	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.098189	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,539,452	 
1.000000	: iteration 44: start= 1924036, BFS took 	0.002024	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.001910	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.001805	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.001942	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.002063	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.001977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.001953	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.001914	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.001926	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.001826	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.001944	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.098754	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,479,147	 
1.000000	: iteration 56: start=  654441, BFS took 	0.001930	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.001804	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 58: start=  141993, BFS took 	0.001740	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.002017	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.001869	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.001784	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.002024	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.001920	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.001908	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.001961	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.001945	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.001944	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.001822	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.001932	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.001892	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.001804	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.001788	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.001916	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.098341	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,523,150	 
1.000000	: iteration 75: start= 2000417, BFS took 	0.002047	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.001981	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.001815	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.001739	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.001946	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.098835	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,470,552	 
1.000000	: iteration 81: start= 2370086, BFS took 	0.098542	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,501,687	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.098615	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	0	, TEPS=	10,493,917	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	1.000000	: 	9.77699756622314453e-02
  firstquartile_C++SR_PythonFilter_Mattime	1.000000	: 	9.81909036636352539e-02
         median_C++SR_PythonFilter_Mattime	1.000000	: 	9.85784530639648438e-02
  thirdquartile_C++SR_PythonFilter_Mattime	1.000000	: 	9.88469719886779785e-02
            max_C++SR_PythonFilter_Mattime	1.000000	: 	1.00411891937255859e-01
           mean_C++SR_PythonFilter_Mattime	1.000000	: 	9.86219495534896851e-02
         stddev_C++SR_PythonFilter_Mattime	1.000000	: 	6.01174736004409112e-04
          total_C++SR_PythonFilter_Mattime	1.000000	: 	1.577951e+00

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03485700000000000e+06
  firstquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03485700000000000e+06
         median_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03485700000000000e+06
  thirdquartile_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03485875000000000e+06
            max_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03486200000000000e+06
           mean_C++SR_PythonFilter_Matnedge	1.000000	: 	1.03485793750000000e+06
         stddev_C++SR_PythonFilter_Matnedge	1.000000	: 	1.43614066163450715e+00
          total_C++SR_PythonFilter_Matnedge	1.000000	: 	1.655773e+07

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.03061199229932707e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.04692990001326315e+07
         median_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.04978026083615236e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.05392349261538126e+07
            max_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.05846195929837562e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.04931807024640515e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	6.04326427307860831e+03

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.08092579005812368e+04
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.08094451831407860e+04
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.08094796749194957e+04
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.08095086660640700e+04
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.08095666386204593e+04
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	1.08094697895012632e+04
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	1.000000	: 	6.45655009792047048e-03
Total runtime for cpm on 1% is	126.030816	s.
--Generating starting verts
Generated starting verts in 63.324589s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.007694	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,559	, TEPS=	0	 (result discarded)
1.000000	: iteration  2: start= 2390036, BFS took 	0.008046	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	621	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.006752	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	148	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.007392	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.006561	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	152	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.006357	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	786	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.006667	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,599	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.007629	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	131	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006306	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	317	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	26.160474	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,970,240	, TEPS=	39,558	 
1.000000	: iteration 11: start=  221315, BFS took 	0.006783	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	147	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.007202	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	277	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.007120	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,123	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.007054	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	141	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.006927	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	288	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.006751	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	444	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.007082	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	423	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.007526	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,328	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	26.000155	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,994,724	, TEPS=	39,802	 
1.000000	: iteration 20: start= 2028424, BFS took 	26.115274	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,977,113	, TEPS=	39,626	 
1.000000	: iteration 21: start= 1004718, BFS took 	0.007213	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.007565	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,454	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	26.017224	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,992,100	, TEPS=	39,775	 
1.000000	: iteration 24: start= 1257228, BFS took 	0.007598	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	131	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.007252	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	965	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	26.117598	s, covered 	1034862	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	3,976,771	, TEPS=	39,623	 
1.000000	: iteration 27: start= 2104657, BFS took 	0.007349	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	272	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.006986	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	429	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.005910	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	507	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.007633	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,179	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.006694	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,493	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.007299	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,384	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.007240	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	26.122227	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,976,053	, TEPS=	39,615	 
1.000000	: iteration 35: start= 1339058, BFS took 	26.502290	s, covered 	1034860	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	3,919,047	, TEPS=	39,047	 
1.000000	: iteration 36: start= 1032291, BFS took 	26.299503	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,949,251	, TEPS=	39,348	 
1.000000	: iteration 37: start=  336477, BFS took 	26.426153	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,930,326	, TEPS=	39,160	 
1.000000	: iteration 38: start= 2250886, BFS took 	0.007462	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	804	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.006976	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,726	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	26.329380	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,944,770	, TEPS=	39,304	 
1.000000	: iteration 41: start= 1919211, BFS took 	0.007066	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	141	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.006681	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,095	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	26.213668	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,962,183	, TEPS=	39,477	 
1.000000	: iteration 44: start= 1924036, BFS took 	0.007087	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,809	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.007399	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	270	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.006271	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	318	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.006713	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,191	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.007492	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,735	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.007264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.007096	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.007199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	277	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.006833	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	292	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.006736	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,305	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.007048	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	283	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	26.045537	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,987,760	, TEPS=	39,732	 
1.000000	: iteration 56: start=  654441, BFS took 	0.007304	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	410	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.006356	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	629	, TEPS=	0	 (result discarded)
1.000000	: iteration 58: start=  141993, BFS took 	0.006030	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	829	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.007260	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	964	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.006500	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	153	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.006210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	322	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.007799	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	128	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.007090	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	141	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.006708	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	745	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.007359	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	543	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.007164	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,675	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.007477	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	133	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.007299	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,836	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.006742	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,153	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.006887	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	145	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.006723	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,487	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.006252	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	7,197	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.006654	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,653	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	26.165160	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,969,529	, TEPS=	39,550	 
1.000000	: iteration 75: start= 2000417, BFS took 	0.007219	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,679	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.007269	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	825	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.006723	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,082	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.006197	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	161	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.006988	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	429	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	26.094375	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,980,297	, TEPS=	39,658	 
1.000000	: iteration 81: start= 2370086, BFS took 	26.047094	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,987,522	, TEPS=	39,730	 
1.000000	: iteration 82: start= 1583401, BFS took 	26.040831	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,988,481	, TEPS=	39,739	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	1.000000	: 	2.60001549720764160e+01
  firstquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	2.60459262728691101e+01
         median_C++SR_PythonFilter_OTFtime	1.000000	: 	2.61199125051498413e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	1.000000	: 	2.62780443429946899e+01
            max_C++SR_PythonFilter_OTFtime	1.000000	: 	2.65022900104522705e+01
           mean_C++SR_PythonFilter_OTFtime	1.000000	: 	2.61685589402914047e+01
         stddev_C++SR_PythonFilter_OTFtime	1.000000	: 	1.49086893323675029e-01
          total_C++SR_PythonFilter_OTFtime	1.000000	: 	4.186969e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  firstquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
         median_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  thirdquartile_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03485875000000000e+06
            max_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03486200000000000e+06
           mean_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.03485793750000000e+06
         stddev_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.43614066163450715e+00
          total_C++SR_PythonFilter_OTFnedge	1.000000	: 	1.655773e+07

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.90479464073429262e+04
  firstquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.93811582600227121e+04
         median_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.96195817309252379e+04
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.97320099063413290e+04
            max_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.98020319921714108e+04
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.95458512408104361e+04
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.69687917542717415e+01

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.91904714494623151e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.95248486776977545e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.97641235630139196e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.98770087811352313e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.99472449727884401e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	3.96901559751027357e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	1.000000	: 	1.70289631146932106e+03
Total runtime for cpo on 1% is	515.089817	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 100))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aa1ff3ae684a8a0506e0330e077ef334;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	1	% in	3.060234	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 68.473008s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.008070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,486	, TEPS=	0	 (result discarded)
1.000000	: iteration  2: start= 2390036, BFS took 	0.008242	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	606	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.007056	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	141	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.007524	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	132	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.007882	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	126	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.007648	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	653	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.008932	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,687	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.007884	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	126	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.007981	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	250	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	0.613399	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	169,324,302	, TEPS=	1,687,086	 
1.000000	: iteration 11: start=  221315, BFS took 	0.007686	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	130	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.007063	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	283	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.008029	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	996	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.006928	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.006566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	304	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.006864	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	437	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.006763	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	443	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.007528	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,328	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	0.613244	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	169,367,310	, TEPS=	1,687,516	 
1.000000	: iteration 20: start= 2028424, BFS took 	0.608125	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	170,792,856	, TEPS=	1,701,720	 
1.000000	: iteration 21: start= 1004718, BFS took 	0.007190	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.008889	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,237	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	0.609891	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	170,298,255	, TEPS=	1,696,790	 
1.000000	: iteration 24: start= 1257228, BFS took 	0.007913	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	126	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.008284	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	845	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	0.607069	s, covered 	1034862	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	171,090,459	, TEPS=	1,704,685	 
1.000000	: iteration 27: start= 2104657, BFS took 	0.007532	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	265	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.008657	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	346	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.007191	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	417	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.008006	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,124	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.006852	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,459	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.007397	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,326	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.007149	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	0.599483	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	173,254,895	, TEPS=	1,726,250	 
1.000000	: iteration 35: start= 1339058, BFS took 	0.609750	s, covered 	1034860	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	170,338,201	, TEPS=	1,697,187	 
1.000000	: iteration 36: start= 1032291, BFS took 	0.612163	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	169,666,173	, TEPS=	1,690,494	 
1.000000	: iteration 37: start=  336477, BFS took 	0.608111	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	170,796,800	, TEPS=	1,701,758	 
1.000000	: iteration 38: start= 2250886, BFS took 	0.007749	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	774	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.008404	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,093	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	0.606799	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	171,166,040	, TEPS=	1,705,436	 
1.000000	: iteration 41: start= 1919211, BFS took 	0.007531	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	132	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.006962	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,010	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	0.609843	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	170,311,638	, TEPS=	1,696,923	 
1.000000	: iteration 44: start= 1924036, BFS took 	0.007342	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,677	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.008566	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	233	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.007427	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.006927	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,154	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.007747	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,678	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.007537	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	132	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.007278	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.007344	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	272	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.007151	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.007512	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,860	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.007423	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	0.616355	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	168,512,257	, TEPS=	1,678,995	 
1.000000	: iteration 56: start=  654441, BFS took 	0.008438	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	355	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.007974	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	501	, TEPS=	0	 (result discarded)
1.000000	: iteration 58: start=  141993, BFS took 	0.007150	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	699	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.007528	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	929	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.006721	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	148	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.007636	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	261	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.008044	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	124	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.006805	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	146	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.006779	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	737	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.007615	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	525	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.006930	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,731	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.007281	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.008163	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,430	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.006875	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,072	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.008676	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	115	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.008837	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,131	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.007671	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,866	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.006872	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,600	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	0.610306	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	170,182,431	, TEPS=	1,695,636	 
1.000000	: iteration 75: start= 2000417, BFS took 	0.007476	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,484	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.007160	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	837	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.007300	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,917	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.007257	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.007268	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	412	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	0.615864	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	168,646,578	, TEPS=	1,680,333	 
1.000000	: iteration 81: start= 2370086, BFS took 	0.613178	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	169,385,334	, TEPS=	1,687,694	 
1.000000	: iteration 82: start= 1583401, BFS took 	0.613347	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	169,338,651	, TEPS=	1,687,229	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	1.000000	: 	5.99483013153076172e-01
  firstquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	6.08114421367645264e-01
         median_PythonSR_SejitsFilter_OTFtime	1.000000	: 	6.10098481178283691e-01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	1.000000	: 	6.13321244716644287e-01
            max_PythonSR_SejitsFilter_OTFtime	1.000000	: 	6.16354942321777344e-01
           mean_PythonSR_SejitsFilter_OTFtime	1.000000	: 	6.10432922840118408e-01
         stddev_PythonSR_SejitsFilter_OTFtime	1.000000	: 	4.13563806640364351e-03
          total_PythonSR_SejitsFilter_OTFtime	1.000000	: 	9.766927e+00

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  firstquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
         median_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485875000000000e+06
            max_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03486200000000000e+06
           mean_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.03485793750000000e+06
         stddev_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.43614066163450715e+00
          total_PythonSR_SejitsFilter_OTFnedge	1.000000	: 	1.655773e+07

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.67899521678490471e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.68730092830740171e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.69621323717712844e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.70174923293563072e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.72625074821886932e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.69528525701521197e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.02733547517972033e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.68512257902487248e+08
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.69345816241403222e+08
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.70240343524113178e+08
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.70795814670559317e+08
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.73254895837188303e+08
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	1.70147143686219782e+08
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	1.000000	: 	2.03467132137651352e+05
Total runtime for pso on 1% is	114.434086	s.
--Generating starting verts
Generated starting verts in 63.358681s.
--Doing BFS
1.000000	: iteration  1: start=  999511, BFS took 	0.007364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,629	, TEPS=	0	 (result discarded)
1.000000	: iteration  2: start= 2390036, BFS took 	0.007761	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	644	, TEPS=	0	 (result discarded)
1.000000	: iteration  3: start= 1726462, BFS took 	0.006753	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	148	, TEPS=	0	 (result discarded)
1.000000	: iteration  4: start= 2235138, BFS took 	0.007265	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration  5: start=     274, BFS took 	0.006828	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	146	, TEPS=	0	 (result discarded)
1.000000	: iteration  6: start=  307086, BFS took 	0.006603	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	757	, TEPS=	0	 (result discarded)
1.000000	: iteration  7: start=  724625, BFS took 	0.006890	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,483	, TEPS=	0	 (result discarded)
1.000000	: iteration  8: start= 2394484, BFS took 	0.007693	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	129	, TEPS=	0	 (result discarded)
1.000000	: iteration  9: start=  351742, BFS took 	0.006965	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	287	, TEPS=	0	 (result discarded)
1.000000	: iteration 10: start=  565854, BFS took 	26.016774	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,992,169	, TEPS=	39,776	 
1.000000	: iteration 11: start=  221315, BFS took 	0.007009	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	142	, TEPS=	0	 (result discarded)
1.000000	: iteration 12: start=  950518, BFS took 	0.007217	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	277	, TEPS=	0	 (result discarded)
1.000000	: iteration 13: start=  446425, BFS took 	0.007322	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,092	, TEPS=	0	 (result discarded)
1.000000	: iteration 14: start=  929738, BFS took 	0.007210	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
1.000000	: iteration 15: start=  828234, BFS took 	0.006918	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	289	, TEPS=	0	 (result discarded)
1.000000	: iteration 16: start= 1605236, BFS took 	0.006704	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	447	, TEPS=	0	 (result discarded)
1.000000	: iteration 17: start=  950965, BFS took 	0.007225	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	415	, TEPS=	0	 (result discarded)
1.000000	: iteration 18: start= 2242285, BFS took 	0.007501	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,333	, TEPS=	0	 (result discarded)
1.000000	: iteration 19: start= 1291427, BFS took 	25.969194	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,999,487	, TEPS=	39,849	 
1.000000	: iteration 20: start= 2028424, BFS took 	25.850384	s, covered 	1034859	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	4,017,866	, TEPS=	40,032	 
1.000000	: iteration 21: start= 1004718, BFS took 	0.007288	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 22: start=  750848, BFS took 	0.007823	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,406	, TEPS=	0	 (result discarded)
1.000000	: iteration 23: start= 1642323, BFS took 	25.759789	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	4,031,995	, TEPS=	40,173	 
1.000000	: iteration 24: start= 1257228, BFS took 	0.007542	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	132	, TEPS=	0	 (result discarded)
1.000000	: iteration 25: start=  490027, BFS took 	0.007489	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	934	, TEPS=	0	 (result discarded)
1.000000	: iteration 26: start= 1062860, BFS took 	25.806131	s, covered 	1034862	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	4,024,769	, TEPS=	40,101	 
1.000000	: iteration 27: start= 2104657, BFS took 	0.007370	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	271	, TEPS=	0	 (result discarded)
1.000000	: iteration 28: start=  550247, BFS took 	0.007318	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	409	, TEPS=	0	 (result discarded)
1.000000	: iteration 29: start=   65642, BFS took 	0.006155	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	487	, TEPS=	0	 (result discarded)
1.000000	: iteration 30: start= 1280874, BFS took 	0.007652	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,176	, TEPS=	0	 (result discarded)
1.000000	: iteration 31: start= 1606965, BFS took 	0.006775	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,476	, TEPS=	0	 (result discarded)
1.000000	: iteration 32: start= 2190569, BFS took 	0.007327	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,367	, TEPS=	0	 (result discarded)
1.000000	: iteration 33: start= 1000189, BFS took 	0.007271	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 34: start= 1095821, BFS took 	25.946986	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	4,002,906	, TEPS=	39,883	 
1.000000	: iteration 35: start= 1339058, BFS took 	25.953274	s, covered 	1034860	 edges, discovered 	338026	 verts, TEPS incl. filtered edges=	4,001,950	, TEPS=	39,873	 
1.000000	: iteration 36: start= 1032291, BFS took 	25.919537	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	4,007,145	, TEPS=	39,925	 
1.000000	: iteration 37: start=  336477, BFS took 	26.018225	s, covered 	1034858	 edges, discovered 	338025	 verts, TEPS incl. filtered edges=	3,991,947	, TEPS=	39,774	 
1.000000	: iteration 38: start= 2250886, BFS took 	0.008249	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	727	, TEPS=	0	 (result discarded)
1.000000	: iteration 39: start=  474806, BFS took 	0.008057	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,227	, TEPS=	0	 (result discarded)
1.000000	: iteration 40: start= 1865630, BFS took 	25.938426	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	4,004,227	, TEPS=	39,896	 
1.000000	: iteration 41: start= 1919211, BFS took 	0.007154	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
1.000000	: iteration 42: start= 1716026, BFS took 	0.006707	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,087	, TEPS=	0	 (result discarded)
1.000000	: iteration 43: start= 2320713, BFS took 	25.849464	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	4,018,008	, TEPS=	40,033	 
1.000000	: iteration 44: start= 1924036, BFS took 	0.007214	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,742	, TEPS=	0	 (result discarded)
1.000000	: iteration 45: start=  751210, BFS took 	0.007534	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	265	, TEPS=	0	 (result discarded)
1.000000	: iteration 46: start=  222423, BFS took 	0.006331	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	315	, TEPS=	0	 (result discarded)
1.000000	: iteration 47: start= 1659347, BFS took 	0.006753	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,184	, TEPS=	0	 (result discarded)
1.000000	: iteration 48: start= 1241899, BFS took 	0.007579	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,715	, TEPS=	0	 (result discarded)
1.000000	: iteration 49: start= 2100515, BFS took 	0.007317	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	136	, TEPS=	0	 (result discarded)
1.000000	: iteration 50: start= 2073266, BFS took 	0.007237	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
1.000000	: iteration 51: start= 2144178, BFS took 	0.007144	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
1.000000	: iteration 52: start= 1987286, BFS took 	0.006977	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	286	, TEPS=	0	 (result discarded)
1.000000	: iteration 53: start=  203832, BFS took 	0.007160	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,050	, TEPS=	0	 (result discarded)
1.000000	: iteration 54: start= 1988380, BFS took 	0.007236	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	276	, TEPS=	0	 (result discarded)
1.000000	: iteration 55: start=   93605, BFS took 	25.821119	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	4,022,419	, TEPS=	40,077	 
1.000000	: iteration 56: start=  654441, BFS took 	0.007687	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	390	, TEPS=	0	 (result discarded)
1.000000	: iteration 57: start=  407046, BFS took 	0.006688	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	598	, TEPS=	0	 (result discarded)
1.000000	: iteration 58: start=  141993, BFS took 	0.006277	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	796	, TEPS=	0	 (result discarded)
1.000000	: iteration 59: start= 2104717, BFS took 	0.007323	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	955	, TEPS=	0	 (result discarded)
1.000000	: iteration 60: start= 1607110, BFS took 	0.006595	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	151	, TEPS=	0	 (result discarded)
1.000000	: iteration 61: start=  235716, BFS took 	0.006784	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	294	, TEPS=	0	 (result discarded)
1.000000	: iteration 62: start= 1421449, BFS took 	0.007799	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	128	, TEPS=	0	 (result discarded)
1.000000	: iteration 63: start= 1009304, BFS took 	0.007101	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
1.000000	: iteration 64: start= 1609809, BFS took 	0.006846	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	730	, TEPS=	0	 (result discarded)
1.000000	: iteration 65: start= 2295854, BFS took 	0.007335	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	545	, TEPS=	0	 (result discarded)
1.000000	: iteration 66: start=  986966, BFS took 	0.007264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,652	, TEPS=	0	 (result discarded)
1.000000	: iteration 67: start= 1277882, BFS took 	0.007392	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
1.000000	: iteration 68: start=  473486, BFS took 	0.007501	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	3,732	, TEPS=	0	 (result discarded)
1.000000	: iteration 69: start= 1658279, BFS took 	0.006920	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	4,046	, TEPS=	0	 (result discarded)
1.000000	: iteration 70: start=  694179, BFS took 	0.007296	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
1.000000	: iteration 71: start=  756222, BFS took 	0.006978	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,433	, TEPS=	0	 (result discarded)
1.000000	: iteration 72: start=  340631, BFS took 	0.006551	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	6,869	, TEPS=	0	 (result discarded)
1.000000	: iteration 73: start= 1645394, BFS took 	0.006800	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,617	, TEPS=	0	 (result discarded)
1.000000	: iteration 74: start= 1877435, BFS took 	26.086738	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,981,462	, TEPS=	39,669	 
1.000000	: iteration 75: start= 2000417, BFS took 	0.007179	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	5,711	, TEPS=	0	 (result discarded)
1.000000	: iteration 76: start=  988766, BFS took 	0.007248	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	827	, TEPS=	0	 (result discarded)
1.000000	: iteration 77: start=   43833, BFS took 	0.006611	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	2,117	, TEPS=	0	 (result discarded)
1.000000	: iteration 78: start=   81901, BFS took 	0.006000	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	166	, TEPS=	0	 (result discarded)
1.000000	: iteration 79: start= 1797933, BFS took 	0.006928	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	433	, TEPS=	0	 (result discarded)
1.000000	: iteration 80: start= 1495665, BFS took 	25.966992	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	3,999,822	, TEPS=	39,852	 
1.000000	: iteration 81: start= 2370086, BFS took 	25.832340	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	4,020,671	, TEPS=	40,060	 
1.000000	: iteration 82: start= 1583401, BFS took 	25.947417	s, covered 	1034857	 edges, discovered 	338024	 verts, TEPS incl. filtered edges=	4,002,840	, TEPS=	39,882	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.57597889900207520e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.58366210460662842e+01
         median_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.59427059888839722e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.59686434864997864e+01
            max_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.60867378711700439e+01
           mean_PythonSR_PythonFilter_OTFtime	1.000000	: 	2.59176743924617767e+01
         stddev_PythonSR_PythonFilter_OTFtime	1.000000	: 	8.95174634293163657e-02
          total_PythonSR_PythonFilter_OTFtime	1.000000	: 	4.146828e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  firstquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
         median_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03485700000000000e+06
  thirdquartile_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03485875000000000e+06
            max_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03486200000000000e+06
           mean_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.03485793750000000e+06
         stddev_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.43614066163450715e+00
          total_PythonSR_PythonFilter_OTFnedge	1.000000	: 	1.655773e+07

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	3.96698508303592826e+04
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	3.98503103137109720e+04
         median_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	3.98901151070113265e+04
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	4.00538864336752522e+04
            max_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	4.01733492615525611e+04
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	3.99286572159936622e+04
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.62134433070568100e+01

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	3.98146228604479460e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	3.99957098038331047e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	4.00356724048346747e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	4.02000599717795663e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	4.03199587699403474e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	4.00743588146829093e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	1.000000	: 	1.62735958933148640e+03
Total runtime for ppo on 1% is	511.016351	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	0.045970	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 63.862882s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	1.258261	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	98,565,375	, TEPS=	9,865,044	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.009772	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	511	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	1.310132	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	94,662,951	, TEPS=	9,474,466	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.009025	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	110	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.006609	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	151	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.006345	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	788	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	1.261728	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	98,294,547	, TEPS=	9,837,938	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.009282	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	107	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.006937	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	288	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	1.280358	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	96,864,280	, TEPS=	9,694,788	 
10.000000	: iteration 11: start=  221315, BFS took 	0.006615	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	151	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.007028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	284	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.006959	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,149	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.006853	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	145	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.006712	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	297	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	0.007176	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	418	, TEPS=	0	 (result discarded)
10.000000	: iteration 17: start=  950965, BFS took 	0.007146	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	419	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	1.268908	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	97,738,340	, TEPS=	9,782,270	 
10.000000	: iteration 19: start= 1291427, BFS took 	1.269713	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	97,676,381	, TEPS=	9,776,068	 
10.000000	: iteration 20: start= 2028424, BFS took 	1.276933	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	97,124,100	, TEPS=	9,720,793	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.007166	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	1.319212	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	94,011,408	, TEPS=	9,409,255	 
10.000000	: iteration 23: start= 1642323, BFS took 	1.312306	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	94,506,120	, TEPS=	9,458,769	 
10.000000	: iteration 24: start= 1257228, BFS took 	0.007417	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	134	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	1.254988	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	98,822,433	, TEPS=	9,890,773	 
10.000000	: iteration 26: start= 1062860, BFS took 	1.257821	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	98,599,845	, TEPS=	9,868,494	 
10.000000	: iteration 27: start= 2104657, BFS took 	1.282079	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	96,734,263	, TEPS=	9,681,776	 
10.000000	: iteration 28: start=  550247, BFS took 	0.006949	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	431	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.005744	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	522	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.007762	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,159	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.013790	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	797	, TEPS=	72	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	1.253591	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	98,932,571	, TEPS=	9,901,796	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.007161	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	139	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	1.258952	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	98,511,261	, TEPS=	9,859,628	 
10.000000	: iteration 35: start= 1339058, BFS took 	1.318615	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	94,053,964	, TEPS=	9,413,514	 
10.000000	: iteration 36: start= 1032291, BFS took 	1.321093	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	93,877,537	, TEPS=	9,395,857	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.25359082221984863e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.25843375921249390e+00
         median_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.27332293987274170e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.31176263093948364e+00
            max_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.32109308242797852e+00
           mean_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	1.28154312074184418e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.57397196416607778e-02
          total_SejitsSR_SejitsFilter_OTFtime	10.000000	: 	2.050469e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128017500000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128020000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128012500000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	4.47213595499957928e-01
          total_SejitsSR_SejitsFilter_OTFnedge	10.000000	: 	1.986048e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.39585723754382320e+06
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.46269344490756281e+06
         median_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.74843096323828027e+06
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.86369096586823463e+06
            max_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.90179632778382301e+06
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.68582410867370293e+06
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.40841039168547140e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.38775379642949551e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.45453279865515828e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.74002407311822772e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.85518467737515271e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.89325717783931047e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	9.67747109076753408e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	10.000000	: 	1.40719655949416861e+05
Total runtime for sso on 10% is	99.047663	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	0.062187	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 72.251396s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	1.441965	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	86,008,297	, TEPS=	8,608,253	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.008719	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	573	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	1.494964	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	82,959,158	, TEPS=	8,303,076	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.008513	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	117	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.006895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	145	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.007357	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	679	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	1.444541	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	85,854,929	, TEPS=	8,592,903	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.009075	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	110	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.007736	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	258	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	1.472680	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	84,214,463	, TEPS=	8,428,715	 
10.000000	: iteration 11: start=  221315, BFS took 	0.007381	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.006769	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	295	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.007705	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,038	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.006556	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	152	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.006257	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	319	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	0.007647	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	392	, TEPS=	0	 (result discarded)
10.000000	: iteration 17: start=  950965, BFS took 	0.006895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	435	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	1.460040	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	84,943,533	, TEPS=	8,501,685	 
10.000000	: iteration 19: start= 1291427, BFS took 	1.464725	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	84,671,841	, TEPS=	8,474,492	 
10.000000	: iteration 20: start= 2028424, BFS took 	1.464322	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	84,695,139	, TEPS=	8,476,824	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.006934	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	1.510368	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	82,113,091	, TEPS=	8,218,396	 
10.000000	: iteration 23: start= 1642323, BFS took 	1.496430	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	82,877,883	, TEPS=	8,294,941	 
10.000000	: iteration 24: start= 1257228, BFS took 	0.007425	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	134	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	1.446973	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	85,710,636	, TEPS=	8,578,461	 
10.000000	: iteration 26: start= 1062860, BFS took 	1.457152	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	85,111,898	, TEPS=	8,518,536	 
10.000000	: iteration 27: start= 2104657, BFS took 	1.482597	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	83,651,171	, TEPS=	8,372,337	 
10.000000	: iteration 28: start=  550247, BFS took 	0.008218	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	365	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.006809	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	440	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.007348	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,224	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.013810	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	796	, TEPS=	72	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	1.445444	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	85,801,286	, TEPS=	8,587,534	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.006920	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	1.440618	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	86,088,720	, TEPS=	8,616,302	 
10.000000	: iteration 35: start= 1339058, BFS took 	1.495265	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	82,942,463	, TEPS=	8,301,405	 
10.000000	: iteration 36: start= 1032291, BFS took 	1.506294	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	82,335,164	, TEPS=	8,240,623	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.44061803817749023e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.44582629203796387e+00
         median_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.46452355384826660e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.49518978595733643e+00
            max_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.51036787033081055e+00
           mean_C++SR_SejitsFilter_OTFtime	10.000000	: 	1.47027364373207092e+00
         stddev_C++SR_SejitsFilter_OTFtime	10.000000	: 	2.42577327788695424e-02
          total_C++SR_SejitsFilter_OTFtime	10.000000	: 	2.352438e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24128017500000000e+07
            max_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24128020000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.24128012500000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	10.000000	: 	4.47213595499957928e-01
          total_C++SR_SejitsFilter_OTFnedge	10.000000	: 	1.986048e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.21839648726191930e+06
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.30182326074994449e+06
         median_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.47565831377497315e+06
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.58526620312163793e+06
            max_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.61630263612643257e+06
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.44251089429918490e+06
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.13524229256907420e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.21130914105290920e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.29466375149179548e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.46834904232321829e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.57786240758846700e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.60887207527246624e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	8.43523010513191819e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	10.000000	: 	1.13426394014387464e+05
Total runtime for cso on 10% is	110.431797	s.
--Materializing the filter
Materialized 10.000000 in	96.468217	s.
10.000000	: 	12840927	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 12840927 elements.
1 filter(s) remove 115468757 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 2.419851s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	0.636544	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,500,303	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.003979	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	0.671249	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,492,099	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.003837	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.003502	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.003308	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	0.632956	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,610,842	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.003936	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.003600	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	0.638933	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,427,392	 
10.000000	: iteration 11: start=  221315, BFS took 	0.003507	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.002902	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.003272	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.002495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.002415	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	0.003470	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 17: start=  950965, BFS took 	0.002758	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	0.664247	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,687,031	 
10.000000	: iteration 19: start= 1291427, BFS took 	0.637219	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,479,648	 
10.000000	: iteration 20: start= 2028424, BFS took 	0.639261	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,417,422	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.003140	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	0.669022	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,553,657	 
10.000000	: iteration 23: start= 1642323, BFS took 	0.659894	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,810,295	 
10.000000	: iteration 24: start= 1257228, BFS took 	0.003142	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	0.639401	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,413,172	 
10.000000	: iteration 26: start= 1062860, BFS took 	0.653401	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,997,220	 
10.000000	: iteration 27: start= 2104657, BFS took 	0.644343	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,264,279	 
10.000000	: iteration 28: start=  550247, BFS took 	0.003654	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.003184	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.003038	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.005582	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	0	, TEPS=	179	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	0.635329	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,537,595	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.003116	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	0.637279	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,477,818	 
10.000000	: iteration 35: start= 1339058, BFS took 	0.643211	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	0	, TEPS=	19,298,175	 
10.000000	: iteration 36: start= 1032291, BFS took 	0.665941	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	0	, TEPS=	18,639,492	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	10.000000	: 	6.32956027984619141e-01
  firstquartile_C++SR_PythonFilter_Mattime	10.000000	: 	6.37233912944793701e-01
         median_C++SR_PythonFilter_Mattime	10.000000	: 	6.41306042671203613e-01
  thirdquartile_C++SR_PythonFilter_Mattime	10.000000	: 	6.63158595561981201e-01
            max_C++SR_PythonFilter_Mattime	10.000000	: 	6.71248912811279297e-01
           mean_C++SR_PythonFilter_Mattime	10.000000	: 	6.48014321923255920e-01
         stddev_C++SR_PythonFilter_Mattime	10.000000	: 	1.35573460375646507e-02
          total_C++SR_PythonFilter_Mattime	10.000000	: 	1.036823e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24128010000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24128010000000000e+07
         median_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24128010000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24128017500000000e+07
            max_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24128020000000000e+07
           mean_C++SR_PythonFilter_Matnedge	10.000000	: 	1.24128012500000000e+07
         stddev_C++SR_PythonFilter_Matnedge	10.000000	: 	4.47213595499957928e-01
          total_C++SR_PythonFilter_Matnedge	10.000000	: 	1.986048e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.84920999693147242e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.87178477140020654e+07
         median_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.93556737558173165e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.94791908722539246e+07
            max_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.96108425407106355e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.91551341316064484e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	2.96745900749228276e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.27783304820282952e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.27793937966797428e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.27822695433627174e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.27828055645807282e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.27833687232924538e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.27813868638533895e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	10.000000	: 	1.32103478870486524e+00
Total runtime for cpm on 10% is	124.246446	s.
--Generating starting verts
Generated starting verts in 64.020563s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	32.457141	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,821,068	, TEPS=	382,436	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.008799	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	568	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	32.600447	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,804,271	, TEPS=	380,755	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.008473	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	118	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.006895	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	145	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.007534	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	663	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	32.522651	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,813,371	, TEPS=	381,666	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.008839	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	113	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.007676	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	260	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	32.487158	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,817,538	, TEPS=	382,083	 
10.000000	: iteration 11: start=  221315, BFS took 	0.007333	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	136	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.006795	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	294	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.007788	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,027	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.006620	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	151	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.006355	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	314	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	0.007289	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	411	, TEPS=	0	 (result discarded)
10.000000	: iteration 17: start=  950965, BFS took 	0.006905	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	434	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	32.394345	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,828,475	, TEPS=	383,178	 
10.000000	: iteration 19: start= 1291427, BFS took 	32.863922	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,773,772	, TEPS=	377,702	 
10.000000	: iteration 20: start= 2028424, BFS took 	32.253385	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,845,207	, TEPS=	384,852	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.007479	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	133	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	32.623844	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,801,543	, TEPS=	380,482	 
10.000000	: iteration 23: start= 1642323, BFS took 	32.448042	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,822,140	, TEPS=	382,543	 
10.000000	: iteration 24: start= 1257228, BFS took 	0.007727	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	129	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	32.048257	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,869,819	, TEPS=	387,315	 
10.000000	: iteration 26: start= 1062860, BFS took 	32.590728	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,805,406	, TEPS=	380,869	 
10.000000	: iteration 27: start= 2104657, BFS took 	32.222381	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,848,907	, TEPS=	385,222	 
10.000000	: iteration 28: start=  550247, BFS took 	0.008234	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	364	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.006801	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	441	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.008198	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,097	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.013831	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	795	, TEPS=	72	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	32.273816	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,842,773	, TEPS=	384,609	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.007250	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	32.180974	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,853,859	, TEPS=	385,718	 
10.000000	: iteration 35: start= 1339058, BFS took 	32.297354	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,839,972	, TEPS=	384,328	 
10.000000	: iteration 36: start= 1032291, BFS took 	32.203105	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,851,211	, TEPS=	385,453	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	10.000000	: 	3.20482571125030518e+01
  firstquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	3.22301321029663086e+01
         median_C++SR_PythonFilter_OTFtime	10.000000	: 	3.24211933612823486e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	10.000000	: 	3.25737087726593018e+01
            max_C++SR_PythonFilter_OTFtime	10.000000	: 	3.28639218807220459e+01
           mean_C++SR_PythonFilter_OTFtime	10.000000	: 	3.24042218923568726e+01
         stddev_C++SR_PythonFilter_OTFtime	10.000000	: 	2.09731840272843501e-01
          total_C++SR_PythonFilter_OTFtime	10.000000	: 	5.184676e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
         median_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24128017500000000e+07
            max_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24128020000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.24128012500000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	10.000000	: 	4.47213595499957928e-01
          total_C++SR_PythonFilter_OTFnedge	10.000000	: 	1.986048e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.77702973036865122e+05
  firstquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.81068402833859320e+05
         median_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.82860969185071415e+05
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.85130407258931315e+05
            max_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.87315945339110796e+05
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.83061234776669822e+05
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	2.80531471576606179e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.77377248065912118e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.80739775570361316e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.82530796041174326e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.84798258387603937e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.86981930295408936e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	3.82730884313606471e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	10.000000	: 	2.80289846545041064e+03
Total runtime for cpo on 10% is	597.120482	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 1000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_1ff01f768c575b931f8a3ca16adf99f5;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	10	% in	6.063385	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 64.995999s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	3.164657	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,189,387	, TEPS=	3,922,321	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.007956	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	628	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	3.185564	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	38,932,186	, TEPS=	3,896,579	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.007776	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	128	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.007357	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.007817	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	639	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	3.162492	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,216,213	, TEPS=	3,925,006	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.007885	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	126	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.008006	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	249	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	3.203489	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	38,714,342	, TEPS=	3,874,775	 
10.000000	: iteration 11: start=  221315, BFS took 	0.007744	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	129	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.007189	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	278	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.007889	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,014	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.006918	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.006614	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	302	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	0.006897	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	434	, TEPS=	0	 (result discarded)
10.000000	: iteration 17: start=  950965, BFS took 	0.006970	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	430	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	3.179556	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,005,747	, TEPS=	3,903,941	 
10.000000	: iteration 19: start= 1291427, BFS took 	3.190869	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	38,867,455	, TEPS=	3,890,100	 
10.000000	: iteration 20: start= 2028424, BFS took 	3.188754	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	38,893,235	, TEPS=	3,892,680	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.007264	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	3.238800	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	38,292,260	, TEPS=	3,832,531	 
10.000000	: iteration 23: start= 1642323, BFS took 	3.213532	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	38,593,349	, TEPS=	3,862,666	 
10.000000	: iteration 24: start= 1257228, BFS took 	0.008227	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	121	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	3.169011	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,135,543	, TEPS=	3,916,932	 
10.000000	: iteration 26: start= 1062860, BFS took 	3.173658	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,078,236	, TEPS=	3,911,196	 
10.000000	: iteration 27: start= 2104657, BFS took 	3.200325	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	38,752,615	, TEPS=	3,878,606	 
10.000000	: iteration 28: start=  550247, BFS took 	0.008409	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	356	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.007293	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	411	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.007800	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,153	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.014449	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	761	, TEPS=	69	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	3.176068	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,048,585	, TEPS=	3,908,228	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.007386	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	135	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	3.154436	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	39,316,365	, TEPS=	3,935,030	 
10.000000	: iteration 35: start= 1339058, BFS took 	3.183739	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	38,954,501	, TEPS=	3,898,812	 
10.000000	: iteration 36: start= 1032291, BFS took 	3.206710	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	38,675,453	, TEPS=	3,870,883	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.15443611145019531e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.17017269134521484e+00
         median_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.18465137481689453e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.20269787311553955e+00
            max_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.23880004882812500e+00
           mean_PythonSR_SejitsFilter_OTFtime	10.000000	: 	3.18697875738143921e+00
         stddev_PythonSR_SejitsFilter_OTFtime	10.000000	: 	2.17449565645049490e-02
          total_PythonSR_SejitsFilter_OTFtime	10.000000	: 	5.099166e+01

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128017500000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128020000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.24128012500000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	4.47213595499957928e-01
          total_PythonSR_SejitsFilter_OTFnedge	10.000000	: 	1.986048e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.83253112661006907e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.87573352664183127e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.89769587243993487e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.91549836755043035e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.93503008507388597e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.89484907073434442e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.65138144610635163e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.82922604453071281e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.87239109393914342e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.89433442106272429e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.91212170471459851e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.93163657839890718e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	3.89149016839853600e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	10.000000	: 	2.64909801465870987e+04
Total runtime for pso on 10% is	136.657093	s.
--Generating starting verts
Generated starting verts in 65.419989s.
--Doing BFS
10.000000	: iteration  1: start=  999511, BFS took 	34.708685	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,573,196	, TEPS=	357,628	 
10.000000	: iteration  2: start= 2390036, BFS took 	0.008221	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	608	, TEPS=	0	 (result discarded)
10.000000	: iteration  3: start= 1726462, BFS took 	34.660702	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,578,143	, TEPS=	358,123	 
10.000000	: iteration  4: start= 2235138, BFS took 	0.007844	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	127	, TEPS=	0	 (result discarded)
10.000000	: iteration  5: start=     274, BFS took 	0.007442	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	134	, TEPS=	0	 (result discarded)
10.000000	: iteration  6: start=  307086, BFS took 	0.007867	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	635	, TEPS=	0	 (result discarded)
10.000000	: iteration  7: start=  724625, BFS took 	34.133940	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,633,362	, TEPS=	363,649	 
10.000000	: iteration  8: start= 2394484, BFS took 	0.007860	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	127	, TEPS=	0	 (result discarded)
10.000000	: iteration  9: start=  351742, BFS took 	0.008070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	247	, TEPS=	0	 (result discarded)
10.000000	: iteration 10: start=  565854, BFS took 	34.257716	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,620,234	, TEPS=	362,335	 
10.000000	: iteration 11: start=  221315, BFS took 	0.007666	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	130	, TEPS=	0	 (result discarded)
10.000000	: iteration 12: start=  950518, BFS took 	0.007295	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	274	, TEPS=	0	 (result discarded)
10.000000	: iteration 13: start=  446425, BFS took 	0.008109	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	986	, TEPS=	0	 (result discarded)
10.000000	: iteration 14: start=  929738, BFS took 	0.006963	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	143	, TEPS=	0	 (result discarded)
10.000000	: iteration 15: start=  828234, BFS took 	0.006787	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	294	, TEPS=	0	 (result discarded)
10.000000	: iteration 16: start= 1605236, BFS took 	0.006868	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	436	, TEPS=	0	 (result discarded)
10.000000	: iteration 17: start=  950965, BFS took 	0.007001	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	428	, TEPS=	0	 (result discarded)
10.000000	: iteration 18: start= 2242285, BFS took 	34.215187	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,624,734	, TEPS=	362,786	 
10.000000	: iteration 19: start= 1291427, BFS took 	34.345452	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,610,986	, TEPS=	361,410	 
10.000000	: iteration 20: start= 2028424, BFS took 	34.182777	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,628,171	, TEPS=	363,130	 
10.000000	: iteration 21: start= 1004718, BFS took 	0.007316	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	136	, TEPS=	0	 (result discarded)
10.000000	: iteration 22: start=  750848, BFS took 	34.193378	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,627,046	, TEPS=	363,017	 
10.000000	: iteration 23: start= 1642323, BFS took 	34.255986	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,620,417	, TEPS=	362,354	 
10.000000	: iteration 24: start= 1257228, BFS took 	0.008294	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	120	, TEPS=	0	 (result discarded)
10.000000	: iteration 25: start=  490027, BFS took 	34.137738	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,632,957	, TEPS=	363,609	 
10.000000	: iteration 26: start= 1062860, BFS took 	34.111997	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,635,699	, TEPS=	363,883	 
10.000000	: iteration 27: start= 2104657, BFS took 	34.239043	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,622,208	, TEPS=	362,533	 
10.000000	: iteration 28: start=  550247, BFS took 	0.008422	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	356	, TEPS=	0	 (result discarded)
10.000000	: iteration 29: start=   65642, BFS took 	0.007384	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	406	, TEPS=	0	 (result discarded)
10.000000	: iteration 30: start= 1280874, BFS took 	0.007916	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	1,136	, TEPS=	0	 (result discarded)
10.000000	: iteration 31: start= 1606965, BFS took 	0.013893	s, covered 	1	 edges, discovered 	2	 verts, TEPS incl. filtered edges=	791	, TEPS=	71	 (result discarded)
10.000000	: iteration 32: start= 2190569, BFS took 	34.104259	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,636,524	, TEPS=	363,966	 
10.000000	: iteration 33: start= 1000189, BFS took 	0.007456	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	134	, TEPS=	0	 (result discarded)
10.000000	: iteration 34: start= 1095821, BFS took 	34.084938	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,638,585	, TEPS=	364,172	 
10.000000	: iteration 35: start= 1339058, BFS took 	34.215945	s, covered 	12412801	 edges, discovered 	1156860	 verts, TEPS incl. filtered edges=	3,624,654	, TEPS=	362,778	 
10.000000	: iteration 36: start= 1032291, BFS took 	34.222994	s, covered 	12412802	 edges, discovered 	1156861	 verts, TEPS incl. filtered edges=	3,623,907	, TEPS=	362,703	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.40849380493164062e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.41348895430564880e+01
         median_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.42155660390853882e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.42572836279869080e+01
            max_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.47086851596832275e+01
           mean_PythonSR_PythonFilter_OTFtime	10.000000	: 	3.42544211149215698e+01
         stddev_PythonSR_PythonFilter_OTFtime	10.000000	: 	1.81201782781533843e-01
          total_PythonSR_PythonFilter_OTFtime	10.000000	: 	5.480707e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24128010000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24128017500000000e+07
            max_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24128020000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.24128012500000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	10.000000	: 	4.47213595499957928e-01
          total_PythonSR_PythonFilter_OTFnedge	10.000000	: 	1.986048e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.57628096336487273e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.62340492046376341e+05
         median_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.62782278315759730e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.63639701050088042e+05
            max_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.64172614368267765e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.62370778618627926e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.19528047557429460e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.57319683616421651e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.62028015432019951e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.62469420712028025e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.63326104018776491e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.63858557761079213e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	3.62058271495122463e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	10.000000	: 	1.19425258294406262e+03
Total runtime for ppo on 10% is	628.077215	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	0.068103	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 71.684647s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	2.406566	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	52,639,797	, TEPS=	13,165,098	 
25.000000	: iteration  2: start= 2390036, BFS took 	2.444378	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	51,825,508	, TEPS=	12,961,446	 
25.000000	: iteration  3: start= 1726462, BFS took 	2.266655	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	55,889,027	, TEPS=	13,977,723	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.007225	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.006509	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	153	, TEPS=	0	 (result discarded)
25.000000	: iteration  6: start=  307086, BFS took 	0.006364	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	785	, TEPS=	0	 (result discarded)
25.000000	: iteration  7: start=  724625, BFS took 	2.253795	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	56,207,927	, TEPS=	14,057,479	 
25.000000	: iteration  8: start= 2394484, BFS took 	2.284157	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	55,460,790	, TEPS=	13,870,622	 
25.000000	: iteration  9: start=  351742, BFS took 	0.006810	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	293	, TEPS=	0	 (result discarded)
25.000000	: iteration 10: start=  565854, BFS took 	2.380032	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	53,226,658	, TEPS=	13,311,870	 
25.000000	: iteration 11: start=  221315, BFS took 	0.006538	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	152	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.007336	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	272	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	2.241479	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	56,516,766	, TEPS=	14,134,719	 
25.000000	: iteration 14: start=  929738, BFS took 	2.254985	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	56,178,261	, TEPS=	14,050,060	 
25.000000	: iteration 15: start=  828234, BFS took 	0.007034	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	284	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	0.006411	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	467	, TEPS=	0	 (result discarded)
25.000000	: iteration 17: start=  950965, BFS took 	0.007365	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	407	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	2.253202	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	56,222,719	, TEPS=	14,061,178	 
25.000000	: iteration 19: start= 1291427, BFS took 	2.426927	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	52,198,165	, TEPS=	13,054,646	 
25.000000	: iteration 20: start= 2028424, BFS took 	2.448670	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	51,734,669	, TEPS=	12,938,727	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.007612	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	131	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	2.403436	s, covered 	31682680	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	52,708,353	, TEPS=	13,182,244	 
25.000000	: iteration 23: start= 1642323, BFS took 	2.333385	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	54,290,715	, TEPS=	13,577,989	 
25.000000	: iteration 24: start= 1257228, BFS took 	2.265827	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	55,909,451	, TEPS=	13,982,831	 
25.000000	: iteration 25: start=  490027, BFS took 	2.427818	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	52,179,009	, TEPS=	13,049,855	 
25.000000	: iteration 26: start= 1062860, BFS took 	2.435433	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	52,015,856	, TEPS=	13,009,051	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.24147891998291016e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.25769555568695068e+00
         median_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.35670840740203857e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.42759531736373901e+00
            max_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.44867014884948730e+00
           mean_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	2.34542155265808105e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	8.27082100041705987e-02
          total_SejitsSR_SejitsFilter_OTFtime	25.000000	: 	3.752674e+01

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
         median_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
            max_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826800000000000e+07
           mean_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826763750000000e+07
         stddev_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	1.02469507659595993e+00
          total_SejitsSR_SejitsFilter_OTFnedge	25.000000	: 	5.069228e+08

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.29387275843935814e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.30510536800465975e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.34449299265585877e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.40332532155179884e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.41347195896187853e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.35083078524775673e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	3.99100599251767344e+04

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	5.17346695550323054e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	5.21837982195870057e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	5.37586870427702516e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	5.61110588539802358e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	5.65167666180710122e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	5.40120993097783774e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.59577823819573328e+05
Total runtime for sso on 25% is	119.893825	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	3.063803	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 69.002154s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	2.736831	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	46,287,528	, TEPS=	11,576,409	 
25.000000	: iteration  2: start= 2390036, BFS took 	2.712309	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	46,706,011	, TEPS=	11,681,071	 
25.000000	: iteration  3: start= 1726462, BFS took 	2.495952	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	50,754,635	, TEPS=	12,693,623	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.007577	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	131	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.006620	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	151	, TEPS=	0	 (result discarded)
25.000000	: iteration  6: start=  307086, BFS took 	0.006861	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	728	, TEPS=	0	 (result discarded)
25.000000	: iteration  7: start=  724625, BFS took 	2.515020	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	50,369,831	, TEPS=	12,597,384	 
25.000000	: iteration  8: start= 2394484, BFS took 	2.517889	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	50,312,440	, TEPS=	12,583,031	 
25.000000	: iteration  9: start=  351742, BFS took 	0.007028	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	284	, TEPS=	0	 (result discarded)
25.000000	: iteration 10: start=  565854, BFS took 	2.603261	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	48,662,481	, TEPS=	12,170,380	 
25.000000	: iteration 11: start=  221315, BFS took 	0.007255	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	137	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.007143	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	279	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	2.466298	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	51,364,894	, TEPS=	12,846,247	 
25.000000	: iteration 14: start=  929738, BFS took 	2.512193	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	50,426,517	, TEPS=	12,611,561	 
25.000000	: iteration 15: start=  828234, BFS took 	0.007057	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	283	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	0.006953	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	431	, TEPS=	0	 (result discarded)
25.000000	: iteration 17: start=  950965, BFS took 	0.007266	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	412	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	2.516509	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	50,340,029	, TEPS=	12,589,931	 
25.000000	: iteration 19: start= 1291427, BFS took 	2.644994	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	47,894,679	, TEPS=	11,978,354	 
25.000000	: iteration 20: start= 2028424, BFS took 	2.717467	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	46,617,364	, TEPS=	11,658,900	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.007206	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	2.695680	s, covered 	31682680	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	46,994,137	, TEPS=	11,753,131	 
25.000000	: iteration 23: start= 1642323, BFS took 	2.542445	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	49,826,503	, TEPS=	12,461,499	 
25.000000	: iteration 24: start= 1257228, BFS took 	2.538831	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	49,897,429	, TEPS=	12,479,237	 
25.000000	: iteration 25: start=  490027, BFS took 	2.732998	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	46,352,447	, TEPS=	11,592,645	 
25.000000	: iteration 26: start= 1062860, BFS took 	2.741513	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	46,208,481	, TEPS=	11,556,639	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.46629810333251953e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.51539236307144165e+00
         median_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.57285296916961670e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.71617740392684937e+00
            max_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.74151277542114258e+00
           mean_C++SR_SejitsFilter_OTFtime	25.000000	: 	2.60563686490058899e+00
         stddev_C++SR_SejitsFilter_OTFtime	25.000000	: 	1.02609665990298415e-01
          total_C++SR_SejitsFilter_OTFtime	25.000000	: 	4.169019e+01

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  firstquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
         median_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  thirdquartile_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
            max_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16826800000000000e+07
           mean_C++SR_SejitsFilter_OTFnedge	25.000000	: 	3.16826763750000000e+07
         stddev_C++SR_SejitsFilter_OTFnedge	25.000000	: 	1.02469507659595993e+00
          total_C++SR_SejitsFilter_OTFnedge	25.000000	: 	5.069228e+08

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.15566399267036095e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.16644433440246396e+07
         median_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.23159397598961629e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.25955212975615226e+07
            max_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.28462475631756075e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.21592831319193970e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	4.33485601151810260e+04

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	4.62084810020772740e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	4.66395260283852518e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	4.92444925192212984e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	5.03623813046882153e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	5.13648941418823153e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	4.86181108113639280e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	25.000000	: 	1.73326443503184593e+05
Total runtime for cso on 25% is	124.361828	s.
--Materializing the filter
Materialized 25.000000 in	96.902785	s.
25.000000	: 	32089665	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 32089665 elements.
1 filter(s) remove 96220019 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 5.306242s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	1.519190	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,854,978	 
25.000000	: iteration  2: start= 2390036, BFS took 	1.566582	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,224,078	 
25.000000	: iteration  3: start= 1726462, BFS took 	1.494359	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,201,515	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.004555	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.004081	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  6: start=  307086, BFS took 	0.004159	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration  7: start=  724625, BFS took 	1.441288	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,982,196	 
25.000000	: iteration  8: start= 2394484, BFS took 	1.519004	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,857,532	 
25.000000	: iteration  9: start=  351742, BFS took 	0.004275	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 10: start=  565854, BFS took 	1.567850	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,207,719	 
25.000000	: iteration 11: start=  221315, BFS took 	0.004194	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.004711	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	1.457504	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,737,628	 
25.000000	: iteration 14: start=  929738, BFS took 	1.429697	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	0	, TEPS=	22,160,413	 
25.000000	: iteration 15: start=  828234, BFS took 	0.004576	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	0.004199	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 17: start=  950965, BFS took 	0.004646	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	1.434134	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	22,091,851	 
25.000000	: iteration 19: start= 1291427, BFS took 	1.536694	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,617,426	 
25.000000	: iteration 20: start= 2028424, BFS took 	1.541466	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,553,600	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.004070	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	0	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	1.446343	s, covered 	31682680	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,905,371	 
25.000000	: iteration 23: start= 1642323, BFS took 	1.520032	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,843,427	 
25.000000	: iteration 24: start= 1257228, BFS took 	1.417681	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	22,348,237	 
25.000000	: iteration 25: start=  490027, BFS took 	1.478587	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,427,668	 
25.000000	: iteration 26: start= 1062860, BFS took 	1.498364	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,144,846	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	25.000000	: 	1.41768121719360352e+00
  firstquartile_C++SR_PythonFilter_Mattime	25.000000	: 	1.44255173206329346e+00
         median_C++SR_PythonFilter_Mattime	25.000000	: 	1.49636149406433105e+00
  thirdquartile_C++SR_PythonFilter_Mattime	25.000000	: 	1.53252851963043213e+00
            max_C++SR_PythonFilter_Mattime	25.000000	: 	1.56785011291503906e+00
           mean_C++SR_PythonFilter_Mattime	25.000000	: 	1.49179846048355103e+00
         stddev_C++SR_PythonFilter_Mattime	25.000000	: 	4.95576828197630756e-02
          total_C++SR_PythonFilter_Mattime	25.000000	: 	2.386878e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16826760000000000e+07
  firstquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16826760000000000e+07
         median_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16826760000000000e+07
  thirdquartile_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16826760000000000e+07
            max_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16826800000000000e+07
           mean_C++SR_PythonFilter_Matnedge	25.000000	: 	3.16826763750000000e+07
         stddev_C++SR_PythonFilter_Matnedge	25.000000	: 	1.02469507659595993e+00
          total_C++SR_PythonFilter_Matnedge	25.000000	: 	5.069228e+08

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.02077199465794004e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.06739265581979267e+07
         median_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.11731809894221164e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.19629903805408254e+07
            max_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.23482371182980165e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	2.12379065974171907e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	7.03443878515772376e+04

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.21747452359450923e+05
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.21862906889559352e+05
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.21981207375769620e+05
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.22157389950732235e+05
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.22238870488860644e+05
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	3.21996142880856292e+05
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	25.000000	: 	1.61696515030455608e+01
Total runtime for cpm on 25% is	138.759605	s.
--Generating starting verts
Generated starting verts in 64.757912s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	34.436889	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,678,646	, TEPS=	920,021	 
25.000000	: iteration  2: start= 2390036, BFS took 	34.336861	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,689,362	, TEPS=	922,701	 
25.000000	: iteration  3: start= 1726462, BFS took 	34.173912	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,706,954	, TEPS=	927,101	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.006700	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	149	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.006746	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	148	, TEPS=	0	 (result discarded)
25.000000	: iteration  6: start=  307086, BFS took 	0.006794	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	735	, TEPS=	0	 (result discarded)
25.000000	: iteration  7: start=  724625, BFS took 	34.228176	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,701,077	, TEPS=	925,631	 
25.000000	: iteration  8: start= 2394484, BFS took 	34.314422	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	3,691,775	, TEPS=	923,304	 
25.000000	: iteration  9: start=  351742, BFS took 	0.007287	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	274	, TEPS=	0	 (result discarded)
25.000000	: iteration 10: start=  565854, BFS took 	34.266234	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,696,967	, TEPS=	924,603	 
25.000000	: iteration 11: start=  221315, BFS took 	0.006921	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.006941	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	288	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	34.367951	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,686,025	, TEPS=	921,866	 
25.000000	: iteration 14: start=  929738, BFS took 	34.297856	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	3,693,558	, TEPS=	923,750	 
25.000000	: iteration 15: start=  828234, BFS took 	0.006495	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	307	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	0.006046	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	496	, TEPS=	0	 (result discarded)
25.000000	: iteration 17: start=  950965, BFS took 	0.006201	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	483	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	34.272214	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,696,322	, TEPS=	924,442	 
25.000000	: iteration 19: start= 1291427, BFS took 	34.222105	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,701,734	, TEPS=	925,795	 
25.000000	: iteration 20: start= 2028424, BFS took 	34.324004	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,690,744	, TEPS=	923,047	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.006699	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	149	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	34.399267	s, covered 	31682680	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	3,682,670	, TEPS=	921,027	 
25.000000	: iteration 23: start= 1642323, BFS took 	34.175265	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,706,807	, TEPS=	927,064	 
25.000000	: iteration 24: start= 1257228, BFS took 	34.347734	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,688,195	, TEPS=	922,409	 
25.000000	: iteration 25: start=  490027, BFS took 	34.356220	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,687,284	, TEPS=	922,181	 
25.000000	: iteration 26: start= 1062860, BFS took 	34.287184	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,694,708	, TEPS=	924,038	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	25.000000	: 	3.41739120483398438e+01
  firstquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	3.42376903891563416e+01
         median_C++SR_PythonFilter_OTFtime	25.000000	: 	3.43061391115188599e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	25.000000	: 	3.43540984988212585e+01
            max_C++SR_PythonFilter_OTFtime	25.000000	: 	3.44368891716003418e+01
           mean_C++SR_PythonFilter_OTFtime	25.000000	: 	3.43003933876752853e+01
         stddev_C++SR_PythonFilter_OTFtime	25.000000	: 	7.55221626950833835e-02
          total_C++SR_PythonFilter_OTFtime	25.000000	: 	5.488063e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  firstquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
         median_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  thirdquartile_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
            max_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16826800000000000e+07
           mean_C++SR_PythonFilter_OTFnedge	25.000000	: 	3.16826763750000000e+07
         stddev_C++SR_PythonFilter_OTFnedge	25.000000	: 	1.02469507659595993e+00
          total_C++SR_PythonFilter_OTFnedge	25.000000	: 	5.069228e+08

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.20021429407401127e+05
  firstquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.22238619173914194e+05
         median_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.23527965183166554e+05
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.25374433146501426e+05
            max_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.27101233103897190e+05
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.23682595055183046e+05
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	2.27068799798601560e+02

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.67864647613037890e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.68751176672121789e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.69266704635911249e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.70005011708060978e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.70695461557946308e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	3.69328539129878674e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	25.000000	: 	9.07921309746374050e+02
Total runtime for cpo on 25% is	624.182396	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 2500))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_a441cd9367f267a2ff66cb51471d5e04;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	25	% in	6.064400	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 66.127446s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	7.108765	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	17,820,415	, TEPS=	4,456,846	 
25.000000	: iteration  2: start= 2390036, BFS took 	7.047280	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	17,975,891	, TEPS=	4,495,731	 
25.000000	: iteration  3: start= 1726462, BFS took 	6.864627	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,454,191	, TEPS=	4,615,352	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.007093	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.006932	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
25.000000	: iteration  6: start=  307086, BFS took 	0.006869	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	727	, TEPS=	0	 (result discarded)
25.000000	: iteration  7: start=  724625, BFS took 	6.882274	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,406,872	, TEPS=	4,603,518	 
25.000000	: iteration  8: start= 2394484, BFS took 	6.863088	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	18,458,329	, TEPS=	4,616,387	 
25.000000	: iteration  9: start=  351742, BFS took 	0.007177	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	278	, TEPS=	0	 (result discarded)
25.000000	: iteration 10: start=  565854, BFS took 	6.988061	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,128,224	, TEPS=	4,533,829	 
25.000000	: iteration 11: start=  221315, BFS took 	0.007137	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.007301	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	273	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	6.869623	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,440,770	, TEPS=	4,611,996	 
25.000000	: iteration 14: start=  929738, BFS took 	6.873423	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	18,430,575	, TEPS=	4,609,446	 
25.000000	: iteration 15: start=  828234, BFS took 	0.006995	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	285	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	0.006232	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	481	, TEPS=	0	 (result discarded)
25.000000	: iteration 17: start=  950965, BFS took 	0.007080	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	423	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	6.857903	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,472,285	, TEPS=	4,619,878	 
25.000000	: iteration 19: start= 1291427, BFS took 	7.053025	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	17,961,249	, TEPS=	4,492,069	 
25.000000	: iteration 20: start= 2028424, BFS took 	7.069769	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	17,918,709	, TEPS=	4,481,430	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.007467	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	133	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	7.022534	s, covered 	31682680	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	18,039,236	, TEPS=	4,511,573	 
25.000000	: iteration 23: start= 1642323, BFS took 	6.922569	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,299,729	, TEPS=	4,576,722	 
25.000000	: iteration 24: start= 1257228, BFS took 	6.902070	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	18,354,079	, TEPS=	4,590,315	 
25.000000	: iteration 25: start=  490027, BFS took 	7.040783	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	17,992,478	, TEPS=	4,499,879	 
25.000000	: iteration 26: start= 1062860, BFS took 	7.044140	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	17,983,904	, TEPS=	4,497,735	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	25.000000	: 	6.85790300369262695e+00
  firstquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	6.87057298421859741e+00
         median_PythonSR_SejitsFilter_OTFtime	25.000000	: 	6.95531499385833740e+00
  thirdquartile_PythonSR_SejitsFilter_OTFtime	25.000000	: 	7.04649490118026733e+00
            max_PythonSR_SejitsFilter_OTFtime	25.000000	: 	7.10876488685607910e+00
           mean_PythonSR_SejitsFilter_OTFtime	25.000000	: 	6.96312089264392853e+00
         stddev_PythonSR_SejitsFilter_OTFtime	25.000000	: 	9.09112610966676810e-02
          total_PythonSR_SejitsFilter_OTFtime	25.000000	: 	1.114099e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  firstquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
         median_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
            max_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826800000000000e+07
           mean_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	3.16826763750000000e+07
         stddev_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	1.02469507659595993e+00
          total_PythonSR_SejitsFilter_OTFnedge	25.000000	: 	5.069228e+08

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.45684679466336593e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.49623218692178372e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.55527583046399336e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.61135892734445259e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.61987811477364320e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.55006840523201786e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	4.58365561273164894e+03

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.78204150814201385e+07
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.79778950376596004e+07
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.82139772465211377e+07
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.84382217910270318e+07
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.84722853227566406e+07
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.81931555935634002e+07
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	25.000000	: 	1.83274583347329135e+04
Total runtime for pso on 25% is	194.217348	s.
--Generating starting verts
Generated starting verts in 65.679867s.
--Doing BFS
25.000000	: iteration  1: start=  999511, BFS took 	39.811987	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,181,984	, TEPS=	795,807	 
25.000000	: iteration  2: start= 2390036, BFS took 	39.786122	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,184,053	, TEPS=	796,324	 
25.000000	: iteration  3: start= 1726462, BFS took 	39.856745	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,178,411	, TEPS=	794,913	 
25.000000	: iteration  4: start= 2235138, BFS took 	0.007202	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	138	, TEPS=	0	 (result discarded)
25.000000	: iteration  5: start=     274, BFS took 	0.006940	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	144	, TEPS=	0	 (result discarded)
25.000000	: iteration  6: start=  307086, BFS took 	0.006948	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	719	, TEPS=	0	 (result discarded)
25.000000	: iteration  7: start=  724625, BFS took 	39.560230	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,202,234	, TEPS=	800,871	 
25.000000	: iteration  8: start= 2394484, BFS took 	39.553815	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	3,202,754	, TEPS=	801,001	 
25.000000	: iteration  9: start=  351742, BFS took 	0.007325	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	273	, TEPS=	0	 (result discarded)
25.000000	: iteration 10: start=  565854, BFS took 	39.656016	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,194,499	, TEPS=	798,937	 
25.000000	: iteration 11: start=  221315, BFS took 	0.007141	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	140	, TEPS=	0	 (result discarded)
25.000000	: iteration 12: start=  950518, BFS took 	0.007434	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	269	, TEPS=	0	 (result discarded)
25.000000	: iteration 13: start=  446425, BFS took 	39.706801	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,190,414	, TEPS=	797,915	 
25.000000	: iteration 14: start=  929738, BFS took 	39.503539	s, covered 	31682677	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	3,206,830	, TEPS=	802,021	 
25.000000	: iteration 15: start=  828234, BFS took 	0.007254	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	275	, TEPS=	0	 (result discarded)
25.000000	: iteration 16: start= 1605236, BFS took 	0.006356	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	471	, TEPS=	0	 (result discarded)
25.000000	: iteration 17: start=  950965, BFS took 	0.007362	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	407	, TEPS=	0	 (result discarded)
25.000000	: iteration 18: start= 2242285, BFS took 	39.629114	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,196,668	, TEPS=	799,479	 
25.000000	: iteration 19: start= 1291427, BFS took 	39.832622	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,180,336	, TEPS=	795,395	 
25.000000	: iteration 20: start= 2028424, BFS took 	39.698975	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,191,043	, TEPS=	798,072	 
25.000000	: iteration 21: start= 1004718, BFS took 	0.007632	s, covered 	0	 edges, discovered 	1	 verts, TEPS incl. filtered edges=	131	, TEPS=	0	 (result discarded)
25.000000	: iteration 22: start=  750848, BFS took 	39.701332	s, covered 	31682680	 edges, discovered 	1623332	 verts, TEPS incl. filtered edges=	3,190,853	, TEPS=	798,025	 
25.000000	: iteration 23: start= 1642323, BFS took 	39.674200	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,193,035	, TEPS=	798,571	 
25.000000	: iteration 24: start= 1257228, BFS took 	39.652383	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,194,792	, TEPS=	799,010	 
25.000000	: iteration 25: start=  490027, BFS took 	39.779113	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,184,614	, TEPS=	796,465	 
25.000000	: iteration 26: start= 1062860, BFS took 	39.764113	s, covered 	31682676	 edges, discovered 	1623331	 verts, TEPS incl. filtered edges=	3,185,815	, TEPS=	796,765	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.95035388469696045e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.96349313855171204e+01
         median_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.97001535892486572e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.97843696475028992e+01
            max_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.98567450046539307e+01
           mean_PythonSR_PythonFilter_OTFtime	25.000000	: 	3.96979442089796066e+01
         stddev_PythonSR_PythonFilter_OTFtime	25.000000	: 	1.03878669319057149e-01
          total_PythonSR_PythonFilter_OTFtime	25.000000	: 	6.351671e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  firstquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
         median_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
  thirdquartile_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16826760000000000e+07
            max_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16826800000000000e+07
           mean_PythonSR_PythonFilter_OTFnedge	25.000000	: 	3.16826763750000000e+07
         stddev_PythonSR_PythonFilter_OTFnedge	25.000000	: 	1.02469507659595993e+00
          total_PythonSR_PythonFilter_OTFnedge	25.000000	: 	5.069228e+08

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.94913784261623165e+05
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.96359888697453309e+05
         median_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.98049255820503226e+05
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.99362505228357273e+05
            max_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	8.02021234673015657e+05
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	7.98093629425821826e+05
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	2.60558082601787589e+02

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.17841160850460548e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.18419376402505906e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.19094852685345244e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.19619953298600065e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.20683021566099441e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	3.19112599748605024e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	25.000000	: 	1.04182085357514165e+03
Total runtime for ppo on 25% is	711.486727	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef
{
  double myfunc(const Obj2 &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_Obj2double_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_bfbd93b78f3801787b39b750cbda67ef;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101
{
  double myfunc(const double &x, const double &y)
  {
    return y;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_aafb9d1d9f0662d21fe8c33bafdbc101;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	0.062109	s.
--Generating starting verts
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_f478003faf74267d41b8a2b1eb850b07
{
  double myfunc(const double &x, const double &y)
  {
    return x;
  }
  
                        

            PyObject* get_function()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryFunctionObj *");

              BinaryFunctionObj_SEJITS* retf = new BinaryFunctionObj_SEJITS(Py_None);
              retf->customFunc_doubledouble_double = &myfunc;
                              
              BinaryFunctionObj* retO = new BinaryFunctionObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_f478003faf74267d41b8a2b1eb850b07;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_function", &get_function);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6
{
  bool myfunc(const double &x, const double &y)
  {
    return y == -1;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::BinaryPredicateObj *");

              BinaryPredicateObj_SEJITS* retf = new BinaryPredicateObj_SEJITS();
              retf->customFuncDD = &myfunc;
                              
              BinaryPredicateObj* retO = new BinaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_e5c4ffa654fafac12ead4af3a19935c6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj_Python()!!!
BinaryPredicateObj_SEJITS()!!!
BinaryPredicateObj()!!!
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 71.699084s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	7.192156	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,840,016	, TEPS=	17,840,016	 
100.000000	: iteration  2: start= 2390036, BFS took 	6.436841	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	19,933,408	, TEPS=	19,933,408	 
100.000000	: iteration  3: start= 1726462, BFS took 	6.531897	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	19,643,326	, TEPS=	19,643,326	 
100.000000	: iteration  4: start= 2235138, BFS took 	6.987144	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,363,466	, TEPS=	18,363,466	 
100.000000	: iteration  5: start=     274, BFS took 	7.520939	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,060,128	, TEPS=	17,060,128	 
100.000000	: iteration  6: start=  307086, BFS took 	7.220241	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,770,623	, TEPS=	17,770,623	 
100.000000	: iteration  7: start=  724625, BFS took 	6.979408	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,383,820	, TEPS=	18,383,820	 
100.000000	: iteration  8: start= 2394484, BFS took 	6.328489	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	20,274,694	, TEPS=	20,274,694	 
100.000000	: iteration  9: start=  351742, BFS took 	6.776406	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,934,547	, TEPS=	18,934,547	 
100.000000	: iteration 10: start=  565854, BFS took 	6.242331	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	20,554,530	, TEPS=	20,554,530	 
100.000000	: iteration 11: start=  221315, BFS took 	7.428744	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,271,854	, TEPS=	17,271,854	 
100.000000	: iteration 12: start=  950518, BFS took 	7.548692	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,997,406	, TEPS=	16,997,406	 
100.000000	: iteration 13: start=  446425, BFS took 	7.477589	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,159,031	, TEPS=	17,159,031	 
100.000000	: iteration 14: start=  929738, BFS took 	7.397947	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,343,755	, TEPS=	17,343,755	 
100.000000	: iteration 15: start=  828234, BFS took 	7.350888	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,454,786	, TEPS=	17,454,786	 
100.000000	: iteration 16: start= 1605236, BFS took 	7.058188	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,178,629	, TEPS=	18,178,629	 

BFS execution times (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	6.24233102798461914e+00
  firstquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	6.59302431344985962e+00
         median_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	7.12517201900482178e+00
  thirdquartile_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	7.42104476690292358e+00
            max_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	7.54869198799133301e+00
           mean_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	7.02986875176429749e+00
         stddev_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	4.43637981811116300e-01
          total_SejitsSR_SejitsFilter_OTFtime	100.000000	: 	1.124779e+02

number of edges traversed OTF
            min_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_SejitsSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (SejitsSR_SejitsFilter_OTF)
            min_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.69974062001888789e+07
  firstquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.72898295625182018e+07
         median_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.80093230718138181e+07
  thirdquartile_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.94661314971424490e+07
            max_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.05545305791681483e+07
  harmonic_mean_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.82518605297998376e+07
harmonic_stddev_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.36313864966305118e+05

TEPS including filtered edges (SejitsSR_SejitsFilter_OTF)
            min_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.69974062001888789e+07
  firstquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.72898295625182018e+07
         median_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.80093230718138181e+07
  thirdquartile_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.94661314971424490e+07
            max_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	2.05545305791681483e+07
  harmonic_mean_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.82518605297998376e+07
harmonic_stddev_IncFiltered_SejitsSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.36313864966305118e+05
Total runtime for sso on 100% is	190.823909	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	2.064439	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 74.365248s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	7.541610	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,013,367	, TEPS=	17,013,367	 
100.000000	: iteration  2: start= 2390036, BFS took 	6.861446	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,699,875	, TEPS=	18,699,875	 
100.000000	: iteration  3: start= 1726462, BFS took 	6.960302	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,434,284	, TEPS=	18,434,284	 
100.000000	: iteration  4: start= 2235138, BFS took 	7.431997	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,264,294	, TEPS=	17,264,294	 
100.000000	: iteration  5: start=     274, BFS took 	7.924851	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,190,611	, TEPS=	16,190,611	 
100.000000	: iteration  6: start=  307086, BFS took 	7.556353	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,980,173	, TEPS=	16,980,173	 
100.000000	: iteration  7: start=  724625, BFS took 	7.261524	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,669,594	, TEPS=	17,669,594	 
100.000000	: iteration  8: start= 2394484, BFS took 	6.614486	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	19,398,058	, TEPS=	19,398,058	 
100.000000	: iteration  9: start=  351742, BFS took 	7.077100	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	18,130,050	, TEPS=	18,130,050	 
100.000000	: iteration 10: start=  565854, BFS took 	6.464913	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	19,846,854	, TEPS=	19,846,854	 
100.000000	: iteration 11: start=  221315, BFS took 	7.743861	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,569,019	, TEPS=	16,569,019	 
100.000000	: iteration 12: start=  950518, BFS took 	7.937736	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,164,329	, TEPS=	16,164,329	 
100.000000	: iteration 13: start=  446425, BFS took 	7.841892	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,361,891	, TEPS=	16,361,891	 
100.000000	: iteration 14: start=  929738, BFS took 	7.714418	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,632,257	, TEPS=	16,632,257	 
100.000000	: iteration 15: start=  828234, BFS took 	7.644894	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	16,783,513	, TEPS=	16,783,513	 
100.000000	: iteration 16: start= 1605236, BFS took 	7.316194	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	17,537,558	, TEPS=	17,537,558	 

BFS execution times (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTFtime	100.000000	: 	6.46491289138793945e+00
  firstquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	6.98950141668319702e+00
         median_C++SR_SejitsFilter_OTFtime	100.000000	: 	7.48680353164672852e+00
  thirdquartile_C++SR_SejitsFilter_OTFtime	100.000000	: 	7.73650020360946655e+00
            max_C++SR_SejitsFilter_OTFtime	100.000000	: 	7.93773603439331055e+00
           mean_C++SR_SejitsFilter_OTFtime	100.000000	: 	7.36834855377674103e+00
         stddev_C++SR_SejitsFilter_OTFtime	100.000000	: 	4.59834929547895288e-01
          total_C++SR_SejitsFilter_OTFtime	100.000000	: 	1.178936e+02

number of edges traversed OTF
            min_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_SejitsFilter_OTF)
            min_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.61643299101979677e+07
  firstquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.65848290223182868e+07
         median_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.71388309652537964e+07
  thirdquartile_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.83582259961196296e+07
            max_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.98468542663463131e+07
  harmonic_mean_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.74134248758134544e+07
harmonic_stddev_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.42337720339198568e+05

TEPS including filtered edges (C++SR_SejitsFilter_OTF)
            min_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.61643299101979677e+07
  firstquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.65848290223182868e+07
         median_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.71388309652537964e+07
  thirdquartile_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.83582259961196296e+07
            max_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.98468542663463131e+07
  harmonic_mean_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.74134248758134544e+07
harmonic_stddev_IncFiltered_C++SR_SejitsFilter_OTF_TEPS	100.000000	: 	1.42337720339198568e+05
Total runtime for cso on 100% is	200.952616	s.
--Materializing the filter
Materialized 100.000000 in	99.353413	s.
100.000000	: 	128309684	 edges survived the filter.
edge Mat: 2396784-by-2396784 (row-by-col) Mat with 128309684 elements.
1 filter(s) remove 0 additional elements (128309684 total elements stored).
Too many elements to print.
vertex attribute Vec: length=2396784, dense, [ *too many to print* ]
--Generating starting verts
Generated starting verts in 20.064424s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	5.995560	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,400,533	 
100.000000	: iteration  2: start= 2390036, BFS took 	5.349948	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	23,983,071	 
100.000000	: iteration  3: start= 1726462, BFS took 	5.336519	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	24,043,423	 
100.000000	: iteration  4: start= 2235138, BFS took 	5.905958	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,725,211	 
100.000000	: iteration  5: start=     274, BFS took 	6.307592	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,341,865	 
100.000000	: iteration  6: start=  307086, BFS took 	6.091772	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,062,538	 
100.000000	: iteration  7: start=  724625, BFS took 	5.870047	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,858,119	 
100.000000	: iteration  8: start= 2394484, BFS took 	4.998605	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	25,668,798	 
100.000000	: iteration  9: start=  351742, BFS took 	5.680539	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	22,587,326	 
100.000000	: iteration 10: start=  565854, BFS took 	4.879549	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	26,295,090	 
100.000000	: iteration 11: start=  221315, BFS took 	6.327008	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,279,440	 
100.000000	: iteration 12: start=  950518, BFS took 	6.359906	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,174,540	 
100.000000	: iteration 13: start=  446425, BFS took 	6.341338	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,233,614	 
100.000000	: iteration 14: start=  929738, BFS took 	6.289662	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,399,853	 
100.000000	: iteration 15: start=  828234, BFS took 	6.140212	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	20,896,376	 
100.000000	: iteration 16: start= 1605236, BFS took 	5.912233	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	0	, TEPS=	21,702,152	 

BFS execution times (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mattime	100.000000	: 	4.87954902648925781e+00
  firstquartile_C++SR_PythonFilter_Mattime	100.000000	: 	5.43259567022323608e+00
         median_C++SR_PythonFilter_Mattime	100.000000	: 	5.95389652252197266e+00
  thirdquartile_C++SR_PythonFilter_Mattime	100.000000	: 	6.30310940742492676e+00
            max_C++SR_PythonFilter_Mattime	100.000000	: 	6.35990619659423828e+00
           mean_C++SR_PythonFilter_Mattime	100.000000	: 	5.86165298521518707e+00
         stddev_C++SR_PythonFilter_Mattime	100.000000	: 	4.83723417556305657e-01
          total_C++SR_PythonFilter_Mattime	100.000000	: 	9.378645e+01

number of edges traversed Mat
            min_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_Matnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_Matnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_Matnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_Mat)
            min_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.01745403208477646e+07
  firstquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.03563623376837820e+07
         median_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.15513431817571223e+07
  thirdquartile_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.36341351730747409e+07
            max_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.62950906535547785e+07
  harmonic_mean_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.18894199850504622e+07
harmonic_stddev_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	2.44500838196506549e+05

TEPS including materialization time (C++SR_PythonFilter_Mat)
            min_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.21373716053632298e+06
  firstquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.21438962443406344e+06
         median_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.21841688423786196e+06
  thirdquartile_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.22448048725120071e+06
            max_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.23097512894362980e+06
  harmonic_mean_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	1.21948489667791990e+06
harmonic_stddev_PlusMatTime_C++SR_PythonFilter_Mat_TEPS	100.000000	: 	7.58865302685097049e+02
Total runtime for cpm on 100% is	224.832273	s.
--Generating starting verts
Generated starting verts in 67.958560s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	41.017768	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,128,112	, TEPS=	3,128,112	 
100.000000	: iteration  2: start= 2390036, BFS took 	40.178886	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,193,423	, TEPS=	3,193,423	 
100.000000	: iteration  3: start= 1726462, BFS took 	40.622434	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,158,554	, TEPS=	3,158,554	 
100.000000	: iteration  4: start= 2235138, BFS took 	41.322789	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,105,022	, TEPS=	3,105,022	 
100.000000	: iteration  5: start=     274, BFS took 	41.232333	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,111,834	, TEPS=	3,111,834	 
100.000000	: iteration  6: start=  307086, BFS took 	41.288872	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,107,573	, TEPS=	3,107,573	 
100.000000	: iteration  7: start=  724625, BFS took 	40.256653	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,187,254	, TEPS=	3,187,254	 
100.000000	: iteration  8: start= 2394484, BFS took 	40.281296	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,185,304	, TEPS=	3,185,304	 
100.000000	: iteration  9: start=  351742, BFS took 	40.579959	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,161,860	, TEPS=	3,161,860	 
100.000000	: iteration 10: start=  565854, BFS took 	40.380036	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,177,515	, TEPS=	3,177,515	 
100.000000	: iteration 11: start=  221315, BFS took 	41.207085	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,113,740	, TEPS=	3,113,740	 
100.000000	: iteration 12: start=  950518, BFS took 	41.210281	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,113,499	, TEPS=	3,113,499	 
100.000000	: iteration 13: start=  446425, BFS took 	41.036219	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,126,705	, TEPS=	3,126,705	 
100.000000	: iteration 14: start=  929738, BFS took 	41.048968	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,125,734	, TEPS=	3,125,734	 
100.000000	: iteration 15: start=  828234, BFS took 	41.417962	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,097,887	, TEPS=	3,097,887	 
100.000000	: iteration 16: start= 1605236, BFS took 	40.904425	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	3,136,780	, TEPS=	3,136,780	 

BFS execution times (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTFtime	100.000000	: 	4.01788859367370605e+01
  firstquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	4.04300166368484497e+01
         median_C++SR_PythonFilter_OTFtime	100.000000	: 	4.10269935131072998e+01
  thirdquartile_C++SR_PythonFilter_OTFtime	100.000000	: 	4.12268199324607849e+01
            max_C++SR_PythonFilter_OTFtime	100.000000	: 	4.14179620742797852e+01
           mean_C++SR_PythonFilter_OTFtime	100.000000	: 	4.08741228580474854e+01
         stddev_C++SR_PythonFilter_OTFtime	100.000000	: 	4.25027561633672557e-01
          total_C++SR_PythonFilter_OTFtime	100.000000	: 	6.539860e+02

number of edges traversed OTF
            min_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_C++SR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_C++SR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_C++SR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (C++SR_PythonFilter_OTF)
            min_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.09788742792051379e+06
  firstquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.11225049846910499e+06
         median_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.12740904221800156e+06
  thirdquartile_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.17360173185039219e+06
            max_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.19342313776507741e+06
  harmonic_mean_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.13910550314691616e+06
harmonic_stddev_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.55958227043521538e+03

TEPS including filtered edges (C++SR_PythonFilter_OTF)
            min_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.09788742792051379e+06
  firstquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.11225049846910499e+06
         median_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.12740904221800156e+06
  thirdquartile_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.17360173185039219e+06
            max_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.19342313776507741e+06
  harmonic_mean_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.13910550314691616e+06
harmonic_stddev_IncFiltered_C++SR_PythonFilter_OTF_TEPS	100.000000	: 	3.55958227043521538e+03
Total runtime for cpo on 100% is	728.534792	s.
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
#include <boost/python.hpp>
#include "pyOperationsObj.h"
#include <tr1/memory>
#define COMBBLAS_TR1

namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6
{
  bool myfunc(const Obj2 &e)
  {
    if ((e.count > 0 && e.latest < 10000))
      return true;
    else
      return false;
  }
  
                        

            PyObject* get_predicate()
            {
              using namespace op;
              swig_module_info* module = SWIG_Python_GetModule();

              swig_type_info* ty = SWIG_TypeQueryModule(module, module, "op::UnaryPredicateObj *");

              UnaryPredicateObj_SEJITS* retf = new UnaryPredicateObj_SEJITS();
              retf->customFuncO2 = &myfunc;
                              
              UnaryPredicateObj* retO = new UnaryPredicateObj();
              retO->worker = *retf;

              PyObject* ret_obj = SWIG_NewPointerObj((void*)(retO), ty, SWIG_POINTER_OWN | 0);
              
              return ret_obj;
            }
}

using namespace private_namespace_2ae6a1f413b5c5b701e18e23b8fa45a6;

BOOST_PYTHON_MODULE(module)
{
  boost::python::def("myfunc", &myfunc);
  boost::python::def("get_predicate", &get_predicate);
}
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Created SEJITS filter for 	100	% in	1.071051	s.
--Generating starting verts
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj_Python()!!!
UnaryPredicateObj_SEJITS()!!!
UnaryPredicateObj()!!!
Generated starting verts in 75.372792s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	26.024225	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,930,336	, TEPS=	4,930,336	 
100.000000	: iteration  2: start= 2390036, BFS took 	24.805233	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,172,625	, TEPS=	5,172,625	 
100.000000	: iteration  3: start= 1726462, BFS took 	25.667773	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,998,804	, TEPS=	4,998,804	 
100.000000	: iteration  4: start= 2235138, BFS took 	25.943057	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,945,761	, TEPS=	4,945,761	 
100.000000	: iteration  5: start=     274, BFS took 	25.819908	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,969,350	, TEPS=	4,969,350	 
100.000000	: iteration  6: start=  307086, BFS took 	25.977678	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,939,170	, TEPS=	4,939,170	 
100.000000	: iteration  7: start=  724625, BFS took 	25.168526	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,097,961	, TEPS=	5,097,961	 
100.000000	: iteration  8: start= 2394484, BFS took 	24.813468	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,170,908	, TEPS=	5,170,908	 
100.000000	: iteration  9: start=  351742, BFS took 	24.999849	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,132,358	, TEPS=	5,132,358	 
100.000000	: iteration 10: start=  565854, BFS took 	24.392595	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	5,260,128	, TEPS=	5,260,128	 
100.000000	: iteration 11: start=  221315, BFS took 	26.379883	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,863,864	, TEPS=	4,863,864	 
100.000000	: iteration 12: start=  950518, BFS took 	27.404895	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,681,943	, TEPS=	4,681,943	 
100.000000	: iteration 13: start=  446425, BFS took 	26.925384	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,765,324	, TEPS=	4,765,324	 
100.000000	: iteration 14: start=  929738, BFS took 	26.849423	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,778,805	, TEPS=	4,778,805	 
100.000000	: iteration 15: start=  828234, BFS took 	26.573925	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,828,348	, TEPS=	4,828,348	 
100.000000	: iteration 16: start= 1605236, BFS took 	26.021454	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	4,930,861	, TEPS=	4,930,861	 

BFS execution times (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.43925950527191162e+01
  firstquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.50420182943344116e+01
         median_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.59603675603866577e+01
  thirdquartile_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.65254144668579102e+01
            max_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.74048950672149658e+01
           mean_PythonSR_SejitsFilter_OTFtime	100.000000	: 	2.58604547828435898e+01
         stddev_PythonSR_SejitsFilter_OTFtime	100.000000	: 	8.55259972495944543e-01
          total_PythonSR_SejitsFilter_OTFtime	100.000000	: 	4.137673e+02

number of edges traversed OTF
            min_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_SejitsFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_SejitsFilter_OTF)
            min_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.68194399888426159e+06
  firstquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.83722794717366248e+06
         median_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.94246627098310459e+06
  thirdquartile_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	5.12375920934092626e+06
            max_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	5.26012848254524264e+06
  harmonic_mean_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.96155945738133509e+06
harmonic_stddev_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.87748008487974585e+04

TEPS including filtered edges (PythonSR_SejitsFilter_OTF)
            min_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.68194399888426159e+06
  firstquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.83722794717366248e+06
         median_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.94246627098310459e+06
  thirdquartile_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	5.12375920934092626e+06
            max_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	5.26012848254524264e+06
  harmonic_mean_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	4.96155945738133509e+06
harmonic_stddev_IncFiltered_PythonSR_SejitsFilter_OTF_TEPS	100.000000	: 	1.87748008487974585e+04
Total runtime for pso on 100% is	496.897556	s.
--Generating starting verts
Generated starting verts in 68.275480s.
--Doing BFS
100.000000	: iteration  1: start=  999511, BFS took 	61.693481	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,079,768	, TEPS=	2,079,768	 
100.000000	: iteration  2: start= 2390036, BFS took 	60.657973	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,115,273	, TEPS=	2,115,273	 
100.000000	: iteration  3: start= 1726462, BFS took 	60.608732	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,116,991	, TEPS=	2,116,991	 
100.000000	: iteration  4: start= 2235138, BFS took 	61.557204	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,084,373	, TEPS=	2,084,373	 
100.000000	: iteration  5: start=     274, BFS took 	62.097417	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,066,240	, TEPS=	2,066,240	 
100.000000	: iteration  6: start=  307086, BFS took 	61.729080	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,078,569	, TEPS=	2,078,569	 
100.000000	: iteration  7: start=  724625, BFS took 	61.406238	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,089,497	, TEPS=	2,089,497	 
100.000000	: iteration  8: start= 2394484, BFS took 	60.361350	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,125,667	, TEPS=	2,125,667	 
100.000000	: iteration  9: start=  351742, BFS took 	61.126983	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,099,043	, TEPS=	2,099,043	 
100.000000	: iteration 10: start=  565854, BFS took 	60.259651	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,129,255	, TEPS=	2,129,255	 
100.000000	: iteration 11: start=  221315, BFS took 	62.020622	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,068,798	, TEPS=	2,068,798	 
100.000000	: iteration 12: start=  950518, BFS took 	62.127591	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,065,236	, TEPS=	2,065,236	 
100.000000	: iteration 13: start=  446425, BFS took 	62.080589	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,066,800	, TEPS=	2,066,800	 
100.000000	: iteration 14: start=  929738, BFS took 	61.797032	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,076,283	, TEPS=	2,076,283	 
100.000000	: iteration 15: start=  828234, BFS took 	61.740604	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,078,181	, TEPS=	2,078,181	 
100.000000	: iteration 16: start= 1605236, BFS took 	61.438111	s, covered 	128308184	 edges, discovered 	2395285	 verts, TEPS incl. filtered edges=	2,088,413	, TEPS=	2,088,413	 

BFS execution times (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.02596509456634521e+01
  firstquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.07752255201339722e+01
         median_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.16253424882888794e+01
  thirdquartile_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.19647245407104492e+01
            max_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.21275908946990967e+01
           mean_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.14189161360263824e+01
         stddev_PythonSR_PythonFilter_OTFtime	100.000000	: 	6.31566229985484839e-01
          total_PythonSR_PythonFilter_OTFtime	100.000000	: 	9.827027e+02

number of edges traversed OTF
            min_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  firstquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         median_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
  thirdquartile_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
            max_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
           mean_PythonSR_PythonFilter_OTFnedge	100.000000	: 	1.28308184000000000e+08
         stddev_PythonSR_PythonFilter_OTFnedge	100.000000	: 	0.00000000000000000e+00
          total_PythonSR_PythonFilter_OTFnedge	100.000000	: 	2.052931e+09

TEPS (PythonSR_PythonFilter_OTF)
            min_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.06523675153397303e+06
  firstquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.07067002642918588e+06
         median_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.08207103899808321e+06
  thirdquartile_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.11121571573965531e+06
            max_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.12925534725875501e+06
  harmonic_mean_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.08906623678984959e+06
harmonic_stddev_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.62870346904131293e+03

TEPS including filtered edges (PythonSR_PythonFilter_OTF)
            min_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.06523675153397303e+06
  firstquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.07067002642918588e+06
         median_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.08207103899808321e+06
  thirdquartile_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.11121571573965531e+06
            max_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.12925534725875501e+06
  harmonic_mean_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.08906623678984959e+06
harmonic_stddev_IncFiltered_PythonSR_PythonFilter_OTF_TEPS	100.000000	: 	2.62870346904131293e+03
Total runtime for ppo on 100% is	1057.612935	s.
Total runtime for everything is		8194.395538
